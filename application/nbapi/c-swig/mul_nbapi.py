# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.11
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_mul_nbapi', [dirname(__file__)])
        except ImportError:
            import _mul_nbapi
            return _mul_nbapi
        if fp is not None:
            try:
                _mod = imp.load_module('_mul_nbapi', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _mul_nbapi = swig_import_helper()
    del swig_import_helper
else:
    import _mul_nbapi
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


OFP_VERSION = _mul_nbapi.OFP_VERSION
OFP_VERSION_11 = _mul_nbapi.OFP_VERSION_11
OFP_VERSION_13 = _mul_nbapi.OFP_VERSION_13
OFP_VERSION_131 = _mul_nbapi.OFP_VERSION_131
OFP_VERSION_140 = _mul_nbapi.OFP_VERSION_140
OFP_VERSION_MLAPI = _mul_nbapi.OFP_VERSION_MLAPI
OFP_MUL_SB_VERSION = _mul_nbapi.OFP_MUL_SB_VERSION
OFP_MAX_TYPE = _mul_nbapi.OFP_MAX_TYPE
OFP_MAX_PAYLOAD = _mul_nbapi.OFP_MAX_PAYLOAD
OFP_MAX_TABLE_NAME_LEN = _mul_nbapi.OFP_MAX_TABLE_NAME_LEN
OFP_MAX_PORT_NAME_LEN = _mul_nbapi.OFP_MAX_PORT_NAME_LEN
OFP_TCP_PORT = _mul_nbapi.OFP_TCP_PORT
OFP_SSL_PORT = _mul_nbapi.OFP_SSL_PORT
OFP_NO_BUFFER = _mul_nbapi.OFP_NO_BUFFER
OFP_ETH_ALEN = _mul_nbapi.OFP_ETH_ALEN
class ofp_header(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofp_header, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofp_header, name)
    __repr__ = _swig_repr
    __swig_setmethods__["version"] = _mul_nbapi.ofp_header_version_set
    __swig_getmethods__["version"] = _mul_nbapi.ofp_header_version_get
    if _newclass:version = _swig_property(_mul_nbapi.ofp_header_version_get, _mul_nbapi.ofp_header_version_set)
    __swig_setmethods__["type"] = _mul_nbapi.ofp_header_type_set
    __swig_getmethods__["type"] = _mul_nbapi.ofp_header_type_get
    if _newclass:type = _swig_property(_mul_nbapi.ofp_header_type_get, _mul_nbapi.ofp_header_type_set)
    __swig_setmethods__["length"] = _mul_nbapi.ofp_header_length_set
    __swig_getmethods__["length"] = _mul_nbapi.ofp_header_length_get
    if _newclass:length = _swig_property(_mul_nbapi.ofp_header_length_get, _mul_nbapi.ofp_header_length_set)
    __swig_setmethods__["xid"] = _mul_nbapi.ofp_header_xid_set
    __swig_getmethods__["xid"] = _mul_nbapi.ofp_header_xid_get
    if _newclass:xid = _swig_property(_mul_nbapi.ofp_header_xid_get, _mul_nbapi.ofp_header_xid_set)
    def __init__(self): 
        this = _mul_nbapi.new_ofp_header()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_ofp_header
    __del__ = lambda self : None;
ofp_header_swigregister = _mul_nbapi.ofp_header_swigregister
ofp_header_swigregister(ofp_header)

OFPMT_STANDARD = _mul_nbapi.OFPMT_STANDARD
OFPMT_OXM = _mul_nbapi.OFPMT_OXM
OFP_MAX_OXM_TLVS = _mul_nbapi.OFP_MAX_OXM_TLVS
class ofp_oxm_header(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofp_oxm_header, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofp_oxm_header, name)
    __repr__ = _swig_repr
    __swig_setmethods__["length"] = _mul_nbapi.ofp_oxm_header_length_set
    __swig_getmethods__["length"] = _mul_nbapi.ofp_oxm_header_length_get
    if _newclass:length = _swig_property(_mul_nbapi.ofp_oxm_header_length_get, _mul_nbapi.ofp_oxm_header_length_set)
    __swig_setmethods__["oxm_field_hm"] = _mul_nbapi.ofp_oxm_header_oxm_field_hm_set
    __swig_getmethods__["oxm_field_hm"] = _mul_nbapi.ofp_oxm_header_oxm_field_hm_get
    if _newclass:oxm_field_hm = _swig_property(_mul_nbapi.ofp_oxm_header_oxm_field_hm_get, _mul_nbapi.ofp_oxm_header_oxm_field_hm_set)
    __swig_setmethods__["oxm_class"] = _mul_nbapi.ofp_oxm_header_oxm_class_set
    __swig_getmethods__["oxm_class"] = _mul_nbapi.ofp_oxm_header_oxm_class_get
    if _newclass:oxm_class = _swig_property(_mul_nbapi.ofp_oxm_header_oxm_class_get, _mul_nbapi.ofp_oxm_header_oxm_class_set)
    __swig_setmethods__["data"] = _mul_nbapi.ofp_oxm_header_data_set
    __swig_getmethods__["data"] = _mul_nbapi.ofp_oxm_header_data_get
    if _newclass:data = _swig_property(_mul_nbapi.ofp_oxm_header_data_get, _mul_nbapi.ofp_oxm_header_data_set)
    def __init__(self): 
        this = _mul_nbapi.new_ofp_oxm_header()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_ofp_oxm_header
    __del__ = lambda self : None;
ofp_oxm_header_swigregister = _mul_nbapi.ofp_oxm_header_swigregister
ofp_oxm_header_swigregister(ofp_oxm_header)

OFPXMC_NXM_0 = _mul_nbapi.OFPXMC_NXM_0
OFPXMC_NXM_1 = _mul_nbapi.OFPXMC_NXM_1
OFPXMC_OPENFLOW_BASIC = _mul_nbapi.OFPXMC_OPENFLOW_BASIC
OFPXMC_EXPERIMENTER = _mul_nbapi.OFPXMC_EXPERIMENTER
OFPXMT_OFB_IN_PORT_SZ = _mul_nbapi.OFPXMT_OFB_IN_PORT_SZ
OFPXMT_OFB_METADATA_SZ = _mul_nbapi.OFPXMT_OFB_METADATA_SZ
OFPXMT_OFB_ETH_SZ = _mul_nbapi.OFPXMT_OFB_ETH_SZ
OFPXMT_OFB_ETH_TYPE_SZ = _mul_nbapi.OFPXMT_OFB_ETH_TYPE_SZ
OFPXMT_OFB_IPV4_SZ = _mul_nbapi.OFPXMT_OFB_IPV4_SZ
OFPXMT_OFB_VLAN_VID_SZ = _mul_nbapi.OFPXMT_OFB_VLAN_VID_SZ
OFPXMT_OFB_VLAN_PCP_SZ = _mul_nbapi.OFPXMT_OFB_VLAN_PCP_SZ
OFPXMT_OFB_IP_PROTO_SZ = _mul_nbapi.OFPXMT_OFB_IP_PROTO_SZ
OFPXMT_OFB_L4_PORT_SZ = _mul_nbapi.OFPXMT_OFB_L4_PORT_SZ
OFPXMT_OFB_IP_DSCP_SZ = _mul_nbapi.OFPXMT_OFB_IP_DSCP_SZ
OFPXMT_OFB_MPLS_LABEL_SZ = _mul_nbapi.OFPXMT_OFB_MPLS_LABEL_SZ
OFPXMT_OFB_MPLS_TC_SZ = _mul_nbapi.OFPXMT_OFB_MPLS_TC_SZ
OFPXMT_OFB_MPLS_BOS_SZ = _mul_nbapi.OFPXMT_OFB_MPLS_BOS_SZ
OFPXMT_OFB_IPV6_SZ = _mul_nbapi.OFPXMT_OFB_IPV6_SZ
OFPXMT_OFB_TUNNEL_ID_SZ = _mul_nbapi.OFPXMT_OFB_TUNNEL_ID_SZ
OFPXMT_OFB_IN_PORT = _mul_nbapi.OFPXMT_OFB_IN_PORT
OFPXMT_OFB_IN_PHY_PORT = _mul_nbapi.OFPXMT_OFB_IN_PHY_PORT
OFPXMT_OFB_METADATA = _mul_nbapi.OFPXMT_OFB_METADATA
OFPXMT_OFB_ETH_DST = _mul_nbapi.OFPXMT_OFB_ETH_DST
OFPXMT_OFB_ETH_SRC = _mul_nbapi.OFPXMT_OFB_ETH_SRC
OFPXMT_OFB_ETH_TYPE = _mul_nbapi.OFPXMT_OFB_ETH_TYPE
OFPXMT_OFB_VLAN_VID = _mul_nbapi.OFPXMT_OFB_VLAN_VID
OFPXMT_OFB_VLAN_PCP = _mul_nbapi.OFPXMT_OFB_VLAN_PCP
OFPXMT_OFB_IP_DSCP = _mul_nbapi.OFPXMT_OFB_IP_DSCP
OFPXMT_OFB_IP_ECN = _mul_nbapi.OFPXMT_OFB_IP_ECN
OFPXMT_OFB_IP_PROTO = _mul_nbapi.OFPXMT_OFB_IP_PROTO
OFPXMT_OFB_IPV4_SRC = _mul_nbapi.OFPXMT_OFB_IPV4_SRC
OFPXMT_OFB_IPV4_DST = _mul_nbapi.OFPXMT_OFB_IPV4_DST
OFPXMT_OFB_TCP_SRC = _mul_nbapi.OFPXMT_OFB_TCP_SRC
OFPXMT_OFB_TCP_DST = _mul_nbapi.OFPXMT_OFB_TCP_DST
OFPXMT_OFB_UDP_SRC = _mul_nbapi.OFPXMT_OFB_UDP_SRC
OFPXMT_OFB_UDP_DST = _mul_nbapi.OFPXMT_OFB_UDP_DST
OFPXMT_OFB_SCTP_SRC = _mul_nbapi.OFPXMT_OFB_SCTP_SRC
OFPXMT_OFB_SCTP_DST = _mul_nbapi.OFPXMT_OFB_SCTP_DST
OFPXMT_OFB_ICMPV4_TYPE = _mul_nbapi.OFPXMT_OFB_ICMPV4_TYPE
OFPXMT_OFB_ICMPV4_CODE = _mul_nbapi.OFPXMT_OFB_ICMPV4_CODE
OFPXMT_OFB_ARP_OP = _mul_nbapi.OFPXMT_OFB_ARP_OP
OFPXMT_OFB_ARP_SPA = _mul_nbapi.OFPXMT_OFB_ARP_SPA
OFPXMT_OFB_ARP_TPA = _mul_nbapi.OFPXMT_OFB_ARP_TPA
OFPXMT_OFB_ARP_SHA = _mul_nbapi.OFPXMT_OFB_ARP_SHA
OFPXMT_OFB_ARP_THA = _mul_nbapi.OFPXMT_OFB_ARP_THA
OFPXMT_OFB_IPV6_SRC = _mul_nbapi.OFPXMT_OFB_IPV6_SRC
OFPXMT_OFB_IPV6_DST = _mul_nbapi.OFPXMT_OFB_IPV6_DST
OFPXMT_OFB_IPV6_FLABEL = _mul_nbapi.OFPXMT_OFB_IPV6_FLABEL
OFPXMT_OFB_ICMPV6_TYPE = _mul_nbapi.OFPXMT_OFB_ICMPV6_TYPE
OFPXMT_OFB_ICMPV6_CODE = _mul_nbapi.OFPXMT_OFB_ICMPV6_CODE
OFPXMT_OFB_IPV6_ND_TARGET = _mul_nbapi.OFPXMT_OFB_IPV6_ND_TARGET
OFPXMT_OFB_IPV6_ND_SLL = _mul_nbapi.OFPXMT_OFB_IPV6_ND_SLL
OFPXMT_OFB_IPV6_ND_TLL = _mul_nbapi.OFPXMT_OFB_IPV6_ND_TLL
OFPXMT_OFB_MPLS_LABEL = _mul_nbapi.OFPXMT_OFB_MPLS_LABEL
OFPXMT_OFB_MPLS_TC = _mul_nbapi.OFPXMT_OFB_MPLS_TC
OFPXMT_OFB_MPLS_BOS = _mul_nbapi.OFPXMT_OFB_MPLS_BOS
OFPXMT_OFB_PBB_ISID = _mul_nbapi.OFPXMT_OFB_PBB_ISID
OFPXMT_OFB_TUNNEL_ID = _mul_nbapi.OFPXMT_OFB_TUNNEL_ID
OFPXMT_OFB_IPV6_EXTHDR = _mul_nbapi.OFPXMT_OFB_IPV6_EXTHDR
OFPVID_PRESENT = _mul_nbapi.OFPVID_PRESENT
OFPVID_NONE = _mul_nbapi.OFPVID_NONE
OFP_MAX_INSTRUCTIONS = _mul_nbapi.OFP_MAX_INSTRUCTIONS
OFP_MAX_ACTIONS = _mul_nbapi.OFP_MAX_ACTIONS
OFPIT_GOTO_TABLE = _mul_nbapi.OFPIT_GOTO_TABLE
OFPIT_WRITE_METADATA = _mul_nbapi.OFPIT_WRITE_METADATA
OFPIT_WRITE_ACTIONS = _mul_nbapi.OFPIT_WRITE_ACTIONS
OFPIT_APPLY_ACTIONS = _mul_nbapi.OFPIT_APPLY_ACTIONS
OFPIT_CLEAR_ACTIONS = _mul_nbapi.OFPIT_CLEAR_ACTIONS
OFPIT_METER = _mul_nbapi.OFPIT_METER
OFPIT_EXPERIMENTER = _mul_nbapi.OFPIT_EXPERIMENTER
class ofp_instruction(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofp_instruction, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofp_instruction, name)
    __repr__ = _swig_repr
    __swig_setmethods__["type"] = _mul_nbapi.ofp_instruction_type_set
    __swig_getmethods__["type"] = _mul_nbapi.ofp_instruction_type_get
    if _newclass:type = _swig_property(_mul_nbapi.ofp_instruction_type_get, _mul_nbapi.ofp_instruction_type_set)
    __swig_setmethods__["len"] = _mul_nbapi.ofp_instruction_len_set
    __swig_getmethods__["len"] = _mul_nbapi.ofp_instruction_len_get
    if _newclass:len = _swig_property(_mul_nbapi.ofp_instruction_len_get, _mul_nbapi.ofp_instruction_len_set)
    def __init__(self): 
        this = _mul_nbapi.new_ofp_instruction()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_ofp_instruction
    __del__ = lambda self : None;
ofp_instruction_swigregister = _mul_nbapi.ofp_instruction_swigregister
ofp_instruction_swigregister(ofp_instruction)

class ofp_instruction_goto_table(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofp_instruction_goto_table, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofp_instruction_goto_table, name)
    __repr__ = _swig_repr
    __swig_setmethods__["type"] = _mul_nbapi.ofp_instruction_goto_table_type_set
    __swig_getmethods__["type"] = _mul_nbapi.ofp_instruction_goto_table_type_get
    if _newclass:type = _swig_property(_mul_nbapi.ofp_instruction_goto_table_type_get, _mul_nbapi.ofp_instruction_goto_table_type_set)
    __swig_setmethods__["len"] = _mul_nbapi.ofp_instruction_goto_table_len_set
    __swig_getmethods__["len"] = _mul_nbapi.ofp_instruction_goto_table_len_get
    if _newclass:len = _swig_property(_mul_nbapi.ofp_instruction_goto_table_len_get, _mul_nbapi.ofp_instruction_goto_table_len_set)
    __swig_setmethods__["table_id"] = _mul_nbapi.ofp_instruction_goto_table_table_id_set
    __swig_getmethods__["table_id"] = _mul_nbapi.ofp_instruction_goto_table_table_id_get
    if _newclass:table_id = _swig_property(_mul_nbapi.ofp_instruction_goto_table_table_id_get, _mul_nbapi.ofp_instruction_goto_table_table_id_set)
    __swig_setmethods__["pad"] = _mul_nbapi.ofp_instruction_goto_table_pad_set
    __swig_getmethods__["pad"] = _mul_nbapi.ofp_instruction_goto_table_pad_get
    if _newclass:pad = _swig_property(_mul_nbapi.ofp_instruction_goto_table_pad_get, _mul_nbapi.ofp_instruction_goto_table_pad_set)
    def __init__(self): 
        this = _mul_nbapi.new_ofp_instruction_goto_table()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_ofp_instruction_goto_table
    __del__ = lambda self : None;
ofp_instruction_goto_table_swigregister = _mul_nbapi.ofp_instruction_goto_table_swigregister
ofp_instruction_goto_table_swigregister(ofp_instruction_goto_table)

class ofp_instruction_write_metadata(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofp_instruction_write_metadata, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofp_instruction_write_metadata, name)
    __repr__ = _swig_repr
    __swig_setmethods__["type"] = _mul_nbapi.ofp_instruction_write_metadata_type_set
    __swig_getmethods__["type"] = _mul_nbapi.ofp_instruction_write_metadata_type_get
    if _newclass:type = _swig_property(_mul_nbapi.ofp_instruction_write_metadata_type_get, _mul_nbapi.ofp_instruction_write_metadata_type_set)
    __swig_setmethods__["len"] = _mul_nbapi.ofp_instruction_write_metadata_len_set
    __swig_getmethods__["len"] = _mul_nbapi.ofp_instruction_write_metadata_len_get
    if _newclass:len = _swig_property(_mul_nbapi.ofp_instruction_write_metadata_len_get, _mul_nbapi.ofp_instruction_write_metadata_len_set)
    __swig_setmethods__["pad"] = _mul_nbapi.ofp_instruction_write_metadata_pad_set
    __swig_getmethods__["pad"] = _mul_nbapi.ofp_instruction_write_metadata_pad_get
    if _newclass:pad = _swig_property(_mul_nbapi.ofp_instruction_write_metadata_pad_get, _mul_nbapi.ofp_instruction_write_metadata_pad_set)
    __swig_setmethods__["metadata"] = _mul_nbapi.ofp_instruction_write_metadata_metadata_set
    __swig_getmethods__["metadata"] = _mul_nbapi.ofp_instruction_write_metadata_metadata_get
    if _newclass:metadata = _swig_property(_mul_nbapi.ofp_instruction_write_metadata_metadata_get, _mul_nbapi.ofp_instruction_write_metadata_metadata_set)
    __swig_setmethods__["metadata_mask"] = _mul_nbapi.ofp_instruction_write_metadata_metadata_mask_set
    __swig_getmethods__["metadata_mask"] = _mul_nbapi.ofp_instruction_write_metadata_metadata_mask_get
    if _newclass:metadata_mask = _swig_property(_mul_nbapi.ofp_instruction_write_metadata_metadata_mask_get, _mul_nbapi.ofp_instruction_write_metadata_metadata_mask_set)
    def __init__(self): 
        this = _mul_nbapi.new_ofp_instruction_write_metadata()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_ofp_instruction_write_metadata
    __del__ = lambda self : None;
ofp_instruction_write_metadata_swigregister = _mul_nbapi.ofp_instruction_write_metadata_swigregister
ofp_instruction_write_metadata_swigregister(ofp_instruction_write_metadata)

OFP_ACT_HDR_SZ = _mul_nbapi.OFP_ACT_HDR_SZ
class ofp_action_header(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofp_action_header, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofp_action_header, name)
    __repr__ = _swig_repr
    __swig_setmethods__["type"] = _mul_nbapi.ofp_action_header_type_set
    __swig_getmethods__["type"] = _mul_nbapi.ofp_action_header_type_get
    if _newclass:type = _swig_property(_mul_nbapi.ofp_action_header_type_get, _mul_nbapi.ofp_action_header_type_set)
    __swig_setmethods__["len"] = _mul_nbapi.ofp_action_header_len_set
    __swig_getmethods__["len"] = _mul_nbapi.ofp_action_header_len_get
    if _newclass:len = _swig_property(_mul_nbapi.ofp_action_header_len_get, _mul_nbapi.ofp_action_header_len_set)
    __swig_setmethods__["pad"] = _mul_nbapi.ofp_action_header_pad_set
    __swig_getmethods__["pad"] = _mul_nbapi.ofp_action_header_pad_get
    if _newclass:pad = _swig_property(_mul_nbapi.ofp_action_header_pad_get, _mul_nbapi.ofp_action_header_pad_set)
    def __init__(self): 
        this = _mul_nbapi.new_ofp_action_header()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_ofp_action_header
    __del__ = lambda self : None;
ofp_action_header_swigregister = _mul_nbapi.ofp_action_header_swigregister
ofp_action_header_swigregister(ofp_action_header)

class ofp_instruction_actions(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofp_instruction_actions, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofp_instruction_actions, name)
    __repr__ = _swig_repr
    __swig_setmethods__["type"] = _mul_nbapi.ofp_instruction_actions_type_set
    __swig_getmethods__["type"] = _mul_nbapi.ofp_instruction_actions_type_get
    if _newclass:type = _swig_property(_mul_nbapi.ofp_instruction_actions_type_get, _mul_nbapi.ofp_instruction_actions_type_set)
    __swig_setmethods__["len"] = _mul_nbapi.ofp_instruction_actions_len_set
    __swig_getmethods__["len"] = _mul_nbapi.ofp_instruction_actions_len_get
    if _newclass:len = _swig_property(_mul_nbapi.ofp_instruction_actions_len_get, _mul_nbapi.ofp_instruction_actions_len_set)
    __swig_setmethods__["pad"] = _mul_nbapi.ofp_instruction_actions_pad_set
    __swig_getmethods__["pad"] = _mul_nbapi.ofp_instruction_actions_pad_get
    if _newclass:pad = _swig_property(_mul_nbapi.ofp_instruction_actions_pad_get, _mul_nbapi.ofp_instruction_actions_pad_set)
    __swig_setmethods__["actions"] = _mul_nbapi.ofp_instruction_actions_actions_set
    __swig_getmethods__["actions"] = _mul_nbapi.ofp_instruction_actions_actions_get
    if _newclass:actions = _swig_property(_mul_nbapi.ofp_instruction_actions_actions_get, _mul_nbapi.ofp_instruction_actions_actions_set)
    def __init__(self): 
        this = _mul_nbapi.new_ofp_instruction_actions()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_ofp_instruction_actions
    __del__ = lambda self : None;
ofp_instruction_actions_swigregister = _mul_nbapi.ofp_instruction_actions_swigregister
ofp_instruction_actions_swigregister(ofp_instruction_actions)

class ofp_instruction_meter(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofp_instruction_meter, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofp_instruction_meter, name)
    __repr__ = _swig_repr
    __swig_setmethods__["type"] = _mul_nbapi.ofp_instruction_meter_type_set
    __swig_getmethods__["type"] = _mul_nbapi.ofp_instruction_meter_type_get
    if _newclass:type = _swig_property(_mul_nbapi.ofp_instruction_meter_type_get, _mul_nbapi.ofp_instruction_meter_type_set)
    __swig_setmethods__["len"] = _mul_nbapi.ofp_instruction_meter_len_set
    __swig_getmethods__["len"] = _mul_nbapi.ofp_instruction_meter_len_get
    if _newclass:len = _swig_property(_mul_nbapi.ofp_instruction_meter_len_get, _mul_nbapi.ofp_instruction_meter_len_set)
    __swig_setmethods__["meter_id"] = _mul_nbapi.ofp_instruction_meter_meter_id_set
    __swig_getmethods__["meter_id"] = _mul_nbapi.ofp_instruction_meter_meter_id_get
    if _newclass:meter_id = _swig_property(_mul_nbapi.ofp_instruction_meter_meter_id_get, _mul_nbapi.ofp_instruction_meter_meter_id_set)
    def __init__(self): 
        this = _mul_nbapi.new_ofp_instruction_meter()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_ofp_instruction_meter
    __del__ = lambda self : None;
ofp_instruction_meter_swigregister = _mul_nbapi.ofp_instruction_meter_swigregister
ofp_instruction_meter_swigregister(ofp_instruction_meter)

class ofp_instruction_experimenter(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofp_instruction_experimenter, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofp_instruction_experimenter, name)
    __repr__ = _swig_repr
    __swig_setmethods__["type"] = _mul_nbapi.ofp_instruction_experimenter_type_set
    __swig_getmethods__["type"] = _mul_nbapi.ofp_instruction_experimenter_type_get
    if _newclass:type = _swig_property(_mul_nbapi.ofp_instruction_experimenter_type_get, _mul_nbapi.ofp_instruction_experimenter_type_set)
    __swig_setmethods__["len"] = _mul_nbapi.ofp_instruction_experimenter_len_set
    __swig_getmethods__["len"] = _mul_nbapi.ofp_instruction_experimenter_len_get
    if _newclass:len = _swig_property(_mul_nbapi.ofp_instruction_experimenter_len_get, _mul_nbapi.ofp_instruction_experimenter_len_set)
    __swig_setmethods__["experimenter"] = _mul_nbapi.ofp_instruction_experimenter_experimenter_set
    __swig_getmethods__["experimenter"] = _mul_nbapi.ofp_instruction_experimenter_experimenter_get
    if _newclass:experimenter = _swig_property(_mul_nbapi.ofp_instruction_experimenter_experimenter_get, _mul_nbapi.ofp_instruction_experimenter_experimenter_set)
    def __init__(self): 
        this = _mul_nbapi.new_ofp_instruction_experimenter()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_ofp_instruction_experimenter
    __del__ = lambda self : None;
ofp_instruction_experimenter_swigregister = _mul_nbapi.ofp_instruction_experimenter_swigregister
ofp_instruction_experimenter_swigregister(ofp_instruction_experimenter)

OFPCML_MAX = _mul_nbapi.OFPCML_MAX
OFPCML_NO_BUFFER = _mul_nbapi.OFPCML_NO_BUFFER
class ofp_action_group(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofp_action_group, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofp_action_group, name)
    __repr__ = _swig_repr
    __swig_setmethods__["type"] = _mul_nbapi.ofp_action_group_type_set
    __swig_getmethods__["type"] = _mul_nbapi.ofp_action_group_type_get
    if _newclass:type = _swig_property(_mul_nbapi.ofp_action_group_type_get, _mul_nbapi.ofp_action_group_type_set)
    __swig_setmethods__["len"] = _mul_nbapi.ofp_action_group_len_set
    __swig_getmethods__["len"] = _mul_nbapi.ofp_action_group_len_get
    if _newclass:len = _swig_property(_mul_nbapi.ofp_action_group_len_get, _mul_nbapi.ofp_action_group_len_set)
    __swig_setmethods__["group_id"] = _mul_nbapi.ofp_action_group_group_id_set
    __swig_getmethods__["group_id"] = _mul_nbapi.ofp_action_group_group_id_get
    if _newclass:group_id = _swig_property(_mul_nbapi.ofp_action_group_group_id_get, _mul_nbapi.ofp_action_group_group_id_set)
    def __init__(self): 
        this = _mul_nbapi.new_ofp_action_group()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_ofp_action_group
    __del__ = lambda self : None;
ofp_action_group_swigregister = _mul_nbapi.ofp_action_group_swigregister
ofp_action_group_swigregister(ofp_action_group)

class ofp_action_mpls_ttl(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofp_action_mpls_ttl, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofp_action_mpls_ttl, name)
    __repr__ = _swig_repr
    __swig_setmethods__["type"] = _mul_nbapi.ofp_action_mpls_ttl_type_set
    __swig_getmethods__["type"] = _mul_nbapi.ofp_action_mpls_ttl_type_get
    if _newclass:type = _swig_property(_mul_nbapi.ofp_action_mpls_ttl_type_get, _mul_nbapi.ofp_action_mpls_ttl_type_set)
    __swig_setmethods__["len"] = _mul_nbapi.ofp_action_mpls_ttl_len_set
    __swig_getmethods__["len"] = _mul_nbapi.ofp_action_mpls_ttl_len_get
    if _newclass:len = _swig_property(_mul_nbapi.ofp_action_mpls_ttl_len_get, _mul_nbapi.ofp_action_mpls_ttl_len_set)
    __swig_setmethods__["mpls_ttl"] = _mul_nbapi.ofp_action_mpls_ttl_mpls_ttl_set
    __swig_getmethods__["mpls_ttl"] = _mul_nbapi.ofp_action_mpls_ttl_mpls_ttl_get
    if _newclass:mpls_ttl = _swig_property(_mul_nbapi.ofp_action_mpls_ttl_mpls_ttl_get, _mul_nbapi.ofp_action_mpls_ttl_mpls_ttl_set)
    __swig_setmethods__["pad"] = _mul_nbapi.ofp_action_mpls_ttl_pad_set
    __swig_getmethods__["pad"] = _mul_nbapi.ofp_action_mpls_ttl_pad_get
    if _newclass:pad = _swig_property(_mul_nbapi.ofp_action_mpls_ttl_pad_get, _mul_nbapi.ofp_action_mpls_ttl_pad_set)
    def __init__(self): 
        this = _mul_nbapi.new_ofp_action_mpls_ttl()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_ofp_action_mpls_ttl
    __del__ = lambda self : None;
ofp_action_mpls_ttl_swigregister = _mul_nbapi.ofp_action_mpls_ttl_swigregister
ofp_action_mpls_ttl_swigregister(ofp_action_mpls_ttl)

class ofp_action_nw_ttl(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofp_action_nw_ttl, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofp_action_nw_ttl, name)
    __repr__ = _swig_repr
    __swig_setmethods__["type"] = _mul_nbapi.ofp_action_nw_ttl_type_set
    __swig_getmethods__["type"] = _mul_nbapi.ofp_action_nw_ttl_type_get
    if _newclass:type = _swig_property(_mul_nbapi.ofp_action_nw_ttl_type_get, _mul_nbapi.ofp_action_nw_ttl_type_set)
    __swig_setmethods__["len"] = _mul_nbapi.ofp_action_nw_ttl_len_set
    __swig_getmethods__["len"] = _mul_nbapi.ofp_action_nw_ttl_len_get
    if _newclass:len = _swig_property(_mul_nbapi.ofp_action_nw_ttl_len_get, _mul_nbapi.ofp_action_nw_ttl_len_set)
    __swig_setmethods__["nw_ttl"] = _mul_nbapi.ofp_action_nw_ttl_nw_ttl_set
    __swig_getmethods__["nw_ttl"] = _mul_nbapi.ofp_action_nw_ttl_nw_ttl_get
    if _newclass:nw_ttl = _swig_property(_mul_nbapi.ofp_action_nw_ttl_nw_ttl_get, _mul_nbapi.ofp_action_nw_ttl_nw_ttl_set)
    __swig_setmethods__["pad"] = _mul_nbapi.ofp_action_nw_ttl_pad_set
    __swig_getmethods__["pad"] = _mul_nbapi.ofp_action_nw_ttl_pad_get
    if _newclass:pad = _swig_property(_mul_nbapi.ofp_action_nw_ttl_pad_get, _mul_nbapi.ofp_action_nw_ttl_pad_set)
    def __init__(self): 
        this = _mul_nbapi.new_ofp_action_nw_ttl()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_ofp_action_nw_ttl
    __del__ = lambda self : None;
ofp_action_nw_ttl_swigregister = _mul_nbapi.ofp_action_nw_ttl_swigregister
ofp_action_nw_ttl_swigregister(ofp_action_nw_ttl)

class ofp_action_push(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofp_action_push, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofp_action_push, name)
    __repr__ = _swig_repr
    __swig_setmethods__["type"] = _mul_nbapi.ofp_action_push_type_set
    __swig_getmethods__["type"] = _mul_nbapi.ofp_action_push_type_get
    if _newclass:type = _swig_property(_mul_nbapi.ofp_action_push_type_get, _mul_nbapi.ofp_action_push_type_set)
    __swig_setmethods__["len"] = _mul_nbapi.ofp_action_push_len_set
    __swig_getmethods__["len"] = _mul_nbapi.ofp_action_push_len_get
    if _newclass:len = _swig_property(_mul_nbapi.ofp_action_push_len_get, _mul_nbapi.ofp_action_push_len_set)
    __swig_setmethods__["ethertype"] = _mul_nbapi.ofp_action_push_ethertype_set
    __swig_getmethods__["ethertype"] = _mul_nbapi.ofp_action_push_ethertype_get
    if _newclass:ethertype = _swig_property(_mul_nbapi.ofp_action_push_ethertype_get, _mul_nbapi.ofp_action_push_ethertype_set)
    __swig_setmethods__["pad"] = _mul_nbapi.ofp_action_push_pad_set
    __swig_getmethods__["pad"] = _mul_nbapi.ofp_action_push_pad_get
    if _newclass:pad = _swig_property(_mul_nbapi.ofp_action_push_pad_get, _mul_nbapi.ofp_action_push_pad_set)
    def __init__(self): 
        this = _mul_nbapi.new_ofp_action_push()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_ofp_action_push
    __del__ = lambda self : None;
ofp_action_push_swigregister = _mul_nbapi.ofp_action_push_swigregister
ofp_action_push_swigregister(ofp_action_push)

class ofp_action_pop_mpls(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofp_action_pop_mpls, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofp_action_pop_mpls, name)
    __repr__ = _swig_repr
    __swig_setmethods__["type"] = _mul_nbapi.ofp_action_pop_mpls_type_set
    __swig_getmethods__["type"] = _mul_nbapi.ofp_action_pop_mpls_type_get
    if _newclass:type = _swig_property(_mul_nbapi.ofp_action_pop_mpls_type_get, _mul_nbapi.ofp_action_pop_mpls_type_set)
    __swig_setmethods__["len"] = _mul_nbapi.ofp_action_pop_mpls_len_set
    __swig_getmethods__["len"] = _mul_nbapi.ofp_action_pop_mpls_len_get
    if _newclass:len = _swig_property(_mul_nbapi.ofp_action_pop_mpls_len_get, _mul_nbapi.ofp_action_pop_mpls_len_set)
    __swig_setmethods__["ethertype"] = _mul_nbapi.ofp_action_pop_mpls_ethertype_set
    __swig_getmethods__["ethertype"] = _mul_nbapi.ofp_action_pop_mpls_ethertype_get
    if _newclass:ethertype = _swig_property(_mul_nbapi.ofp_action_pop_mpls_ethertype_get, _mul_nbapi.ofp_action_pop_mpls_ethertype_set)
    __swig_setmethods__["pad"] = _mul_nbapi.ofp_action_pop_mpls_pad_set
    __swig_getmethods__["pad"] = _mul_nbapi.ofp_action_pop_mpls_pad_get
    if _newclass:pad = _swig_property(_mul_nbapi.ofp_action_pop_mpls_pad_get, _mul_nbapi.ofp_action_pop_mpls_pad_set)
    def __init__(self): 
        this = _mul_nbapi.new_ofp_action_pop_mpls()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_ofp_action_pop_mpls
    __del__ = lambda self : None;
ofp_action_pop_mpls_swigregister = _mul_nbapi.ofp_action_pop_mpls_swigregister
ofp_action_pop_mpls_swigregister(ofp_action_pop_mpls)

OFP_ACT_SETF_HDR_SZ = _mul_nbapi.OFP_ACT_SETF_HDR_SZ
class ofp_action_set_field(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofp_action_set_field, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofp_action_set_field, name)
    __repr__ = _swig_repr
    __swig_setmethods__["type"] = _mul_nbapi.ofp_action_set_field_type_set
    __swig_getmethods__["type"] = _mul_nbapi.ofp_action_set_field_type_get
    if _newclass:type = _swig_property(_mul_nbapi.ofp_action_set_field_type_get, _mul_nbapi.ofp_action_set_field_type_set)
    __swig_setmethods__["len"] = _mul_nbapi.ofp_action_set_field_len_set
    __swig_getmethods__["len"] = _mul_nbapi.ofp_action_set_field_len_get
    if _newclass:len = _swig_property(_mul_nbapi.ofp_action_set_field_len_get, _mul_nbapi.ofp_action_set_field_len_set)
    __swig_setmethods__["field"] = _mul_nbapi.ofp_action_set_field_field_set
    __swig_getmethods__["field"] = _mul_nbapi.ofp_action_set_field_field_get
    if _newclass:field = _swig_property(_mul_nbapi.ofp_action_set_field_field_get, _mul_nbapi.ofp_action_set_field_field_set)
    def __init__(self): 
        this = _mul_nbapi.new_ofp_action_set_field()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_ofp_action_set_field
    __del__ = lambda self : None;
ofp_action_set_field_swigregister = _mul_nbapi.ofp_action_set_field_swigregister
ofp_action_set_field_swigregister(ofp_action_set_field)

class ofp_action_experimenter_header(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofp_action_experimenter_header, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofp_action_experimenter_header, name)
    __repr__ = _swig_repr
    __swig_setmethods__["type"] = _mul_nbapi.ofp_action_experimenter_header_type_set
    __swig_getmethods__["type"] = _mul_nbapi.ofp_action_experimenter_header_type_get
    if _newclass:type = _swig_property(_mul_nbapi.ofp_action_experimenter_header_type_get, _mul_nbapi.ofp_action_experimenter_header_type_set)
    __swig_setmethods__["len"] = _mul_nbapi.ofp_action_experimenter_header_len_set
    __swig_getmethods__["len"] = _mul_nbapi.ofp_action_experimenter_header_len_get
    if _newclass:len = _swig_property(_mul_nbapi.ofp_action_experimenter_header_len_get, _mul_nbapi.ofp_action_experimenter_header_len_set)
    __swig_setmethods__["experimenter"] = _mul_nbapi.ofp_action_experimenter_header_experimenter_set
    __swig_getmethods__["experimenter"] = _mul_nbapi.ofp_action_experimenter_header_experimenter_get
    if _newclass:experimenter = _swig_property(_mul_nbapi.ofp_action_experimenter_header_experimenter_get, _mul_nbapi.ofp_action_experimenter_header_experimenter_set)
    def __init__(self): 
        this = _mul_nbapi.new_ofp_action_experimenter_header()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_ofp_action_experimenter_header
    __del__ = lambda self : None;
ofp_action_experimenter_header_swigregister = _mul_nbapi.ofp_action_experimenter_header_swigregister
ofp_action_experimenter_header_swigregister(ofp_action_experimenter_header)

class ofp_switch_config(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofp_switch_config, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofp_switch_config, name)
    __repr__ = _swig_repr
    __swig_setmethods__["header"] = _mul_nbapi.ofp_switch_config_header_set
    __swig_getmethods__["header"] = _mul_nbapi.ofp_switch_config_header_get
    if _newclass:header = _swig_property(_mul_nbapi.ofp_switch_config_header_get, _mul_nbapi.ofp_switch_config_header_set)
    __swig_setmethods__["flags"] = _mul_nbapi.ofp_switch_config_flags_set
    __swig_getmethods__["flags"] = _mul_nbapi.ofp_switch_config_flags_get
    if _newclass:flags = _swig_property(_mul_nbapi.ofp_switch_config_flags_get, _mul_nbapi.ofp_switch_config_flags_set)
    __swig_setmethods__["miss_send_len"] = _mul_nbapi.ofp_switch_config_miss_send_len_set
    __swig_getmethods__["miss_send_len"] = _mul_nbapi.ofp_switch_config_miss_send_len_get
    if _newclass:miss_send_len = _swig_property(_mul_nbapi.ofp_switch_config_miss_send_len_get, _mul_nbapi.ofp_switch_config_miss_send_len_set)
    def __init__(self): 
        this = _mul_nbapi.new_ofp_switch_config()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_ofp_switch_config
    __del__ = lambda self : None;
ofp_switch_config_swigregister = _mul_nbapi.ofp_switch_config_swigregister
ofp_switch_config_swigregister(ofp_switch_config)

OFP_DEFAULT_MISS_SEND_LEN = _mul_nbapi.OFP_DEFAULT_MISS_SEND_LEN
OFPC_FRAG_NORMAL = _mul_nbapi.OFPC_FRAG_NORMAL
OFPC_FRAG_DROP = _mul_nbapi.OFPC_FRAG_DROP
OFPC_FRAG_REASM = _mul_nbapi.OFPC_FRAG_REASM
OFPC_FRAG_MASK = _mul_nbapi.OFPC_FRAG_MASK
OFPTT_MAX = _mul_nbapi.OFPTT_MAX
OFPTT_ALL = _mul_nbapi.OFPTT_ALL
class ofp_table_mod(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofp_table_mod, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofp_table_mod, name)
    __repr__ = _swig_repr
    __swig_setmethods__["header"] = _mul_nbapi.ofp_table_mod_header_set
    __swig_getmethods__["header"] = _mul_nbapi.ofp_table_mod_header_get
    if _newclass:header = _swig_property(_mul_nbapi.ofp_table_mod_header_get, _mul_nbapi.ofp_table_mod_header_set)
    __swig_setmethods__["table_id"] = _mul_nbapi.ofp_table_mod_table_id_set
    __swig_getmethods__["table_id"] = _mul_nbapi.ofp_table_mod_table_id_get
    if _newclass:table_id = _swig_property(_mul_nbapi.ofp_table_mod_table_id_get, _mul_nbapi.ofp_table_mod_table_id_set)
    __swig_setmethods__["pad"] = _mul_nbapi.ofp_table_mod_pad_set
    __swig_getmethods__["pad"] = _mul_nbapi.ofp_table_mod_pad_get
    if _newclass:pad = _swig_property(_mul_nbapi.ofp_table_mod_pad_get, _mul_nbapi.ofp_table_mod_pad_set)
    __swig_setmethods__["config"] = _mul_nbapi.ofp_table_mod_config_set
    __swig_getmethods__["config"] = _mul_nbapi.ofp_table_mod_config_get
    if _newclass:config = _swig_property(_mul_nbapi.ofp_table_mod_config_get, _mul_nbapi.ofp_table_mod_config_set)
    def __init__(self): 
        this = _mul_nbapi.new_ofp_table_mod()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_ofp_table_mod
    __del__ = lambda self : None;
ofp_table_mod_swigregister = _mul_nbapi.ofp_table_mod_swigregister
ofp_table_mod_swigregister(ofp_table_mod)

OFPTC_DEPRECATED_MASK = _mul_nbapi.OFPTC_DEPRECATED_MASK
OFPX_MATCH_HDR_SZ = _mul_nbapi.OFPX_MATCH_HDR_SZ
class ofpx_match(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofpx_match, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofpx_match, name)
    __repr__ = _swig_repr
    __swig_setmethods__["type"] = _mul_nbapi.ofpx_match_type_set
    __swig_getmethods__["type"] = _mul_nbapi.ofpx_match_type_get
    if _newclass:type = _swig_property(_mul_nbapi.ofpx_match_type_get, _mul_nbapi.ofpx_match_type_set)
    __swig_setmethods__["length"] = _mul_nbapi.ofpx_match_length_set
    __swig_getmethods__["length"] = _mul_nbapi.ofpx_match_length_get
    if _newclass:length = _swig_property(_mul_nbapi.ofpx_match_length_get, _mul_nbapi.ofpx_match_length_set)
    __swig_setmethods__["oxm_fields"] = _mul_nbapi.ofpx_match_oxm_fields_set
    __swig_getmethods__["oxm_fields"] = _mul_nbapi.ofpx_match_oxm_fields_get
    if _newclass:oxm_fields = _swig_property(_mul_nbapi.ofpx_match_oxm_fields_get, _mul_nbapi.ofpx_match_oxm_fields_set)
    def __init__(self): 
        this = _mul_nbapi.new_ofpx_match()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_ofpx_match
    __del__ = lambda self : None;
ofpx_match_swigregister = _mul_nbapi.ofpx_match_swigregister
ofpx_match_swigregister(ofpx_match)

OFPFC_ADD = _mul_nbapi.OFPFC_ADD
OFPFC_MODIFY = _mul_nbapi.OFPFC_MODIFY
OFPFC_MODIFY_STRICT = _mul_nbapi.OFPFC_MODIFY_STRICT
OFPFC_DELETE = _mul_nbapi.OFPFC_DELETE
OFPFC_DELETE_STRICT = _mul_nbapi.OFPFC_DELETE_STRICT
class ofp_bucket(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofp_bucket, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofp_bucket, name)
    __repr__ = _swig_repr
    __swig_setmethods__["len"] = _mul_nbapi.ofp_bucket_len_set
    __swig_getmethods__["len"] = _mul_nbapi.ofp_bucket_len_get
    if _newclass:len = _swig_property(_mul_nbapi.ofp_bucket_len_get, _mul_nbapi.ofp_bucket_len_set)
    __swig_setmethods__["weight"] = _mul_nbapi.ofp_bucket_weight_set
    __swig_getmethods__["weight"] = _mul_nbapi.ofp_bucket_weight_get
    if _newclass:weight = _swig_property(_mul_nbapi.ofp_bucket_weight_get, _mul_nbapi.ofp_bucket_weight_set)
    __swig_setmethods__["watch_port"] = _mul_nbapi.ofp_bucket_watch_port_set
    __swig_getmethods__["watch_port"] = _mul_nbapi.ofp_bucket_watch_port_get
    if _newclass:watch_port = _swig_property(_mul_nbapi.ofp_bucket_watch_port_get, _mul_nbapi.ofp_bucket_watch_port_set)
    __swig_setmethods__["watch_group"] = _mul_nbapi.ofp_bucket_watch_group_set
    __swig_getmethods__["watch_group"] = _mul_nbapi.ofp_bucket_watch_group_get
    if _newclass:watch_group = _swig_property(_mul_nbapi.ofp_bucket_watch_group_get, _mul_nbapi.ofp_bucket_watch_group_set)
    __swig_setmethods__["pad"] = _mul_nbapi.ofp_bucket_pad_set
    __swig_getmethods__["pad"] = _mul_nbapi.ofp_bucket_pad_get
    if _newclass:pad = _swig_property(_mul_nbapi.ofp_bucket_pad_get, _mul_nbapi.ofp_bucket_pad_set)
    __swig_setmethods__["actions"] = _mul_nbapi.ofp_bucket_actions_set
    __swig_getmethods__["actions"] = _mul_nbapi.ofp_bucket_actions_get
    if _newclass:actions = _swig_property(_mul_nbapi.ofp_bucket_actions_get, _mul_nbapi.ofp_bucket_actions_set)
    def __init__(self): 
        this = _mul_nbapi.new_ofp_bucket()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_ofp_bucket
    __del__ = lambda self : None;
ofp_bucket_swigregister = _mul_nbapi.ofp_bucket_swigregister
ofp_bucket_swigregister(ofp_bucket)

class ofp_group_mod(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofp_group_mod, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofp_group_mod, name)
    __repr__ = _swig_repr
    __swig_setmethods__["header"] = _mul_nbapi.ofp_group_mod_header_set
    __swig_getmethods__["header"] = _mul_nbapi.ofp_group_mod_header_get
    if _newclass:header = _swig_property(_mul_nbapi.ofp_group_mod_header_get, _mul_nbapi.ofp_group_mod_header_set)
    __swig_setmethods__["command"] = _mul_nbapi.ofp_group_mod_command_set
    __swig_getmethods__["command"] = _mul_nbapi.ofp_group_mod_command_get
    if _newclass:command = _swig_property(_mul_nbapi.ofp_group_mod_command_get, _mul_nbapi.ofp_group_mod_command_set)
    __swig_setmethods__["type"] = _mul_nbapi.ofp_group_mod_type_set
    __swig_getmethods__["type"] = _mul_nbapi.ofp_group_mod_type_get
    if _newclass:type = _swig_property(_mul_nbapi.ofp_group_mod_type_get, _mul_nbapi.ofp_group_mod_type_set)
    __swig_setmethods__["pad"] = _mul_nbapi.ofp_group_mod_pad_set
    __swig_getmethods__["pad"] = _mul_nbapi.ofp_group_mod_pad_get
    if _newclass:pad = _swig_property(_mul_nbapi.ofp_group_mod_pad_get, _mul_nbapi.ofp_group_mod_pad_set)
    __swig_setmethods__["group_id"] = _mul_nbapi.ofp_group_mod_group_id_set
    __swig_getmethods__["group_id"] = _mul_nbapi.ofp_group_mod_group_id_get
    if _newclass:group_id = _swig_property(_mul_nbapi.ofp_group_mod_group_id_get, _mul_nbapi.ofp_group_mod_group_id_set)
    __swig_setmethods__["buckets"] = _mul_nbapi.ofp_group_mod_buckets_set
    __swig_getmethods__["buckets"] = _mul_nbapi.ofp_group_mod_buckets_get
    if _newclass:buckets = _swig_property(_mul_nbapi.ofp_group_mod_buckets_get, _mul_nbapi.ofp_group_mod_buckets_set)
    def __init__(self): 
        this = _mul_nbapi.new_ofp_group_mod()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_ofp_group_mod
    __del__ = lambda self : None;
ofp_group_mod_swigregister = _mul_nbapi.ofp_group_mod_swigregister
ofp_group_mod_swigregister(ofp_group_mod)

OFPGC_ADD = _mul_nbapi.OFPGC_ADD
OFPGC_MODIFY = _mul_nbapi.OFPGC_MODIFY
OFPGC_DELETE = _mul_nbapi.OFPGC_DELETE
OFPGT_ALL = _mul_nbapi.OFPGT_ALL
OFPGT_SELECT = _mul_nbapi.OFPGT_SELECT
OFPGT_INDIRECT = _mul_nbapi.OFPGT_INDIRECT
OFPGT_FF = _mul_nbapi.OFPGT_FF
OFPG_MAX = _mul_nbapi.OFPG_MAX
OFPG_ALL = _mul_nbapi.OFPG_ALL
OFPG_ANY = _mul_nbapi.OFPG_ANY
class ofp_meter_band_header(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofp_meter_band_header, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofp_meter_band_header, name)
    __repr__ = _swig_repr
    __swig_setmethods__["type"] = _mul_nbapi.ofp_meter_band_header_type_set
    __swig_getmethods__["type"] = _mul_nbapi.ofp_meter_band_header_type_get
    if _newclass:type = _swig_property(_mul_nbapi.ofp_meter_band_header_type_get, _mul_nbapi.ofp_meter_band_header_type_set)
    __swig_setmethods__["len"] = _mul_nbapi.ofp_meter_band_header_len_set
    __swig_getmethods__["len"] = _mul_nbapi.ofp_meter_band_header_len_get
    if _newclass:len = _swig_property(_mul_nbapi.ofp_meter_band_header_len_get, _mul_nbapi.ofp_meter_band_header_len_set)
    __swig_setmethods__["rate"] = _mul_nbapi.ofp_meter_band_header_rate_set
    __swig_getmethods__["rate"] = _mul_nbapi.ofp_meter_band_header_rate_get
    if _newclass:rate = _swig_property(_mul_nbapi.ofp_meter_band_header_rate_get, _mul_nbapi.ofp_meter_band_header_rate_set)
    __swig_setmethods__["burst_size"] = _mul_nbapi.ofp_meter_band_header_burst_size_set
    __swig_getmethods__["burst_size"] = _mul_nbapi.ofp_meter_band_header_burst_size_get
    if _newclass:burst_size = _swig_property(_mul_nbapi.ofp_meter_band_header_burst_size_get, _mul_nbapi.ofp_meter_band_header_burst_size_set)
    def __init__(self): 
        this = _mul_nbapi.new_ofp_meter_band_header()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_ofp_meter_band_header
    __del__ = lambda self : None;
ofp_meter_band_header_swigregister = _mul_nbapi.ofp_meter_band_header_swigregister
ofp_meter_band_header_swigregister(ofp_meter_band_header)

class ofp_meter_mod(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofp_meter_mod, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofp_meter_mod, name)
    __repr__ = _swig_repr
    __swig_setmethods__["header"] = _mul_nbapi.ofp_meter_mod_header_set
    __swig_getmethods__["header"] = _mul_nbapi.ofp_meter_mod_header_get
    if _newclass:header = _swig_property(_mul_nbapi.ofp_meter_mod_header_get, _mul_nbapi.ofp_meter_mod_header_set)
    __swig_setmethods__["command"] = _mul_nbapi.ofp_meter_mod_command_set
    __swig_getmethods__["command"] = _mul_nbapi.ofp_meter_mod_command_get
    if _newclass:command = _swig_property(_mul_nbapi.ofp_meter_mod_command_get, _mul_nbapi.ofp_meter_mod_command_set)
    __swig_setmethods__["flags"] = _mul_nbapi.ofp_meter_mod_flags_set
    __swig_getmethods__["flags"] = _mul_nbapi.ofp_meter_mod_flags_get
    if _newclass:flags = _swig_property(_mul_nbapi.ofp_meter_mod_flags_get, _mul_nbapi.ofp_meter_mod_flags_set)
    __swig_setmethods__["meter_id"] = _mul_nbapi.ofp_meter_mod_meter_id_set
    __swig_getmethods__["meter_id"] = _mul_nbapi.ofp_meter_mod_meter_id_get
    if _newclass:meter_id = _swig_property(_mul_nbapi.ofp_meter_mod_meter_id_get, _mul_nbapi.ofp_meter_mod_meter_id_set)
    __swig_setmethods__["bands"] = _mul_nbapi.ofp_meter_mod_bands_set
    __swig_getmethods__["bands"] = _mul_nbapi.ofp_meter_mod_bands_get
    if _newclass:bands = _swig_property(_mul_nbapi.ofp_meter_mod_bands_get, _mul_nbapi.ofp_meter_mod_bands_set)
    def __init__(self): 
        this = _mul_nbapi.new_ofp_meter_mod()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_ofp_meter_mod
    __del__ = lambda self : None;
ofp_meter_mod_swigregister = _mul_nbapi.ofp_meter_mod_swigregister
ofp_meter_mod_swigregister(ofp_meter_mod)

OFPM_MAX = _mul_nbapi.OFPM_MAX
OFPM_SLOWPATH = _mul_nbapi.OFPM_SLOWPATH
OFPM_CONTROLLER = _mul_nbapi.OFPM_CONTROLLER
OFPM_ALL = _mul_nbapi.OFPM_ALL
OFPMC_ADD = _mul_nbapi.OFPMC_ADD
OFPMC_MODIFY = _mul_nbapi.OFPMC_MODIFY
OFPMC_DELETE = _mul_nbapi.OFPMC_DELETE
OFPMF_KBPS = _mul_nbapi.OFPMF_KBPS
OFPMF_PKTPS = _mul_nbapi.OFPMF_PKTPS
OFPMF_BURST = _mul_nbapi.OFPMF_BURST
OFPMF_STATS = _mul_nbapi.OFPMF_STATS
OFPMBT_DROP = _mul_nbapi.OFPMBT_DROP
OFPMBT_DSCP_REMARK = _mul_nbapi.OFPMBT_DSCP_REMARK
OFPMBT_EXPERIMENTER = _mul_nbapi.OFPMBT_EXPERIMENTER
class ofp_meter_band_drop(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofp_meter_band_drop, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofp_meter_band_drop, name)
    __repr__ = _swig_repr
    __swig_setmethods__["type"] = _mul_nbapi.ofp_meter_band_drop_type_set
    __swig_getmethods__["type"] = _mul_nbapi.ofp_meter_band_drop_type_get
    if _newclass:type = _swig_property(_mul_nbapi.ofp_meter_band_drop_type_get, _mul_nbapi.ofp_meter_band_drop_type_set)
    __swig_setmethods__["len"] = _mul_nbapi.ofp_meter_band_drop_len_set
    __swig_getmethods__["len"] = _mul_nbapi.ofp_meter_band_drop_len_get
    if _newclass:len = _swig_property(_mul_nbapi.ofp_meter_band_drop_len_get, _mul_nbapi.ofp_meter_band_drop_len_set)
    __swig_setmethods__["rate"] = _mul_nbapi.ofp_meter_band_drop_rate_set
    __swig_getmethods__["rate"] = _mul_nbapi.ofp_meter_band_drop_rate_get
    if _newclass:rate = _swig_property(_mul_nbapi.ofp_meter_band_drop_rate_get, _mul_nbapi.ofp_meter_band_drop_rate_set)
    __swig_setmethods__["burst_size"] = _mul_nbapi.ofp_meter_band_drop_burst_size_set
    __swig_getmethods__["burst_size"] = _mul_nbapi.ofp_meter_band_drop_burst_size_get
    if _newclass:burst_size = _swig_property(_mul_nbapi.ofp_meter_band_drop_burst_size_get, _mul_nbapi.ofp_meter_band_drop_burst_size_set)
    __swig_setmethods__["pad"] = _mul_nbapi.ofp_meter_band_drop_pad_set
    __swig_getmethods__["pad"] = _mul_nbapi.ofp_meter_band_drop_pad_get
    if _newclass:pad = _swig_property(_mul_nbapi.ofp_meter_band_drop_pad_get, _mul_nbapi.ofp_meter_band_drop_pad_set)
    def __init__(self): 
        this = _mul_nbapi.new_ofp_meter_band_drop()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_ofp_meter_band_drop
    __del__ = lambda self : None;
ofp_meter_band_drop_swigregister = _mul_nbapi.ofp_meter_band_drop_swigregister
ofp_meter_band_drop_swigregister(ofp_meter_band_drop)

class ofp_meter_band_dscp_remark(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofp_meter_band_dscp_remark, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofp_meter_band_dscp_remark, name)
    __repr__ = _swig_repr
    __swig_setmethods__["type"] = _mul_nbapi.ofp_meter_band_dscp_remark_type_set
    __swig_getmethods__["type"] = _mul_nbapi.ofp_meter_band_dscp_remark_type_get
    if _newclass:type = _swig_property(_mul_nbapi.ofp_meter_band_dscp_remark_type_get, _mul_nbapi.ofp_meter_band_dscp_remark_type_set)
    __swig_setmethods__["len"] = _mul_nbapi.ofp_meter_band_dscp_remark_len_set
    __swig_getmethods__["len"] = _mul_nbapi.ofp_meter_band_dscp_remark_len_get
    if _newclass:len = _swig_property(_mul_nbapi.ofp_meter_band_dscp_remark_len_get, _mul_nbapi.ofp_meter_band_dscp_remark_len_set)
    __swig_setmethods__["rate"] = _mul_nbapi.ofp_meter_band_dscp_remark_rate_set
    __swig_getmethods__["rate"] = _mul_nbapi.ofp_meter_band_dscp_remark_rate_get
    if _newclass:rate = _swig_property(_mul_nbapi.ofp_meter_band_dscp_remark_rate_get, _mul_nbapi.ofp_meter_band_dscp_remark_rate_set)
    __swig_setmethods__["burst_size"] = _mul_nbapi.ofp_meter_band_dscp_remark_burst_size_set
    __swig_getmethods__["burst_size"] = _mul_nbapi.ofp_meter_band_dscp_remark_burst_size_get
    if _newclass:burst_size = _swig_property(_mul_nbapi.ofp_meter_band_dscp_remark_burst_size_get, _mul_nbapi.ofp_meter_band_dscp_remark_burst_size_set)
    __swig_setmethods__["prec_level"] = _mul_nbapi.ofp_meter_band_dscp_remark_prec_level_set
    __swig_getmethods__["prec_level"] = _mul_nbapi.ofp_meter_band_dscp_remark_prec_level_get
    if _newclass:prec_level = _swig_property(_mul_nbapi.ofp_meter_band_dscp_remark_prec_level_get, _mul_nbapi.ofp_meter_band_dscp_remark_prec_level_set)
    __swig_setmethods__["pad"] = _mul_nbapi.ofp_meter_band_dscp_remark_pad_set
    __swig_getmethods__["pad"] = _mul_nbapi.ofp_meter_band_dscp_remark_pad_get
    if _newclass:pad = _swig_property(_mul_nbapi.ofp_meter_band_dscp_remark_pad_get, _mul_nbapi.ofp_meter_band_dscp_remark_pad_set)
    def __init__(self): 
        this = _mul_nbapi.new_ofp_meter_band_dscp_remark()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_ofp_meter_band_dscp_remark
    __del__ = lambda self : None;
ofp_meter_band_dscp_remark_swigregister = _mul_nbapi.ofp_meter_band_dscp_remark_swigregister
ofp_meter_band_dscp_remark_swigregister(ofp_meter_band_dscp_remark)

class ofp_meter_band_experimenter(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofp_meter_band_experimenter, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofp_meter_band_experimenter, name)
    __repr__ = _swig_repr
    __swig_setmethods__["type"] = _mul_nbapi.ofp_meter_band_experimenter_type_set
    __swig_getmethods__["type"] = _mul_nbapi.ofp_meter_band_experimenter_type_get
    if _newclass:type = _swig_property(_mul_nbapi.ofp_meter_band_experimenter_type_get, _mul_nbapi.ofp_meter_band_experimenter_type_set)
    __swig_setmethods__["len"] = _mul_nbapi.ofp_meter_band_experimenter_len_set
    __swig_getmethods__["len"] = _mul_nbapi.ofp_meter_band_experimenter_len_get
    if _newclass:len = _swig_property(_mul_nbapi.ofp_meter_band_experimenter_len_get, _mul_nbapi.ofp_meter_band_experimenter_len_set)
    __swig_setmethods__["rate"] = _mul_nbapi.ofp_meter_band_experimenter_rate_set
    __swig_getmethods__["rate"] = _mul_nbapi.ofp_meter_band_experimenter_rate_get
    if _newclass:rate = _swig_property(_mul_nbapi.ofp_meter_band_experimenter_rate_get, _mul_nbapi.ofp_meter_band_experimenter_rate_set)
    __swig_setmethods__["burst_size"] = _mul_nbapi.ofp_meter_band_experimenter_burst_size_set
    __swig_getmethods__["burst_size"] = _mul_nbapi.ofp_meter_band_experimenter_burst_size_get
    if _newclass:burst_size = _swig_property(_mul_nbapi.ofp_meter_band_experimenter_burst_size_get, _mul_nbapi.ofp_meter_band_experimenter_burst_size_set)
    __swig_setmethods__["experimenter"] = _mul_nbapi.ofp_meter_band_experimenter_experimenter_set
    __swig_getmethods__["experimenter"] = _mul_nbapi.ofp_meter_band_experimenter_experimenter_get
    if _newclass:experimenter = _swig_property(_mul_nbapi.ofp_meter_band_experimenter_experimenter_get, _mul_nbapi.ofp_meter_band_experimenter_experimenter_set)
    def __init__(self): 
        this = _mul_nbapi.new_ofp_meter_band_experimenter()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_ofp_meter_band_experimenter
    __del__ = lambda self : None;
ofp_meter_band_experimenter_swigregister = _mul_nbapi.ofp_meter_band_experimenter_swigregister
ofp_meter_band_experimenter_swigregister(ofp_meter_band_experimenter)

class ofp_multipart_request(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofp_multipart_request, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofp_multipart_request, name)
    __repr__ = _swig_repr
    __swig_setmethods__["header"] = _mul_nbapi.ofp_multipart_request_header_set
    __swig_getmethods__["header"] = _mul_nbapi.ofp_multipart_request_header_get
    if _newclass:header = _swig_property(_mul_nbapi.ofp_multipart_request_header_get, _mul_nbapi.ofp_multipart_request_header_set)
    __swig_setmethods__["type"] = _mul_nbapi.ofp_multipart_request_type_set
    __swig_getmethods__["type"] = _mul_nbapi.ofp_multipart_request_type_get
    if _newclass:type = _swig_property(_mul_nbapi.ofp_multipart_request_type_get, _mul_nbapi.ofp_multipart_request_type_set)
    __swig_setmethods__["flags"] = _mul_nbapi.ofp_multipart_request_flags_set
    __swig_getmethods__["flags"] = _mul_nbapi.ofp_multipart_request_flags_get
    if _newclass:flags = _swig_property(_mul_nbapi.ofp_multipart_request_flags_get, _mul_nbapi.ofp_multipart_request_flags_set)
    __swig_setmethods__["pad"] = _mul_nbapi.ofp_multipart_request_pad_set
    __swig_getmethods__["pad"] = _mul_nbapi.ofp_multipart_request_pad_get
    if _newclass:pad = _swig_property(_mul_nbapi.ofp_multipart_request_pad_get, _mul_nbapi.ofp_multipart_request_pad_set)
    __swig_setmethods__["body"] = _mul_nbapi.ofp_multipart_request_body_set
    __swig_getmethods__["body"] = _mul_nbapi.ofp_multipart_request_body_get
    if _newclass:body = _swig_property(_mul_nbapi.ofp_multipart_request_body_get, _mul_nbapi.ofp_multipart_request_body_set)
    def __init__(self): 
        this = _mul_nbapi.new_ofp_multipart_request()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_ofp_multipart_request
    __del__ = lambda self : None;
ofp_multipart_request_swigregister = _mul_nbapi.ofp_multipart_request_swigregister
ofp_multipart_request_swigregister(ofp_multipart_request)

OFPMPF_REQ_MORE = _mul_nbapi.OFPMPF_REQ_MORE
class ofp_multipart_reply(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofp_multipart_reply, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofp_multipart_reply, name)
    __repr__ = _swig_repr
    __swig_setmethods__["header"] = _mul_nbapi.ofp_multipart_reply_header_set
    __swig_getmethods__["header"] = _mul_nbapi.ofp_multipart_reply_header_get
    if _newclass:header = _swig_property(_mul_nbapi.ofp_multipart_reply_header_get, _mul_nbapi.ofp_multipart_reply_header_set)
    __swig_setmethods__["type"] = _mul_nbapi.ofp_multipart_reply_type_set
    __swig_getmethods__["type"] = _mul_nbapi.ofp_multipart_reply_type_get
    if _newclass:type = _swig_property(_mul_nbapi.ofp_multipart_reply_type_get, _mul_nbapi.ofp_multipart_reply_type_set)
    __swig_setmethods__["flags"] = _mul_nbapi.ofp_multipart_reply_flags_set
    __swig_getmethods__["flags"] = _mul_nbapi.ofp_multipart_reply_flags_get
    if _newclass:flags = _swig_property(_mul_nbapi.ofp_multipart_reply_flags_get, _mul_nbapi.ofp_multipart_reply_flags_set)
    __swig_setmethods__["pad"] = _mul_nbapi.ofp_multipart_reply_pad_set
    __swig_getmethods__["pad"] = _mul_nbapi.ofp_multipart_reply_pad_get
    if _newclass:pad = _swig_property(_mul_nbapi.ofp_multipart_reply_pad_get, _mul_nbapi.ofp_multipart_reply_pad_set)
    __swig_setmethods__["body"] = _mul_nbapi.ofp_multipart_reply_body_set
    __swig_getmethods__["body"] = _mul_nbapi.ofp_multipart_reply_body_get
    if _newclass:body = _swig_property(_mul_nbapi.ofp_multipart_reply_body_get, _mul_nbapi.ofp_multipart_reply_body_set)
    def __init__(self): 
        this = _mul_nbapi.new_ofp_multipart_reply()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_ofp_multipart_reply
    __del__ = lambda self : None;
ofp_multipart_reply_swigregister = _mul_nbapi.ofp_multipart_reply_swigregister
ofp_multipart_reply_swigregister(ofp_multipart_reply)

OFPMPF_REPLY_MORE = _mul_nbapi.OFPMPF_REPLY_MORE
OFPMP_DESC = _mul_nbapi.OFPMP_DESC
OFPMP_FLOW = _mul_nbapi.OFPMP_FLOW
OFPMP_AGGREGATE = _mul_nbapi.OFPMP_AGGREGATE
OFPMP_TABLE = _mul_nbapi.OFPMP_TABLE
OFPMP_PORT_STATS = _mul_nbapi.OFPMP_PORT_STATS
OFPMP_QUEUE = _mul_nbapi.OFPMP_QUEUE
OFPMP_GROUP = _mul_nbapi.OFPMP_GROUP
OFPMP_GROUP_DESC = _mul_nbapi.OFPMP_GROUP_DESC
OFPMP_GROUP_FEATURES = _mul_nbapi.OFPMP_GROUP_FEATURES
OFPMP_METER = _mul_nbapi.OFPMP_METER
OFPMP_METER_CONFIG = _mul_nbapi.OFPMP_METER_CONFIG
OFPMP_METER_FEATURES = _mul_nbapi.OFPMP_METER_FEATURES
OFPMP_TABLE_FEATURES = _mul_nbapi.OFPMP_TABLE_FEATURES
OFPMP_PORT_DESC = _mul_nbapi.OFPMP_PORT_DESC
OFPMP_EXPERIMENTER = _mul_nbapi.OFPMP_EXPERIMENTER
DESC_STR_LEN = _mul_nbapi.DESC_STR_LEN
SERIAL_NUM_LEN = _mul_nbapi.SERIAL_NUM_LEN
class ofp_desc_stats(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofp_desc_stats, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofp_desc_stats, name)
    __repr__ = _swig_repr
    __swig_setmethods__["mfr_desc"] = _mul_nbapi.ofp_desc_stats_mfr_desc_set
    __swig_getmethods__["mfr_desc"] = _mul_nbapi.ofp_desc_stats_mfr_desc_get
    if _newclass:mfr_desc = _swig_property(_mul_nbapi.ofp_desc_stats_mfr_desc_get, _mul_nbapi.ofp_desc_stats_mfr_desc_set)
    __swig_setmethods__["hw_desc"] = _mul_nbapi.ofp_desc_stats_hw_desc_set
    __swig_getmethods__["hw_desc"] = _mul_nbapi.ofp_desc_stats_hw_desc_get
    if _newclass:hw_desc = _swig_property(_mul_nbapi.ofp_desc_stats_hw_desc_get, _mul_nbapi.ofp_desc_stats_hw_desc_set)
    __swig_setmethods__["sw_desc"] = _mul_nbapi.ofp_desc_stats_sw_desc_set
    __swig_getmethods__["sw_desc"] = _mul_nbapi.ofp_desc_stats_sw_desc_get
    if _newclass:sw_desc = _swig_property(_mul_nbapi.ofp_desc_stats_sw_desc_get, _mul_nbapi.ofp_desc_stats_sw_desc_set)
    __swig_setmethods__["serial_num"] = _mul_nbapi.ofp_desc_stats_serial_num_set
    __swig_getmethods__["serial_num"] = _mul_nbapi.ofp_desc_stats_serial_num_get
    if _newclass:serial_num = _swig_property(_mul_nbapi.ofp_desc_stats_serial_num_get, _mul_nbapi.ofp_desc_stats_serial_num_set)
    __swig_setmethods__["dp_desc"] = _mul_nbapi.ofp_desc_stats_dp_desc_set
    __swig_getmethods__["dp_desc"] = _mul_nbapi.ofp_desc_stats_dp_desc_get
    if _newclass:dp_desc = _swig_property(_mul_nbapi.ofp_desc_stats_dp_desc_get, _mul_nbapi.ofp_desc_stats_dp_desc_set)
    def __init__(self): 
        this = _mul_nbapi.new_ofp_desc_stats()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_ofp_desc_stats
    __del__ = lambda self : None;
ofp_desc_stats_swigregister = _mul_nbapi.ofp_desc_stats_swigregister
ofp_desc_stats_swigregister(ofp_desc_stats)

OFP_MAX_TABLE_PROPS = _mul_nbapi.OFP_MAX_TABLE_PROPS
class ofp_table_feature_prop_header(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofp_table_feature_prop_header, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofp_table_feature_prop_header, name)
    __repr__ = _swig_repr
    __swig_setmethods__["type"] = _mul_nbapi.ofp_table_feature_prop_header_type_set
    __swig_getmethods__["type"] = _mul_nbapi.ofp_table_feature_prop_header_type_get
    if _newclass:type = _swig_property(_mul_nbapi.ofp_table_feature_prop_header_type_get, _mul_nbapi.ofp_table_feature_prop_header_type_set)
    __swig_setmethods__["length"] = _mul_nbapi.ofp_table_feature_prop_header_length_set
    __swig_getmethods__["length"] = _mul_nbapi.ofp_table_feature_prop_header_length_get
    if _newclass:length = _swig_property(_mul_nbapi.ofp_table_feature_prop_header_length_get, _mul_nbapi.ofp_table_feature_prop_header_length_set)
    def __init__(self): 
        this = _mul_nbapi.new_ofp_table_feature_prop_header()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_ofp_table_feature_prop_header
    __del__ = lambda self : None;
ofp_table_feature_prop_header_swigregister = _mul_nbapi.ofp_table_feature_prop_header_swigregister
ofp_table_feature_prop_header_swigregister(ofp_table_feature_prop_header)

class ofp_table_features(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofp_table_features, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofp_table_features, name)
    __repr__ = _swig_repr
    __swig_setmethods__["length"] = _mul_nbapi.ofp_table_features_length_set
    __swig_getmethods__["length"] = _mul_nbapi.ofp_table_features_length_get
    if _newclass:length = _swig_property(_mul_nbapi.ofp_table_features_length_get, _mul_nbapi.ofp_table_features_length_set)
    __swig_setmethods__["table_id"] = _mul_nbapi.ofp_table_features_table_id_set
    __swig_getmethods__["table_id"] = _mul_nbapi.ofp_table_features_table_id_get
    if _newclass:table_id = _swig_property(_mul_nbapi.ofp_table_features_table_id_get, _mul_nbapi.ofp_table_features_table_id_set)
    __swig_setmethods__["pad"] = _mul_nbapi.ofp_table_features_pad_set
    __swig_getmethods__["pad"] = _mul_nbapi.ofp_table_features_pad_get
    if _newclass:pad = _swig_property(_mul_nbapi.ofp_table_features_pad_get, _mul_nbapi.ofp_table_features_pad_set)
    __swig_setmethods__["name"] = _mul_nbapi.ofp_table_features_name_set
    __swig_getmethods__["name"] = _mul_nbapi.ofp_table_features_name_get
    if _newclass:name = _swig_property(_mul_nbapi.ofp_table_features_name_get, _mul_nbapi.ofp_table_features_name_set)
    __swig_setmethods__["metadata_match"] = _mul_nbapi.ofp_table_features_metadata_match_set
    __swig_getmethods__["metadata_match"] = _mul_nbapi.ofp_table_features_metadata_match_get
    if _newclass:metadata_match = _swig_property(_mul_nbapi.ofp_table_features_metadata_match_get, _mul_nbapi.ofp_table_features_metadata_match_set)
    __swig_setmethods__["metadata_write"] = _mul_nbapi.ofp_table_features_metadata_write_set
    __swig_getmethods__["metadata_write"] = _mul_nbapi.ofp_table_features_metadata_write_get
    if _newclass:metadata_write = _swig_property(_mul_nbapi.ofp_table_features_metadata_write_get, _mul_nbapi.ofp_table_features_metadata_write_set)
    __swig_setmethods__["config"] = _mul_nbapi.ofp_table_features_config_set
    __swig_getmethods__["config"] = _mul_nbapi.ofp_table_features_config_get
    if _newclass:config = _swig_property(_mul_nbapi.ofp_table_features_config_get, _mul_nbapi.ofp_table_features_config_set)
    __swig_setmethods__["max_entries"] = _mul_nbapi.ofp_table_features_max_entries_set
    __swig_getmethods__["max_entries"] = _mul_nbapi.ofp_table_features_max_entries_get
    if _newclass:max_entries = _swig_property(_mul_nbapi.ofp_table_features_max_entries_get, _mul_nbapi.ofp_table_features_max_entries_set)
    __swig_setmethods__["properties"] = _mul_nbapi.ofp_table_features_properties_set
    __swig_getmethods__["properties"] = _mul_nbapi.ofp_table_features_properties_get
    if _newclass:properties = _swig_property(_mul_nbapi.ofp_table_features_properties_get, _mul_nbapi.ofp_table_features_properties_set)
    def __init__(self): 
        this = _mul_nbapi.new_ofp_table_features()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_ofp_table_features
    __del__ = lambda self : None;
ofp_table_features_swigregister = _mul_nbapi.ofp_table_features_swigregister
ofp_table_features_swigregister(ofp_table_features)

OFPTFPT_INSTRUCTIONS = _mul_nbapi.OFPTFPT_INSTRUCTIONS
OFPTFPT_INSTRUCTIONS_MISS = _mul_nbapi.OFPTFPT_INSTRUCTIONS_MISS
OFPTFPT_NEXT_TABLES = _mul_nbapi.OFPTFPT_NEXT_TABLES
OFPTFPT_NEXT_TABLES_MISS = _mul_nbapi.OFPTFPT_NEXT_TABLES_MISS
OFPTFPT_WRITE_ACTIONS = _mul_nbapi.OFPTFPT_WRITE_ACTIONS
OFPTFPT_WRITE_ACTIONS_MISS = _mul_nbapi.OFPTFPT_WRITE_ACTIONS_MISS
OFPTFPT_APPLY_ACTIONS = _mul_nbapi.OFPTFPT_APPLY_ACTIONS
OFPTFPT_APPLY_ACTIONS_MISS = _mul_nbapi.OFPTFPT_APPLY_ACTIONS_MISS
OFPTFPT_MATCH = _mul_nbapi.OFPTFPT_MATCH
OFPTFPT_WILDCARDS = _mul_nbapi.OFPTFPT_WILDCARDS
OFPTFPT_WRITE_SETFIELD = _mul_nbapi.OFPTFPT_WRITE_SETFIELD
OFPTFPT_WRITE_SETFIELD_MISS = _mul_nbapi.OFPTFPT_WRITE_SETFIELD_MISS
OFPTFPT_APPLY_SETFIELD = _mul_nbapi.OFPTFPT_APPLY_SETFIELD
OFPTFPT_APPLY_SETFIELD_MISS = _mul_nbapi.OFPTFPT_APPLY_SETFIELD_MISS
OFPTFPT_EXPERIMENTER = _mul_nbapi.OFPTFPT_EXPERIMENTER
OFPTFPT_EXPERIMENTER_MISS = _mul_nbapi.OFPTFPT_EXPERIMENTER_MISS
class ofp_table_feature_prop_instructions(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofp_table_feature_prop_instructions, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofp_table_feature_prop_instructions, name)
    __repr__ = _swig_repr
    __swig_setmethods__["type"] = _mul_nbapi.ofp_table_feature_prop_instructions_type_set
    __swig_getmethods__["type"] = _mul_nbapi.ofp_table_feature_prop_instructions_type_get
    if _newclass:type = _swig_property(_mul_nbapi.ofp_table_feature_prop_instructions_type_get, _mul_nbapi.ofp_table_feature_prop_instructions_type_set)
    __swig_setmethods__["length"] = _mul_nbapi.ofp_table_feature_prop_instructions_length_set
    __swig_getmethods__["length"] = _mul_nbapi.ofp_table_feature_prop_instructions_length_get
    if _newclass:length = _swig_property(_mul_nbapi.ofp_table_feature_prop_instructions_length_get, _mul_nbapi.ofp_table_feature_prop_instructions_length_set)
    __swig_setmethods__["instruction_ids"] = _mul_nbapi.ofp_table_feature_prop_instructions_instruction_ids_set
    __swig_getmethods__["instruction_ids"] = _mul_nbapi.ofp_table_feature_prop_instructions_instruction_ids_get
    if _newclass:instruction_ids = _swig_property(_mul_nbapi.ofp_table_feature_prop_instructions_instruction_ids_get, _mul_nbapi.ofp_table_feature_prop_instructions_instruction_ids_set)
    def __init__(self): 
        this = _mul_nbapi.new_ofp_table_feature_prop_instructions()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_ofp_table_feature_prop_instructions
    __del__ = lambda self : None;
ofp_table_feature_prop_instructions_swigregister = _mul_nbapi.ofp_table_feature_prop_instructions_swigregister
ofp_table_feature_prop_instructions_swigregister(ofp_table_feature_prop_instructions)

class ofp_table_feature_prop_next_tables(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofp_table_feature_prop_next_tables, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofp_table_feature_prop_next_tables, name)
    __repr__ = _swig_repr
    __swig_setmethods__["type"] = _mul_nbapi.ofp_table_feature_prop_next_tables_type_set
    __swig_getmethods__["type"] = _mul_nbapi.ofp_table_feature_prop_next_tables_type_get
    if _newclass:type = _swig_property(_mul_nbapi.ofp_table_feature_prop_next_tables_type_get, _mul_nbapi.ofp_table_feature_prop_next_tables_type_set)
    __swig_setmethods__["length"] = _mul_nbapi.ofp_table_feature_prop_next_tables_length_set
    __swig_getmethods__["length"] = _mul_nbapi.ofp_table_feature_prop_next_tables_length_get
    if _newclass:length = _swig_property(_mul_nbapi.ofp_table_feature_prop_next_tables_length_get, _mul_nbapi.ofp_table_feature_prop_next_tables_length_set)
    __swig_setmethods__["next_table_ids"] = _mul_nbapi.ofp_table_feature_prop_next_tables_next_table_ids_set
    __swig_getmethods__["next_table_ids"] = _mul_nbapi.ofp_table_feature_prop_next_tables_next_table_ids_get
    if _newclass:next_table_ids = _swig_property(_mul_nbapi.ofp_table_feature_prop_next_tables_next_table_ids_get, _mul_nbapi.ofp_table_feature_prop_next_tables_next_table_ids_set)
    def __init__(self): 
        this = _mul_nbapi.new_ofp_table_feature_prop_next_tables()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_ofp_table_feature_prop_next_tables
    __del__ = lambda self : None;
ofp_table_feature_prop_next_tables_swigregister = _mul_nbapi.ofp_table_feature_prop_next_tables_swigregister
ofp_table_feature_prop_next_tables_swigregister(ofp_table_feature_prop_next_tables)

class ofp_table_feature_prop_actions(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofp_table_feature_prop_actions, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofp_table_feature_prop_actions, name)
    __repr__ = _swig_repr
    __swig_setmethods__["type"] = _mul_nbapi.ofp_table_feature_prop_actions_type_set
    __swig_getmethods__["type"] = _mul_nbapi.ofp_table_feature_prop_actions_type_get
    if _newclass:type = _swig_property(_mul_nbapi.ofp_table_feature_prop_actions_type_get, _mul_nbapi.ofp_table_feature_prop_actions_type_set)
    __swig_setmethods__["length"] = _mul_nbapi.ofp_table_feature_prop_actions_length_set
    __swig_getmethods__["length"] = _mul_nbapi.ofp_table_feature_prop_actions_length_get
    if _newclass:length = _swig_property(_mul_nbapi.ofp_table_feature_prop_actions_length_get, _mul_nbapi.ofp_table_feature_prop_actions_length_set)
    __swig_setmethods__["action_ids"] = _mul_nbapi.ofp_table_feature_prop_actions_action_ids_set
    __swig_getmethods__["action_ids"] = _mul_nbapi.ofp_table_feature_prop_actions_action_ids_get
    if _newclass:action_ids = _swig_property(_mul_nbapi.ofp_table_feature_prop_actions_action_ids_get, _mul_nbapi.ofp_table_feature_prop_actions_action_ids_set)
    def __init__(self): 
        this = _mul_nbapi.new_ofp_table_feature_prop_actions()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_ofp_table_feature_prop_actions
    __del__ = lambda self : None;
ofp_table_feature_prop_actions_swigregister = _mul_nbapi.ofp_table_feature_prop_actions_swigregister
ofp_table_feature_prop_actions_swigregister(ofp_table_feature_prop_actions)

class ofp_table_feature_prop_oxm(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofp_table_feature_prop_oxm, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofp_table_feature_prop_oxm, name)
    __repr__ = _swig_repr
    __swig_setmethods__["type"] = _mul_nbapi.ofp_table_feature_prop_oxm_type_set
    __swig_getmethods__["type"] = _mul_nbapi.ofp_table_feature_prop_oxm_type_get
    if _newclass:type = _swig_property(_mul_nbapi.ofp_table_feature_prop_oxm_type_get, _mul_nbapi.ofp_table_feature_prop_oxm_type_set)
    __swig_setmethods__["length"] = _mul_nbapi.ofp_table_feature_prop_oxm_length_set
    __swig_getmethods__["length"] = _mul_nbapi.ofp_table_feature_prop_oxm_length_get
    if _newclass:length = _swig_property(_mul_nbapi.ofp_table_feature_prop_oxm_length_get, _mul_nbapi.ofp_table_feature_prop_oxm_length_set)
    __swig_setmethods__["oxm_ids"] = _mul_nbapi.ofp_table_feature_prop_oxm_oxm_ids_set
    __swig_getmethods__["oxm_ids"] = _mul_nbapi.ofp_table_feature_prop_oxm_oxm_ids_get
    if _newclass:oxm_ids = _swig_property(_mul_nbapi.ofp_table_feature_prop_oxm_oxm_ids_get, _mul_nbapi.ofp_table_feature_prop_oxm_oxm_ids_set)
    def __init__(self): 
        this = _mul_nbapi.new_ofp_table_feature_prop_oxm()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_ofp_table_feature_prop_oxm
    __del__ = lambda self : None;
ofp_table_feature_prop_oxm_swigregister = _mul_nbapi.ofp_table_feature_prop_oxm_swigregister
ofp_table_feature_prop_oxm_swigregister(ofp_table_feature_prop_oxm)

class ofp_table_feature_prop_experimenter(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofp_table_feature_prop_experimenter, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofp_table_feature_prop_experimenter, name)
    __repr__ = _swig_repr
    __swig_setmethods__["type"] = _mul_nbapi.ofp_table_feature_prop_experimenter_type_set
    __swig_getmethods__["type"] = _mul_nbapi.ofp_table_feature_prop_experimenter_type_get
    if _newclass:type = _swig_property(_mul_nbapi.ofp_table_feature_prop_experimenter_type_get, _mul_nbapi.ofp_table_feature_prop_experimenter_type_set)
    __swig_setmethods__["length"] = _mul_nbapi.ofp_table_feature_prop_experimenter_length_set
    __swig_getmethods__["length"] = _mul_nbapi.ofp_table_feature_prop_experimenter_length_get
    if _newclass:length = _swig_property(_mul_nbapi.ofp_table_feature_prop_experimenter_length_get, _mul_nbapi.ofp_table_feature_prop_experimenter_length_set)
    __swig_setmethods__["experimenter"] = _mul_nbapi.ofp_table_feature_prop_experimenter_experimenter_set
    __swig_getmethods__["experimenter"] = _mul_nbapi.ofp_table_feature_prop_experimenter_experimenter_get
    if _newclass:experimenter = _swig_property(_mul_nbapi.ofp_table_feature_prop_experimenter_experimenter_get, _mul_nbapi.ofp_table_feature_prop_experimenter_experimenter_set)
    __swig_setmethods__["exp_type"] = _mul_nbapi.ofp_table_feature_prop_experimenter_exp_type_set
    __swig_getmethods__["exp_type"] = _mul_nbapi.ofp_table_feature_prop_experimenter_exp_type_get
    if _newclass:exp_type = _swig_property(_mul_nbapi.ofp_table_feature_prop_experimenter_exp_type_get, _mul_nbapi.ofp_table_feature_prop_experimenter_exp_type_set)
    __swig_setmethods__["experimenter_data"] = _mul_nbapi.ofp_table_feature_prop_experimenter_experimenter_data_set
    __swig_getmethods__["experimenter_data"] = _mul_nbapi.ofp_table_feature_prop_experimenter_experimenter_data_get
    if _newclass:experimenter_data = _swig_property(_mul_nbapi.ofp_table_feature_prop_experimenter_experimenter_data_get, _mul_nbapi.ofp_table_feature_prop_experimenter_experimenter_data_set)
    def __init__(self): 
        this = _mul_nbapi.new_ofp_table_feature_prop_experimenter()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_ofp_table_feature_prop_experimenter
    __del__ = lambda self : None;
ofp_table_feature_prop_experimenter_swigregister = _mul_nbapi.ofp_table_feature_prop_experimenter_swigregister
ofp_table_feature_prop_experimenter_swigregister(ofp_table_feature_prop_experimenter)

class ofp_bucket_counter(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofp_bucket_counter, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofp_bucket_counter, name)
    __repr__ = _swig_repr
    __swig_setmethods__["packet_count"] = _mul_nbapi.ofp_bucket_counter_packet_count_set
    __swig_getmethods__["packet_count"] = _mul_nbapi.ofp_bucket_counter_packet_count_get
    if _newclass:packet_count = _swig_property(_mul_nbapi.ofp_bucket_counter_packet_count_get, _mul_nbapi.ofp_bucket_counter_packet_count_set)
    __swig_setmethods__["byte_count"] = _mul_nbapi.ofp_bucket_counter_byte_count_set
    __swig_getmethods__["byte_count"] = _mul_nbapi.ofp_bucket_counter_byte_count_get
    if _newclass:byte_count = _swig_property(_mul_nbapi.ofp_bucket_counter_byte_count_get, _mul_nbapi.ofp_bucket_counter_byte_count_set)
    def __init__(self): 
        this = _mul_nbapi.new_ofp_bucket_counter()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_ofp_bucket_counter
    __del__ = lambda self : None;
ofp_bucket_counter_swigregister = _mul_nbapi.ofp_bucket_counter_swigregister
ofp_bucket_counter_swigregister(ofp_bucket_counter)

class ofp_group_stats_request(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofp_group_stats_request, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofp_group_stats_request, name)
    __repr__ = _swig_repr
    __swig_setmethods__["group_id"] = _mul_nbapi.ofp_group_stats_request_group_id_set
    __swig_getmethods__["group_id"] = _mul_nbapi.ofp_group_stats_request_group_id_get
    if _newclass:group_id = _swig_property(_mul_nbapi.ofp_group_stats_request_group_id_get, _mul_nbapi.ofp_group_stats_request_group_id_set)
    __swig_setmethods__["pad"] = _mul_nbapi.ofp_group_stats_request_pad_set
    __swig_getmethods__["pad"] = _mul_nbapi.ofp_group_stats_request_pad_get
    if _newclass:pad = _swig_property(_mul_nbapi.ofp_group_stats_request_pad_get, _mul_nbapi.ofp_group_stats_request_pad_set)
    def __init__(self): 
        this = _mul_nbapi.new_ofp_group_stats_request()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_ofp_group_stats_request
    __del__ = lambda self : None;
ofp_group_stats_request_swigregister = _mul_nbapi.ofp_group_stats_request_swigregister
ofp_group_stats_request_swigregister(ofp_group_stats_request)

class ofp_group_stats(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofp_group_stats, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofp_group_stats, name)
    __repr__ = _swig_repr
    __swig_setmethods__["length"] = _mul_nbapi.ofp_group_stats_length_set
    __swig_getmethods__["length"] = _mul_nbapi.ofp_group_stats_length_get
    if _newclass:length = _swig_property(_mul_nbapi.ofp_group_stats_length_get, _mul_nbapi.ofp_group_stats_length_set)
    __swig_setmethods__["pad"] = _mul_nbapi.ofp_group_stats_pad_set
    __swig_getmethods__["pad"] = _mul_nbapi.ofp_group_stats_pad_get
    if _newclass:pad = _swig_property(_mul_nbapi.ofp_group_stats_pad_get, _mul_nbapi.ofp_group_stats_pad_set)
    __swig_setmethods__["group_id"] = _mul_nbapi.ofp_group_stats_group_id_set
    __swig_getmethods__["group_id"] = _mul_nbapi.ofp_group_stats_group_id_get
    if _newclass:group_id = _swig_property(_mul_nbapi.ofp_group_stats_group_id_get, _mul_nbapi.ofp_group_stats_group_id_set)
    __swig_setmethods__["ref_count"] = _mul_nbapi.ofp_group_stats_ref_count_set
    __swig_getmethods__["ref_count"] = _mul_nbapi.ofp_group_stats_ref_count_get
    if _newclass:ref_count = _swig_property(_mul_nbapi.ofp_group_stats_ref_count_get, _mul_nbapi.ofp_group_stats_ref_count_set)
    __swig_setmethods__["pad2"] = _mul_nbapi.ofp_group_stats_pad2_set
    __swig_getmethods__["pad2"] = _mul_nbapi.ofp_group_stats_pad2_get
    if _newclass:pad2 = _swig_property(_mul_nbapi.ofp_group_stats_pad2_get, _mul_nbapi.ofp_group_stats_pad2_set)
    __swig_setmethods__["packet_count"] = _mul_nbapi.ofp_group_stats_packet_count_set
    __swig_getmethods__["packet_count"] = _mul_nbapi.ofp_group_stats_packet_count_get
    if _newclass:packet_count = _swig_property(_mul_nbapi.ofp_group_stats_packet_count_get, _mul_nbapi.ofp_group_stats_packet_count_set)
    __swig_setmethods__["byte_count"] = _mul_nbapi.ofp_group_stats_byte_count_set
    __swig_getmethods__["byte_count"] = _mul_nbapi.ofp_group_stats_byte_count_get
    if _newclass:byte_count = _swig_property(_mul_nbapi.ofp_group_stats_byte_count_get, _mul_nbapi.ofp_group_stats_byte_count_set)
    __swig_setmethods__["duration_sec"] = _mul_nbapi.ofp_group_stats_duration_sec_set
    __swig_getmethods__["duration_sec"] = _mul_nbapi.ofp_group_stats_duration_sec_get
    if _newclass:duration_sec = _swig_property(_mul_nbapi.ofp_group_stats_duration_sec_get, _mul_nbapi.ofp_group_stats_duration_sec_set)
    __swig_setmethods__["duration_nsec"] = _mul_nbapi.ofp_group_stats_duration_nsec_set
    __swig_getmethods__["duration_nsec"] = _mul_nbapi.ofp_group_stats_duration_nsec_get
    if _newclass:duration_nsec = _swig_property(_mul_nbapi.ofp_group_stats_duration_nsec_get, _mul_nbapi.ofp_group_stats_duration_nsec_set)
    __swig_setmethods__["bucket_stats"] = _mul_nbapi.ofp_group_stats_bucket_stats_set
    __swig_getmethods__["bucket_stats"] = _mul_nbapi.ofp_group_stats_bucket_stats_get
    if _newclass:bucket_stats = _swig_property(_mul_nbapi.ofp_group_stats_bucket_stats_get, _mul_nbapi.ofp_group_stats_bucket_stats_set)
    def __init__(self): 
        this = _mul_nbapi.new_ofp_group_stats()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_ofp_group_stats
    __del__ = lambda self : None;
ofp_group_stats_swigregister = _mul_nbapi.ofp_group_stats_swigregister
ofp_group_stats_swigregister(ofp_group_stats)

class ofp_group_desc(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofp_group_desc, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofp_group_desc, name)
    __repr__ = _swig_repr
    __swig_setmethods__["length"] = _mul_nbapi.ofp_group_desc_length_set
    __swig_getmethods__["length"] = _mul_nbapi.ofp_group_desc_length_get
    if _newclass:length = _swig_property(_mul_nbapi.ofp_group_desc_length_get, _mul_nbapi.ofp_group_desc_length_set)
    __swig_setmethods__["type"] = _mul_nbapi.ofp_group_desc_type_set
    __swig_getmethods__["type"] = _mul_nbapi.ofp_group_desc_type_get
    if _newclass:type = _swig_property(_mul_nbapi.ofp_group_desc_type_get, _mul_nbapi.ofp_group_desc_type_set)
    __swig_setmethods__["pad"] = _mul_nbapi.ofp_group_desc_pad_set
    __swig_getmethods__["pad"] = _mul_nbapi.ofp_group_desc_pad_get
    if _newclass:pad = _swig_property(_mul_nbapi.ofp_group_desc_pad_get, _mul_nbapi.ofp_group_desc_pad_set)
    __swig_setmethods__["group_id"] = _mul_nbapi.ofp_group_desc_group_id_set
    __swig_getmethods__["group_id"] = _mul_nbapi.ofp_group_desc_group_id_get
    if _newclass:group_id = _swig_property(_mul_nbapi.ofp_group_desc_group_id_get, _mul_nbapi.ofp_group_desc_group_id_set)
    __swig_setmethods__["buckets"] = _mul_nbapi.ofp_group_desc_buckets_set
    __swig_getmethods__["buckets"] = _mul_nbapi.ofp_group_desc_buckets_get
    if _newclass:buckets = _swig_property(_mul_nbapi.ofp_group_desc_buckets_get, _mul_nbapi.ofp_group_desc_buckets_set)
    def __init__(self): 
        this = _mul_nbapi.new_ofp_group_desc()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_ofp_group_desc
    __del__ = lambda self : None;
ofp_group_desc_swigregister = _mul_nbapi.ofp_group_desc_swigregister
ofp_group_desc_swigregister(ofp_group_desc)

class ofp_group_features(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofp_group_features, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofp_group_features, name)
    __repr__ = _swig_repr
    __swig_setmethods__["types"] = _mul_nbapi.ofp_group_features_types_set
    __swig_getmethods__["types"] = _mul_nbapi.ofp_group_features_types_get
    if _newclass:types = _swig_property(_mul_nbapi.ofp_group_features_types_get, _mul_nbapi.ofp_group_features_types_set)
    __swig_setmethods__["capabilities"] = _mul_nbapi.ofp_group_features_capabilities_set
    __swig_getmethods__["capabilities"] = _mul_nbapi.ofp_group_features_capabilities_get
    if _newclass:capabilities = _swig_property(_mul_nbapi.ofp_group_features_capabilities_get, _mul_nbapi.ofp_group_features_capabilities_set)
    __swig_setmethods__["max_groups"] = _mul_nbapi.ofp_group_features_max_groups_set
    __swig_getmethods__["max_groups"] = _mul_nbapi.ofp_group_features_max_groups_get
    if _newclass:max_groups = _swig_property(_mul_nbapi.ofp_group_features_max_groups_get, _mul_nbapi.ofp_group_features_max_groups_set)
    __swig_setmethods__["actions"] = _mul_nbapi.ofp_group_features_actions_set
    __swig_getmethods__["actions"] = _mul_nbapi.ofp_group_features_actions_get
    if _newclass:actions = _swig_property(_mul_nbapi.ofp_group_features_actions_get, _mul_nbapi.ofp_group_features_actions_set)
    def __init__(self): 
        this = _mul_nbapi.new_ofp_group_features()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_ofp_group_features
    __del__ = lambda self : None;
ofp_group_features_swigregister = _mul_nbapi.ofp_group_features_swigregister
ofp_group_features_swigregister(ofp_group_features)

OFPGFC_SELECT_WEIGHT = _mul_nbapi.OFPGFC_SELECT_WEIGHT
OFPGFC_SELECT_LIVENESS = _mul_nbapi.OFPGFC_SELECT_LIVENESS
OFPGFC_CHAINING = _mul_nbapi.OFPGFC_CHAINING
OFPGFC_CHAINING_CHECKS = _mul_nbapi.OFPGFC_CHAINING_CHECKS
class ofp_meter_band_stats(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofp_meter_band_stats, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofp_meter_band_stats, name)
    __repr__ = _swig_repr
    __swig_setmethods__["packet_band_count"] = _mul_nbapi.ofp_meter_band_stats_packet_band_count_set
    __swig_getmethods__["packet_band_count"] = _mul_nbapi.ofp_meter_band_stats_packet_band_count_get
    if _newclass:packet_band_count = _swig_property(_mul_nbapi.ofp_meter_band_stats_packet_band_count_get, _mul_nbapi.ofp_meter_band_stats_packet_band_count_set)
    __swig_setmethods__["byte_band_count"] = _mul_nbapi.ofp_meter_band_stats_byte_band_count_set
    __swig_getmethods__["byte_band_count"] = _mul_nbapi.ofp_meter_band_stats_byte_band_count_get
    if _newclass:byte_band_count = _swig_property(_mul_nbapi.ofp_meter_band_stats_byte_band_count_get, _mul_nbapi.ofp_meter_band_stats_byte_band_count_set)
    def __init__(self): 
        this = _mul_nbapi.new_ofp_meter_band_stats()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_ofp_meter_band_stats
    __del__ = lambda self : None;
ofp_meter_band_stats_swigregister = _mul_nbapi.ofp_meter_band_stats_swigregister
ofp_meter_band_stats_swigregister(ofp_meter_band_stats)

class ofp_meter_multipart_request(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofp_meter_multipart_request, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofp_meter_multipart_request, name)
    __repr__ = _swig_repr
    __swig_setmethods__["meter_id"] = _mul_nbapi.ofp_meter_multipart_request_meter_id_set
    __swig_getmethods__["meter_id"] = _mul_nbapi.ofp_meter_multipart_request_meter_id_get
    if _newclass:meter_id = _swig_property(_mul_nbapi.ofp_meter_multipart_request_meter_id_get, _mul_nbapi.ofp_meter_multipart_request_meter_id_set)
    __swig_setmethods__["pad"] = _mul_nbapi.ofp_meter_multipart_request_pad_set
    __swig_getmethods__["pad"] = _mul_nbapi.ofp_meter_multipart_request_pad_get
    if _newclass:pad = _swig_property(_mul_nbapi.ofp_meter_multipart_request_pad_get, _mul_nbapi.ofp_meter_multipart_request_pad_set)
    def __init__(self): 
        this = _mul_nbapi.new_ofp_meter_multipart_request()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_ofp_meter_multipart_request
    __del__ = lambda self : None;
ofp_meter_multipart_request_swigregister = _mul_nbapi.ofp_meter_multipart_request_swigregister
ofp_meter_multipart_request_swigregister(ofp_meter_multipart_request)

class ofp_meter_config(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofp_meter_config, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofp_meter_config, name)
    __repr__ = _swig_repr
    __swig_setmethods__["length"] = _mul_nbapi.ofp_meter_config_length_set
    __swig_getmethods__["length"] = _mul_nbapi.ofp_meter_config_length_get
    if _newclass:length = _swig_property(_mul_nbapi.ofp_meter_config_length_get, _mul_nbapi.ofp_meter_config_length_set)
    __swig_setmethods__["flags"] = _mul_nbapi.ofp_meter_config_flags_set
    __swig_getmethods__["flags"] = _mul_nbapi.ofp_meter_config_flags_get
    if _newclass:flags = _swig_property(_mul_nbapi.ofp_meter_config_flags_get, _mul_nbapi.ofp_meter_config_flags_set)
    __swig_setmethods__["meter_id"] = _mul_nbapi.ofp_meter_config_meter_id_set
    __swig_getmethods__["meter_id"] = _mul_nbapi.ofp_meter_config_meter_id_get
    if _newclass:meter_id = _swig_property(_mul_nbapi.ofp_meter_config_meter_id_get, _mul_nbapi.ofp_meter_config_meter_id_set)
    __swig_setmethods__["bands"] = _mul_nbapi.ofp_meter_config_bands_set
    __swig_getmethods__["bands"] = _mul_nbapi.ofp_meter_config_bands_get
    if _newclass:bands = _swig_property(_mul_nbapi.ofp_meter_config_bands_get, _mul_nbapi.ofp_meter_config_bands_set)
    def __init__(self): 
        this = _mul_nbapi.new_ofp_meter_config()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_ofp_meter_config
    __del__ = lambda self : None;
ofp_meter_config_swigregister = _mul_nbapi.ofp_meter_config_swigregister
ofp_meter_config_swigregister(ofp_meter_config)

class ofp_meter_stats(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofp_meter_stats, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofp_meter_stats, name)
    __repr__ = _swig_repr
    __swig_setmethods__["meter_id"] = _mul_nbapi.ofp_meter_stats_meter_id_set
    __swig_getmethods__["meter_id"] = _mul_nbapi.ofp_meter_stats_meter_id_get
    if _newclass:meter_id = _swig_property(_mul_nbapi.ofp_meter_stats_meter_id_get, _mul_nbapi.ofp_meter_stats_meter_id_set)
    __swig_setmethods__["len"] = _mul_nbapi.ofp_meter_stats_len_set
    __swig_getmethods__["len"] = _mul_nbapi.ofp_meter_stats_len_get
    if _newclass:len = _swig_property(_mul_nbapi.ofp_meter_stats_len_get, _mul_nbapi.ofp_meter_stats_len_set)
    __swig_setmethods__["pad"] = _mul_nbapi.ofp_meter_stats_pad_set
    __swig_getmethods__["pad"] = _mul_nbapi.ofp_meter_stats_pad_get
    if _newclass:pad = _swig_property(_mul_nbapi.ofp_meter_stats_pad_get, _mul_nbapi.ofp_meter_stats_pad_set)
    __swig_setmethods__["flow_count"] = _mul_nbapi.ofp_meter_stats_flow_count_set
    __swig_getmethods__["flow_count"] = _mul_nbapi.ofp_meter_stats_flow_count_get
    if _newclass:flow_count = _swig_property(_mul_nbapi.ofp_meter_stats_flow_count_get, _mul_nbapi.ofp_meter_stats_flow_count_set)
    __swig_setmethods__["packet_in_count"] = _mul_nbapi.ofp_meter_stats_packet_in_count_set
    __swig_getmethods__["packet_in_count"] = _mul_nbapi.ofp_meter_stats_packet_in_count_get
    if _newclass:packet_in_count = _swig_property(_mul_nbapi.ofp_meter_stats_packet_in_count_get, _mul_nbapi.ofp_meter_stats_packet_in_count_set)
    __swig_setmethods__["byte_in_count"] = _mul_nbapi.ofp_meter_stats_byte_in_count_set
    __swig_getmethods__["byte_in_count"] = _mul_nbapi.ofp_meter_stats_byte_in_count_get
    if _newclass:byte_in_count = _swig_property(_mul_nbapi.ofp_meter_stats_byte_in_count_get, _mul_nbapi.ofp_meter_stats_byte_in_count_set)
    __swig_setmethods__["duration_sec"] = _mul_nbapi.ofp_meter_stats_duration_sec_set
    __swig_getmethods__["duration_sec"] = _mul_nbapi.ofp_meter_stats_duration_sec_get
    if _newclass:duration_sec = _swig_property(_mul_nbapi.ofp_meter_stats_duration_sec_get, _mul_nbapi.ofp_meter_stats_duration_sec_set)
    __swig_setmethods__["duration_nsec"] = _mul_nbapi.ofp_meter_stats_duration_nsec_set
    __swig_getmethods__["duration_nsec"] = _mul_nbapi.ofp_meter_stats_duration_nsec_get
    if _newclass:duration_nsec = _swig_property(_mul_nbapi.ofp_meter_stats_duration_nsec_get, _mul_nbapi.ofp_meter_stats_duration_nsec_set)
    __swig_setmethods__["band_stats"] = _mul_nbapi.ofp_meter_stats_band_stats_set
    __swig_getmethods__["band_stats"] = _mul_nbapi.ofp_meter_stats_band_stats_get
    if _newclass:band_stats = _swig_property(_mul_nbapi.ofp_meter_stats_band_stats_get, _mul_nbapi.ofp_meter_stats_band_stats_set)
    def __init__(self): 
        this = _mul_nbapi.new_ofp_meter_stats()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_ofp_meter_stats
    __del__ = lambda self : None;
ofp_meter_stats_swigregister = _mul_nbapi.ofp_meter_stats_swigregister
ofp_meter_stats_swigregister(ofp_meter_stats)

class ofp_meter_features(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofp_meter_features, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofp_meter_features, name)
    __repr__ = _swig_repr
    __swig_setmethods__["max_meter"] = _mul_nbapi.ofp_meter_features_max_meter_set
    __swig_getmethods__["max_meter"] = _mul_nbapi.ofp_meter_features_max_meter_get
    if _newclass:max_meter = _swig_property(_mul_nbapi.ofp_meter_features_max_meter_get, _mul_nbapi.ofp_meter_features_max_meter_set)
    __swig_setmethods__["band_types"] = _mul_nbapi.ofp_meter_features_band_types_set
    __swig_getmethods__["band_types"] = _mul_nbapi.ofp_meter_features_band_types_get
    if _newclass:band_types = _swig_property(_mul_nbapi.ofp_meter_features_band_types_get, _mul_nbapi.ofp_meter_features_band_types_set)
    __swig_setmethods__["capabilities"] = _mul_nbapi.ofp_meter_features_capabilities_set
    __swig_getmethods__["capabilities"] = _mul_nbapi.ofp_meter_features_capabilities_get
    if _newclass:capabilities = _swig_property(_mul_nbapi.ofp_meter_features_capabilities_get, _mul_nbapi.ofp_meter_features_capabilities_set)
    __swig_setmethods__["max_bands"] = _mul_nbapi.ofp_meter_features_max_bands_set
    __swig_getmethods__["max_bands"] = _mul_nbapi.ofp_meter_features_max_bands_get
    if _newclass:max_bands = _swig_property(_mul_nbapi.ofp_meter_features_max_bands_get, _mul_nbapi.ofp_meter_features_max_bands_set)
    __swig_setmethods__["max_color"] = _mul_nbapi.ofp_meter_features_max_color_set
    __swig_getmethods__["max_color"] = _mul_nbapi.ofp_meter_features_max_color_get
    if _newclass:max_color = _swig_property(_mul_nbapi.ofp_meter_features_max_color_get, _mul_nbapi.ofp_meter_features_max_color_set)
    __swig_setmethods__["pad"] = _mul_nbapi.ofp_meter_features_pad_set
    __swig_getmethods__["pad"] = _mul_nbapi.ofp_meter_features_pad_get
    if _newclass:pad = _swig_property(_mul_nbapi.ofp_meter_features_pad_get, _mul_nbapi.ofp_meter_features_pad_set)
    def __init__(self): 
        this = _mul_nbapi.new_ofp_meter_features()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_ofp_meter_features
    __del__ = lambda self : None;
ofp_meter_features_swigregister = _mul_nbapi.ofp_meter_features_swigregister
ofp_meter_features_swigregister(ofp_meter_features)

class ofp_role_request(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofp_role_request, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofp_role_request, name)
    __repr__ = _swig_repr
    __swig_setmethods__["header"] = _mul_nbapi.ofp_role_request_header_set
    __swig_getmethods__["header"] = _mul_nbapi.ofp_role_request_header_get
    if _newclass:header = _swig_property(_mul_nbapi.ofp_role_request_header_get, _mul_nbapi.ofp_role_request_header_set)
    __swig_setmethods__["role"] = _mul_nbapi.ofp_role_request_role_set
    __swig_getmethods__["role"] = _mul_nbapi.ofp_role_request_role_get
    if _newclass:role = _swig_property(_mul_nbapi.ofp_role_request_role_get, _mul_nbapi.ofp_role_request_role_set)
    __swig_setmethods__["pad"] = _mul_nbapi.ofp_role_request_pad_set
    __swig_getmethods__["pad"] = _mul_nbapi.ofp_role_request_pad_get
    if _newclass:pad = _swig_property(_mul_nbapi.ofp_role_request_pad_get, _mul_nbapi.ofp_role_request_pad_set)
    __swig_setmethods__["generation_id"] = _mul_nbapi.ofp_role_request_generation_id_set
    __swig_getmethods__["generation_id"] = _mul_nbapi.ofp_role_request_generation_id_get
    if _newclass:generation_id = _swig_property(_mul_nbapi.ofp_role_request_generation_id_get, _mul_nbapi.ofp_role_request_generation_id_set)
    def __init__(self): 
        this = _mul_nbapi.new_ofp_role_request()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_ofp_role_request
    __del__ = lambda self : None;
ofp_role_request_swigregister = _mul_nbapi.ofp_role_request_swigregister
ofp_role_request_swigregister(ofp_role_request)

OFPCR_ROLE_NOCHANGE = _mul_nbapi.OFPCR_ROLE_NOCHANGE
OFPCR_ROLE_EQUAL = _mul_nbapi.OFPCR_ROLE_EQUAL
OFPCR_ROLE_MASTER = _mul_nbapi.OFPCR_ROLE_MASTER
OFPCR_ROLE_SLAVE = _mul_nbapi.OFPCR_ROLE_SLAVE
class ofp_async_config(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofp_async_config, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofp_async_config, name)
    __repr__ = _swig_repr
    __swig_setmethods__["header"] = _mul_nbapi.ofp_async_config_header_set
    __swig_getmethods__["header"] = _mul_nbapi.ofp_async_config_header_get
    if _newclass:header = _swig_property(_mul_nbapi.ofp_async_config_header_get, _mul_nbapi.ofp_async_config_header_set)
    __swig_setmethods__["packet_in_mask"] = _mul_nbapi.ofp_async_config_packet_in_mask_set
    __swig_getmethods__["packet_in_mask"] = _mul_nbapi.ofp_async_config_packet_in_mask_get
    if _newclass:packet_in_mask = _swig_property(_mul_nbapi.ofp_async_config_packet_in_mask_get, _mul_nbapi.ofp_async_config_packet_in_mask_set)
    __swig_setmethods__["port_status_mask"] = _mul_nbapi.ofp_async_config_port_status_mask_set
    __swig_getmethods__["port_status_mask"] = _mul_nbapi.ofp_async_config_port_status_mask_get
    if _newclass:port_status_mask = _swig_property(_mul_nbapi.ofp_async_config_port_status_mask_get, _mul_nbapi.ofp_async_config_port_status_mask_set)
    __swig_setmethods__["flow_removed_mask"] = _mul_nbapi.ofp_async_config_flow_removed_mask_set
    __swig_getmethods__["flow_removed_mask"] = _mul_nbapi.ofp_async_config_flow_removed_mask_get
    if _newclass:flow_removed_mask = _swig_property(_mul_nbapi.ofp_async_config_flow_removed_mask_get, _mul_nbapi.ofp_async_config_flow_removed_mask_set)
    def __init__(self): 
        this = _mul_nbapi.new_ofp_async_config()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_ofp_async_config
    __del__ = lambda self : None;
ofp_async_config_swigregister = _mul_nbapi.ofp_async_config_swigregister
ofp_async_config_swigregister(ofp_async_config)

OFPR_NO_MATCH = _mul_nbapi.OFPR_NO_MATCH
OFPR_ACTION = _mul_nbapi.OFPR_ACTION
OFPR_INVALID_TTL = _mul_nbapi.OFPR_INVALID_TTL
OFPRR_IDLE_TIMEOUT = _mul_nbapi.OFPRR_IDLE_TIMEOUT
OFPRR_HARD_TIMEOUT = _mul_nbapi.OFPRR_HARD_TIMEOUT
OFPRR_DELETE = _mul_nbapi.OFPRR_DELETE
OFPRR_GROUP_DELETE = _mul_nbapi.OFPRR_GROUP_DELETE
OFPPR_ADD = _mul_nbapi.OFPPR_ADD
OFPPR_DELETE = _mul_nbapi.OFPPR_DELETE
OFPPR_MODIFY = _mul_nbapi.OFPPR_MODIFY
class ofp_error_msg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofp_error_msg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofp_error_msg, name)
    __repr__ = _swig_repr
    __swig_setmethods__["header"] = _mul_nbapi.ofp_error_msg_header_set
    __swig_getmethods__["header"] = _mul_nbapi.ofp_error_msg_header_get
    if _newclass:header = _swig_property(_mul_nbapi.ofp_error_msg_header_get, _mul_nbapi.ofp_error_msg_header_set)
    __swig_setmethods__["type"] = _mul_nbapi.ofp_error_msg_type_set
    __swig_getmethods__["type"] = _mul_nbapi.ofp_error_msg_type_get
    if _newclass:type = _swig_property(_mul_nbapi.ofp_error_msg_type_get, _mul_nbapi.ofp_error_msg_type_set)
    __swig_setmethods__["code"] = _mul_nbapi.ofp_error_msg_code_set
    __swig_getmethods__["code"] = _mul_nbapi.ofp_error_msg_code_get
    if _newclass:code = _swig_property(_mul_nbapi.ofp_error_msg_code_get, _mul_nbapi.ofp_error_msg_code_set)
    __swig_setmethods__["data"] = _mul_nbapi.ofp_error_msg_data_set
    __swig_getmethods__["data"] = _mul_nbapi.ofp_error_msg_data_get
    if _newclass:data = _swig_property(_mul_nbapi.ofp_error_msg_data_get, _mul_nbapi.ofp_error_msg_data_set)
    def __init__(self): 
        this = _mul_nbapi.new_ofp_error_msg()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_ofp_error_msg
    __del__ = lambda self : None;
ofp_error_msg_swigregister = _mul_nbapi.ofp_error_msg_swigregister
ofp_error_msg_swigregister(ofp_error_msg)

OFPHFC_INCOMPATIBLE = _mul_nbapi.OFPHFC_INCOMPATIBLE
OFPHFC_EPERM = _mul_nbapi.OFPHFC_EPERM
OFPTMFC_BAD_TABLE = _mul_nbapi.OFPTMFC_BAD_TABLE
OFPTMFC_BAD_CONFIG = _mul_nbapi.OFPTMFC_BAD_CONFIG
OFPTMFC_EPERM = _mul_nbapi.OFPTMFC_EPERM
OFPSCFC_BAD_FLAGS = _mul_nbapi.OFPSCFC_BAD_FLAGS
OFPSCFC_BAD_LEN = _mul_nbapi.OFPSCFC_BAD_LEN
OFPSCFC_EPERM = _mul_nbapi.OFPSCFC_EPERM
OFPRRFC_STALE = _mul_nbapi.OFPRRFC_STALE
OFPRRFC_UNSUP = _mul_nbapi.OFPRRFC_UNSUP
OFPRRFC_BAD_ROLE = _mul_nbapi.OFPRRFC_BAD_ROLE
OFPMMFC_UNKNOWN = _mul_nbapi.OFPMMFC_UNKNOWN
OFPMMFC_METER_EXISTS = _mul_nbapi.OFPMMFC_METER_EXISTS
OFPMMFC_INVALID_METER = _mul_nbapi.OFPMMFC_INVALID_METER
OFPMMFC_UNKNOWN_METER = _mul_nbapi.OFPMMFC_UNKNOWN_METER
OFPMMFC_BAD_COMMAND = _mul_nbapi.OFPMMFC_BAD_COMMAND
OFPMMFC_BAD_FLAGS = _mul_nbapi.OFPMMFC_BAD_FLAGS
OFPMMFC_BAD_RATE = _mul_nbapi.OFPMMFC_BAD_RATE
OFPMMFC_BAD_BURST = _mul_nbapi.OFPMMFC_BAD_BURST
OFPMMFC_BAD_BAND = _mul_nbapi.OFPMMFC_BAD_BAND
OFPMMFC_BAD_BAND_VALUE = _mul_nbapi.OFPMMFC_BAD_BAND_VALUE
OFPMMFC_OUT_OF_METERS = _mul_nbapi.OFPMMFC_OUT_OF_METERS
OFPMMFC_OUT_OF_BANDS = _mul_nbapi.OFPMMFC_OUT_OF_BANDS
OFPTFFC_BAD_TABLE = _mul_nbapi.OFPTFFC_BAD_TABLE
OFPTFFC_BAD_METADATA = _mul_nbapi.OFPTFFC_BAD_METADATA
OFPTFFC_BAD_TYPE = _mul_nbapi.OFPTFFC_BAD_TYPE
OFPTFFC_BAD_LEN = _mul_nbapi.OFPTFFC_BAD_LEN
OFPTFFC_BAD_ARGUMENT = _mul_nbapi.OFPTFFC_BAD_ARGUMENT
OFPTFFC_EPERM = _mul_nbapi.OFPTFFC_EPERM
OFPHET_VERSIONBITMAP = _mul_nbapi.OFPHET_VERSIONBITMAP
class ofp_hello_elem_header(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofp_hello_elem_header, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofp_hello_elem_header, name)
    __repr__ = _swig_repr
    __swig_setmethods__["type"] = _mul_nbapi.ofp_hello_elem_header_type_set
    __swig_getmethods__["type"] = _mul_nbapi.ofp_hello_elem_header_type_get
    if _newclass:type = _swig_property(_mul_nbapi.ofp_hello_elem_header_type_get, _mul_nbapi.ofp_hello_elem_header_type_set)
    __swig_setmethods__["length"] = _mul_nbapi.ofp_hello_elem_header_length_set
    __swig_getmethods__["length"] = _mul_nbapi.ofp_hello_elem_header_length_get
    if _newclass:length = _swig_property(_mul_nbapi.ofp_hello_elem_header_length_get, _mul_nbapi.ofp_hello_elem_header_length_set)
    def __init__(self): 
        this = _mul_nbapi.new_ofp_hello_elem_header()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_ofp_hello_elem_header
    __del__ = lambda self : None;
ofp_hello_elem_header_swigregister = _mul_nbapi.ofp_hello_elem_header_swigregister
ofp_hello_elem_header_swigregister(ofp_hello_elem_header)

class ofp_hello_elem_versionbitmap(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofp_hello_elem_versionbitmap, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofp_hello_elem_versionbitmap, name)
    __repr__ = _swig_repr
    __swig_setmethods__["type"] = _mul_nbapi.ofp_hello_elem_versionbitmap_type_set
    __swig_getmethods__["type"] = _mul_nbapi.ofp_hello_elem_versionbitmap_type_get
    if _newclass:type = _swig_property(_mul_nbapi.ofp_hello_elem_versionbitmap_type_get, _mul_nbapi.ofp_hello_elem_versionbitmap_type_set)
    __swig_setmethods__["length"] = _mul_nbapi.ofp_hello_elem_versionbitmap_length_set
    __swig_getmethods__["length"] = _mul_nbapi.ofp_hello_elem_versionbitmap_length_get
    if _newclass:length = _swig_property(_mul_nbapi.ofp_hello_elem_versionbitmap_length_get, _mul_nbapi.ofp_hello_elem_versionbitmap_length_set)
    __swig_setmethods__["bitmaps"] = _mul_nbapi.ofp_hello_elem_versionbitmap_bitmaps_set
    __swig_getmethods__["bitmaps"] = _mul_nbapi.ofp_hello_elem_versionbitmap_bitmaps_get
    if _newclass:bitmaps = _swig_property(_mul_nbapi.ofp_hello_elem_versionbitmap_bitmaps_get, _mul_nbapi.ofp_hello_elem_versionbitmap_bitmaps_set)
    def __init__(self): 
        this = _mul_nbapi.new_ofp_hello_elem_versionbitmap()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_ofp_hello_elem_versionbitmap
    __del__ = lambda self : None;
ofp_hello_elem_versionbitmap_swigregister = _mul_nbapi.ofp_hello_elem_versionbitmap_swigregister
ofp_hello_elem_versionbitmap_swigregister(ofp_hello_elem_versionbitmap)

class ofp_hello(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofp_hello, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofp_hello, name)
    __repr__ = _swig_repr
    __swig_setmethods__["header"] = _mul_nbapi.ofp_hello_header_set
    __swig_getmethods__["header"] = _mul_nbapi.ofp_hello_header_get
    if _newclass:header = _swig_property(_mul_nbapi.ofp_hello_header_get, _mul_nbapi.ofp_hello_header_set)
    __swig_setmethods__["elements"] = _mul_nbapi.ofp_hello_elements_set
    __swig_getmethods__["elements"] = _mul_nbapi.ofp_hello_elements_get
    if _newclass:elements = _swig_property(_mul_nbapi.ofp_hello_elements_get, _mul_nbapi.ofp_hello_elements_set)
    def __init__(self): 
        this = _mul_nbapi.new_ofp_hello()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_ofp_hello
    __del__ = lambda self : None;
ofp_hello_swigregister = _mul_nbapi.ofp_hello_swigregister
ofp_hello_swigregister(ofp_hello)

class ofp_experimenter_header(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofp_experimenter_header, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofp_experimenter_header, name)
    __repr__ = _swig_repr
    __swig_setmethods__["header"] = _mul_nbapi.ofp_experimenter_header_header_set
    __swig_getmethods__["header"] = _mul_nbapi.ofp_experimenter_header_header_get
    if _newclass:header = _swig_property(_mul_nbapi.ofp_experimenter_header_header_get, _mul_nbapi.ofp_experimenter_header_header_set)
    __swig_setmethods__["experimenter"] = _mul_nbapi.ofp_experimenter_header_experimenter_set
    __swig_getmethods__["experimenter"] = _mul_nbapi.ofp_experimenter_header_experimenter_get
    if _newclass:experimenter = _swig_property(_mul_nbapi.ofp_experimenter_header_experimenter_get, _mul_nbapi.ofp_experimenter_header_experimenter_set)
    __swig_setmethods__["exp_type"] = _mul_nbapi.ofp_experimenter_header_exp_type_set
    __swig_getmethods__["exp_type"] = _mul_nbapi.ofp_experimenter_header_exp_type_get
    if _newclass:exp_type = _swig_property(_mul_nbapi.ofp_experimenter_header_exp_type_get, _mul_nbapi.ofp_experimenter_header_exp_type_set)
    def __init__(self): 
        this = _mul_nbapi.new_ofp_experimenter_header()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_ofp_experimenter_header
    __del__ = lambda self : None;
ofp_experimenter_header_swigregister = _mul_nbapi.ofp_experimenter_header_swigregister
ofp_experimenter_header_swigregister(ofp_experimenter_header)

class ofp_queue_prop_header(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofp_queue_prop_header, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofp_queue_prop_header, name)
    __repr__ = _swig_repr
    __swig_setmethods__["property"] = _mul_nbapi.ofp_queue_prop_header_property_set
    __swig_getmethods__["property"] = _mul_nbapi.ofp_queue_prop_header_property_get
    if _newclass:property = _swig_property(_mul_nbapi.ofp_queue_prop_header_property_get, _mul_nbapi.ofp_queue_prop_header_property_set)
    __swig_setmethods__["len"] = _mul_nbapi.ofp_queue_prop_header_len_set
    __swig_getmethods__["len"] = _mul_nbapi.ofp_queue_prop_header_len_get
    if _newclass:len = _swig_property(_mul_nbapi.ofp_queue_prop_header_len_get, _mul_nbapi.ofp_queue_prop_header_len_set)
    __swig_setmethods__["pad"] = _mul_nbapi.ofp_queue_prop_header_pad_set
    __swig_getmethods__["pad"] = _mul_nbapi.ofp_queue_prop_header_pad_get
    if _newclass:pad = _swig_property(_mul_nbapi.ofp_queue_prop_header_pad_get, _mul_nbapi.ofp_queue_prop_header_pad_set)
    def __init__(self): 
        this = _mul_nbapi.new_ofp_queue_prop_header()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_ofp_queue_prop_header
    __del__ = lambda self : None;
ofp_queue_prop_header_swigregister = _mul_nbapi.ofp_queue_prop_header_swigregister
ofp_queue_prop_header_swigregister(ofp_queue_prop_header)

class ofp_queue_prop_min_rate(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofp_queue_prop_min_rate, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofp_queue_prop_min_rate, name)
    __repr__ = _swig_repr
    __swig_setmethods__["prop_header"] = _mul_nbapi.ofp_queue_prop_min_rate_prop_header_set
    __swig_getmethods__["prop_header"] = _mul_nbapi.ofp_queue_prop_min_rate_prop_header_get
    if _newclass:prop_header = _swig_property(_mul_nbapi.ofp_queue_prop_min_rate_prop_header_get, _mul_nbapi.ofp_queue_prop_min_rate_prop_header_set)
    __swig_setmethods__["rate"] = _mul_nbapi.ofp_queue_prop_min_rate_rate_set
    __swig_getmethods__["rate"] = _mul_nbapi.ofp_queue_prop_min_rate_rate_get
    if _newclass:rate = _swig_property(_mul_nbapi.ofp_queue_prop_min_rate_rate_get, _mul_nbapi.ofp_queue_prop_min_rate_rate_set)
    __swig_setmethods__["pad"] = _mul_nbapi.ofp_queue_prop_min_rate_pad_set
    __swig_getmethods__["pad"] = _mul_nbapi.ofp_queue_prop_min_rate_pad_get
    if _newclass:pad = _swig_property(_mul_nbapi.ofp_queue_prop_min_rate_pad_get, _mul_nbapi.ofp_queue_prop_min_rate_pad_set)
    def __init__(self): 
        this = _mul_nbapi.new_ofp_queue_prop_min_rate()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_ofp_queue_prop_min_rate
    __del__ = lambda self : None;
ofp_queue_prop_min_rate_swigregister = _mul_nbapi.ofp_queue_prop_min_rate_swigregister
ofp_queue_prop_min_rate_swigregister(ofp_queue_prop_min_rate)

class ofp_queue_prop_max_rate(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofp_queue_prop_max_rate, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofp_queue_prop_max_rate, name)
    __repr__ = _swig_repr
    __swig_setmethods__["prop_header"] = _mul_nbapi.ofp_queue_prop_max_rate_prop_header_set
    __swig_getmethods__["prop_header"] = _mul_nbapi.ofp_queue_prop_max_rate_prop_header_get
    if _newclass:prop_header = _swig_property(_mul_nbapi.ofp_queue_prop_max_rate_prop_header_get, _mul_nbapi.ofp_queue_prop_max_rate_prop_header_set)
    __swig_setmethods__["rate"] = _mul_nbapi.ofp_queue_prop_max_rate_rate_set
    __swig_getmethods__["rate"] = _mul_nbapi.ofp_queue_prop_max_rate_rate_get
    if _newclass:rate = _swig_property(_mul_nbapi.ofp_queue_prop_max_rate_rate_get, _mul_nbapi.ofp_queue_prop_max_rate_rate_set)
    __swig_setmethods__["pad"] = _mul_nbapi.ofp_queue_prop_max_rate_pad_set
    __swig_getmethods__["pad"] = _mul_nbapi.ofp_queue_prop_max_rate_pad_get
    if _newclass:pad = _swig_property(_mul_nbapi.ofp_queue_prop_max_rate_pad_get, _mul_nbapi.ofp_queue_prop_max_rate_pad_set)
    def __init__(self): 
        this = _mul_nbapi.new_ofp_queue_prop_max_rate()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_ofp_queue_prop_max_rate
    __del__ = lambda self : None;
ofp_queue_prop_max_rate_swigregister = _mul_nbapi.ofp_queue_prop_max_rate_swigregister
ofp_queue_prop_max_rate_swigregister(ofp_queue_prop_max_rate)

OFPQT_NONE = _mul_nbapi.OFPQT_NONE
OFPQT_MIN_RATE = _mul_nbapi.OFPQT_MIN_RATE
OFPQT_MAX_RATE = _mul_nbapi.OFPQT_MAX_RATE
OFPQT_EXPERIMENTER = _mul_nbapi.OFPQT_EXPERIMENTER
OFPQ_ALL = _mul_nbapi.OFPQ_ALL
OFPQ_MIN_RATE_UNCFG = _mul_nbapi.OFPQ_MIN_RATE_UNCFG
OPENFLOW_OPENFLOW10_H = _mul_nbapi.OPENFLOW_OPENFLOW10_H
OFPP_MAX = _mul_nbapi.OFPP_MAX
OFPP_IN_PORT = _mul_nbapi.OFPP_IN_PORT
OFPP_TABLE = _mul_nbapi.OFPP_TABLE
OFPP_NORMAL = _mul_nbapi.OFPP_NORMAL
OFPP_FLOOD = _mul_nbapi.OFPP_FLOOD
OFPP_ALL = _mul_nbapi.OFPP_ALL
OFPP_CONTROLLER = _mul_nbapi.OFPP_CONTROLLER
OFPP_LOCAL = _mul_nbapi.OFPP_LOCAL
OFPP_NONE = _mul_nbapi.OFPP_NONE
OFPT_HELLO = _mul_nbapi.OFPT_HELLO
OFPT_ERROR = _mul_nbapi.OFPT_ERROR
OFPT_ECHO_REQUEST = _mul_nbapi.OFPT_ECHO_REQUEST
OFPT_ECHO_REPLY = _mul_nbapi.OFPT_ECHO_REPLY
OFPT_VENDOR = _mul_nbapi.OFPT_VENDOR
OFPT_FEATURES_REQUEST = _mul_nbapi.OFPT_FEATURES_REQUEST
OFPT_FEATURES_REPLY = _mul_nbapi.OFPT_FEATURES_REPLY
OFPT_GET_CONFIG_REQUEST = _mul_nbapi.OFPT_GET_CONFIG_REQUEST
OFPT_GET_CONFIG_REPLY = _mul_nbapi.OFPT_GET_CONFIG_REPLY
OFPT_SET_CONFIG = _mul_nbapi.OFPT_SET_CONFIG
OFPT_PACKET_IN = _mul_nbapi.OFPT_PACKET_IN
OFPT_FLOW_REMOVED = _mul_nbapi.OFPT_FLOW_REMOVED
OFPT_PORT_STATUS = _mul_nbapi.OFPT_PORT_STATUS
OFPT_PACKET_OUT = _mul_nbapi.OFPT_PACKET_OUT
OFPT_FLOW_MOD = _mul_nbapi.OFPT_FLOW_MOD
OFPT_PORT_MOD = _mul_nbapi.OFPT_PORT_MOD
OFPT_STATS_REQUEST = _mul_nbapi.OFPT_STATS_REQUEST
OFPT_STATS_REPLY = _mul_nbapi.OFPT_STATS_REPLY
OFPT_BARRIER_REQUEST = _mul_nbapi.OFPT_BARRIER_REQUEST
OFPT_BARRIER_REPLY = _mul_nbapi.OFPT_BARRIER_REPLY
OFPT_QUEUE_GET_CONFIG_REQUEST = _mul_nbapi.OFPT_QUEUE_GET_CONFIG_REQUEST
OFPT_QUEUE_GET_CONFIG_REPLY = _mul_nbapi.OFPT_QUEUE_GET_CONFIG_REPLY
OFPC_FLOW_STATS = _mul_nbapi.OFPC_FLOW_STATS
OFPC_TABLE_STATS = _mul_nbapi.OFPC_TABLE_STATS
OFPC_PORT_STATS = _mul_nbapi.OFPC_PORT_STATS
OFPC_STP = _mul_nbapi.OFPC_STP
OFPC_RESERVED = _mul_nbapi.OFPC_RESERVED
OFPC_IP_REASM = _mul_nbapi.OFPC_IP_REASM
OFPC_QUEUE_STATS = _mul_nbapi.OFPC_QUEUE_STATS
OFPC_ARP_MATCH_IP = _mul_nbapi.OFPC_ARP_MATCH_IP
OFPPC_PORT_DOWN = _mul_nbapi.OFPPC_PORT_DOWN
OFPPC_NO_STP = _mul_nbapi.OFPPC_NO_STP
OFPPC_NO_RECV = _mul_nbapi.OFPPC_NO_RECV
OFPPC_NO_RECV_STP = _mul_nbapi.OFPPC_NO_RECV_STP
OFPPC_NO_FLOOD = _mul_nbapi.OFPPC_NO_FLOOD
OFPPC_NO_FWD = _mul_nbapi.OFPPC_NO_FWD
OFPPC_NO_PACKET_IN = _mul_nbapi.OFPPC_NO_PACKET_IN
OFPPS_LINK_DOWN = _mul_nbapi.OFPPS_LINK_DOWN
OFPPS_STP_LISTEN = _mul_nbapi.OFPPS_STP_LISTEN
OFPPS_STP_LEARN = _mul_nbapi.OFPPS_STP_LEARN
OFPPS_STP_FORWARD = _mul_nbapi.OFPPS_STP_FORWARD
OFPPS_STP_BLOCK = _mul_nbapi.OFPPS_STP_BLOCK
OFPPS_STP_MASK = _mul_nbapi.OFPPS_STP_MASK
OFPPF_10MB_HD = _mul_nbapi.OFPPF_10MB_HD
OFPPF_10MB_FD = _mul_nbapi.OFPPF_10MB_FD
OFPPF_100MB_HD = _mul_nbapi.OFPPF_100MB_HD
OFPPF_100MB_FD = _mul_nbapi.OFPPF_100MB_FD
OFPPF_1GB_HD = _mul_nbapi.OFPPF_1GB_HD
OFPPF_1GB_FD = _mul_nbapi.OFPPF_1GB_FD
OFPPF_10GB_FD = _mul_nbapi.OFPPF_10GB_FD
OFPPF_COPPER = _mul_nbapi.OFPPF_COPPER
OFPPF_FIBER = _mul_nbapi.OFPPF_FIBER
OFPPF_AUTONEG = _mul_nbapi.OFPPF_AUTONEG
OFPPF_PAUSE = _mul_nbapi.OFPPF_PAUSE
OFPPF_PAUSE_ASYM = _mul_nbapi.OFPPF_PAUSE_ASYM
class ofp_phy_port(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofp_phy_port, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofp_phy_port, name)
    __repr__ = _swig_repr
    __swig_setmethods__["port_no"] = _mul_nbapi.ofp_phy_port_port_no_set
    __swig_getmethods__["port_no"] = _mul_nbapi.ofp_phy_port_port_no_get
    if _newclass:port_no = _swig_property(_mul_nbapi.ofp_phy_port_port_no_get, _mul_nbapi.ofp_phy_port_port_no_set)
    __swig_setmethods__["hw_addr"] = _mul_nbapi.ofp_phy_port_hw_addr_set
    __swig_getmethods__["hw_addr"] = _mul_nbapi.ofp_phy_port_hw_addr_get
    if _newclass:hw_addr = _swig_property(_mul_nbapi.ofp_phy_port_hw_addr_get, _mul_nbapi.ofp_phy_port_hw_addr_set)
    __swig_setmethods__["name"] = _mul_nbapi.ofp_phy_port_name_set
    __swig_getmethods__["name"] = _mul_nbapi.ofp_phy_port_name_get
    if _newclass:name = _swig_property(_mul_nbapi.ofp_phy_port_name_get, _mul_nbapi.ofp_phy_port_name_set)
    __swig_setmethods__["config"] = _mul_nbapi.ofp_phy_port_config_set
    __swig_getmethods__["config"] = _mul_nbapi.ofp_phy_port_config_get
    if _newclass:config = _swig_property(_mul_nbapi.ofp_phy_port_config_get, _mul_nbapi.ofp_phy_port_config_set)
    __swig_setmethods__["state"] = _mul_nbapi.ofp_phy_port_state_set
    __swig_getmethods__["state"] = _mul_nbapi.ofp_phy_port_state_get
    if _newclass:state = _swig_property(_mul_nbapi.ofp_phy_port_state_get, _mul_nbapi.ofp_phy_port_state_set)
    __swig_setmethods__["curr"] = _mul_nbapi.ofp_phy_port_curr_set
    __swig_getmethods__["curr"] = _mul_nbapi.ofp_phy_port_curr_get
    if _newclass:curr = _swig_property(_mul_nbapi.ofp_phy_port_curr_get, _mul_nbapi.ofp_phy_port_curr_set)
    __swig_setmethods__["advertised"] = _mul_nbapi.ofp_phy_port_advertised_set
    __swig_getmethods__["advertised"] = _mul_nbapi.ofp_phy_port_advertised_get
    if _newclass:advertised = _swig_property(_mul_nbapi.ofp_phy_port_advertised_get, _mul_nbapi.ofp_phy_port_advertised_set)
    __swig_setmethods__["supported"] = _mul_nbapi.ofp_phy_port_supported_set
    __swig_getmethods__["supported"] = _mul_nbapi.ofp_phy_port_supported_get
    if _newclass:supported = _swig_property(_mul_nbapi.ofp_phy_port_supported_get, _mul_nbapi.ofp_phy_port_supported_set)
    __swig_setmethods__["peer"] = _mul_nbapi.ofp_phy_port_peer_set
    __swig_getmethods__["peer"] = _mul_nbapi.ofp_phy_port_peer_get
    if _newclass:peer = _swig_property(_mul_nbapi.ofp_phy_port_peer_get, _mul_nbapi.ofp_phy_port_peer_set)
    def __init__(self): 
        this = _mul_nbapi.new_ofp_phy_port()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_ofp_phy_port
    __del__ = lambda self : None;
ofp_phy_port_swigregister = _mul_nbapi.ofp_phy_port_swigregister
ofp_phy_port_swigregister(ofp_phy_port)

class ofp_switch_features(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofp_switch_features, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofp_switch_features, name)
    __repr__ = _swig_repr
    __swig_setmethods__["header"] = _mul_nbapi.ofp_switch_features_header_set
    __swig_getmethods__["header"] = _mul_nbapi.ofp_switch_features_header_get
    if _newclass:header = _swig_property(_mul_nbapi.ofp_switch_features_header_get, _mul_nbapi.ofp_switch_features_header_set)
    __swig_setmethods__["datapath_id"] = _mul_nbapi.ofp_switch_features_datapath_id_set
    __swig_getmethods__["datapath_id"] = _mul_nbapi.ofp_switch_features_datapath_id_get
    if _newclass:datapath_id = _swig_property(_mul_nbapi.ofp_switch_features_datapath_id_get, _mul_nbapi.ofp_switch_features_datapath_id_set)
    __swig_setmethods__["n_buffers"] = _mul_nbapi.ofp_switch_features_n_buffers_set
    __swig_getmethods__["n_buffers"] = _mul_nbapi.ofp_switch_features_n_buffers_get
    if _newclass:n_buffers = _swig_property(_mul_nbapi.ofp_switch_features_n_buffers_get, _mul_nbapi.ofp_switch_features_n_buffers_set)
    __swig_setmethods__["n_tables"] = _mul_nbapi.ofp_switch_features_n_tables_set
    __swig_getmethods__["n_tables"] = _mul_nbapi.ofp_switch_features_n_tables_get
    if _newclass:n_tables = _swig_property(_mul_nbapi.ofp_switch_features_n_tables_get, _mul_nbapi.ofp_switch_features_n_tables_set)
    __swig_setmethods__["pad"] = _mul_nbapi.ofp_switch_features_pad_set
    __swig_getmethods__["pad"] = _mul_nbapi.ofp_switch_features_pad_get
    if _newclass:pad = _swig_property(_mul_nbapi.ofp_switch_features_pad_get, _mul_nbapi.ofp_switch_features_pad_set)
    __swig_setmethods__["capabilities"] = _mul_nbapi.ofp_switch_features_capabilities_set
    __swig_getmethods__["capabilities"] = _mul_nbapi.ofp_switch_features_capabilities_get
    if _newclass:capabilities = _swig_property(_mul_nbapi.ofp_switch_features_capabilities_get, _mul_nbapi.ofp_switch_features_capabilities_set)
    __swig_setmethods__["actions"] = _mul_nbapi.ofp_switch_features_actions_set
    __swig_getmethods__["actions"] = _mul_nbapi.ofp_switch_features_actions_get
    if _newclass:actions = _swig_property(_mul_nbapi.ofp_switch_features_actions_get, _mul_nbapi.ofp_switch_features_actions_set)
    __swig_setmethods__["ports"] = _mul_nbapi.ofp_switch_features_ports_set
    __swig_getmethods__["ports"] = _mul_nbapi.ofp_switch_features_ports_get
    if _newclass:ports = _swig_property(_mul_nbapi.ofp_switch_features_ports_get, _mul_nbapi.ofp_switch_features_ports_set)
    def __init__(self): 
        this = _mul_nbapi.new_ofp_switch_features()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_ofp_switch_features
    __del__ = lambda self : None;
ofp_switch_features_swigregister = _mul_nbapi.ofp_switch_features_swigregister
ofp_switch_features_swigregister(ofp_switch_features)

class ofp_port_status(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofp_port_status, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofp_port_status, name)
    __repr__ = _swig_repr
    __swig_setmethods__["header"] = _mul_nbapi.ofp_port_status_header_set
    __swig_getmethods__["header"] = _mul_nbapi.ofp_port_status_header_get
    if _newclass:header = _swig_property(_mul_nbapi.ofp_port_status_header_get, _mul_nbapi.ofp_port_status_header_set)
    __swig_setmethods__["reason"] = _mul_nbapi.ofp_port_status_reason_set
    __swig_getmethods__["reason"] = _mul_nbapi.ofp_port_status_reason_get
    if _newclass:reason = _swig_property(_mul_nbapi.ofp_port_status_reason_get, _mul_nbapi.ofp_port_status_reason_set)
    __swig_setmethods__["pad"] = _mul_nbapi.ofp_port_status_pad_set
    __swig_getmethods__["pad"] = _mul_nbapi.ofp_port_status_pad_get
    if _newclass:pad = _swig_property(_mul_nbapi.ofp_port_status_pad_get, _mul_nbapi.ofp_port_status_pad_set)
    __swig_setmethods__["desc"] = _mul_nbapi.ofp_port_status_desc_set
    __swig_getmethods__["desc"] = _mul_nbapi.ofp_port_status_desc_get
    if _newclass:desc = _swig_property(_mul_nbapi.ofp_port_status_desc_get, _mul_nbapi.ofp_port_status_desc_set)
    def __init__(self): 
        this = _mul_nbapi.new_ofp_port_status()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_ofp_port_status
    __del__ = lambda self : None;
ofp_port_status_swigregister = _mul_nbapi.ofp_port_status_swigregister
ofp_port_status_swigregister(ofp_port_status)

class ofp_port_mod(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofp_port_mod, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofp_port_mod, name)
    __repr__ = _swig_repr
    __swig_setmethods__["header"] = _mul_nbapi.ofp_port_mod_header_set
    __swig_getmethods__["header"] = _mul_nbapi.ofp_port_mod_header_get
    if _newclass:header = _swig_property(_mul_nbapi.ofp_port_mod_header_get, _mul_nbapi.ofp_port_mod_header_set)
    __swig_setmethods__["port_no"] = _mul_nbapi.ofp_port_mod_port_no_set
    __swig_getmethods__["port_no"] = _mul_nbapi.ofp_port_mod_port_no_get
    if _newclass:port_no = _swig_property(_mul_nbapi.ofp_port_mod_port_no_get, _mul_nbapi.ofp_port_mod_port_no_set)
    __swig_setmethods__["hw_addr"] = _mul_nbapi.ofp_port_mod_hw_addr_set
    __swig_getmethods__["hw_addr"] = _mul_nbapi.ofp_port_mod_hw_addr_get
    if _newclass:hw_addr = _swig_property(_mul_nbapi.ofp_port_mod_hw_addr_get, _mul_nbapi.ofp_port_mod_hw_addr_set)
    __swig_setmethods__["config"] = _mul_nbapi.ofp_port_mod_config_set
    __swig_getmethods__["config"] = _mul_nbapi.ofp_port_mod_config_get
    if _newclass:config = _swig_property(_mul_nbapi.ofp_port_mod_config_get, _mul_nbapi.ofp_port_mod_config_set)
    __swig_setmethods__["mask"] = _mul_nbapi.ofp_port_mod_mask_set
    __swig_getmethods__["mask"] = _mul_nbapi.ofp_port_mod_mask_get
    if _newclass:mask = _swig_property(_mul_nbapi.ofp_port_mod_mask_get, _mul_nbapi.ofp_port_mod_mask_set)
    __swig_setmethods__["advertise"] = _mul_nbapi.ofp_port_mod_advertise_set
    __swig_getmethods__["advertise"] = _mul_nbapi.ofp_port_mod_advertise_get
    if _newclass:advertise = _swig_property(_mul_nbapi.ofp_port_mod_advertise_get, _mul_nbapi.ofp_port_mod_advertise_set)
    __swig_setmethods__["pad"] = _mul_nbapi.ofp_port_mod_pad_set
    __swig_getmethods__["pad"] = _mul_nbapi.ofp_port_mod_pad_get
    if _newclass:pad = _swig_property(_mul_nbapi.ofp_port_mod_pad_get, _mul_nbapi.ofp_port_mod_pad_set)
    def __init__(self): 
        this = _mul_nbapi.new_ofp_port_mod()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_ofp_port_mod
    __del__ = lambda self : None;
ofp_port_mod_swigregister = _mul_nbapi.ofp_port_mod_swigregister
ofp_port_mod_swigregister(ofp_port_mod)

class ofp_packet_in(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofp_packet_in, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofp_packet_in, name)
    __repr__ = _swig_repr
    __swig_setmethods__["header"] = _mul_nbapi.ofp_packet_in_header_set
    __swig_getmethods__["header"] = _mul_nbapi.ofp_packet_in_header_get
    if _newclass:header = _swig_property(_mul_nbapi.ofp_packet_in_header_get, _mul_nbapi.ofp_packet_in_header_set)
    __swig_setmethods__["buffer_id"] = _mul_nbapi.ofp_packet_in_buffer_id_set
    __swig_getmethods__["buffer_id"] = _mul_nbapi.ofp_packet_in_buffer_id_get
    if _newclass:buffer_id = _swig_property(_mul_nbapi.ofp_packet_in_buffer_id_get, _mul_nbapi.ofp_packet_in_buffer_id_set)
    __swig_setmethods__["total_len"] = _mul_nbapi.ofp_packet_in_total_len_set
    __swig_getmethods__["total_len"] = _mul_nbapi.ofp_packet_in_total_len_get
    if _newclass:total_len = _swig_property(_mul_nbapi.ofp_packet_in_total_len_get, _mul_nbapi.ofp_packet_in_total_len_set)
    __swig_setmethods__["in_port"] = _mul_nbapi.ofp_packet_in_in_port_set
    __swig_getmethods__["in_port"] = _mul_nbapi.ofp_packet_in_in_port_get
    if _newclass:in_port = _swig_property(_mul_nbapi.ofp_packet_in_in_port_get, _mul_nbapi.ofp_packet_in_in_port_set)
    __swig_setmethods__["reason"] = _mul_nbapi.ofp_packet_in_reason_set
    __swig_getmethods__["reason"] = _mul_nbapi.ofp_packet_in_reason_get
    if _newclass:reason = _swig_property(_mul_nbapi.ofp_packet_in_reason_get, _mul_nbapi.ofp_packet_in_reason_set)
    __swig_setmethods__["pad"] = _mul_nbapi.ofp_packet_in_pad_set
    __swig_getmethods__["pad"] = _mul_nbapi.ofp_packet_in_pad_get
    if _newclass:pad = _swig_property(_mul_nbapi.ofp_packet_in_pad_get, _mul_nbapi.ofp_packet_in_pad_set)
    __swig_setmethods__["data"] = _mul_nbapi.ofp_packet_in_data_set
    __swig_getmethods__["data"] = _mul_nbapi.ofp_packet_in_data_get
    if _newclass:data = _swig_property(_mul_nbapi.ofp_packet_in_data_get, _mul_nbapi.ofp_packet_in_data_set)
    def __init__(self): 
        this = _mul_nbapi.new_ofp_packet_in()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_ofp_packet_in
    __del__ = lambda self : None;
ofp_packet_in_swigregister = _mul_nbapi.ofp_packet_in_swigregister
ofp_packet_in_swigregister(ofp_packet_in)

OFPAT_OUTPUT = _mul_nbapi.OFPAT_OUTPUT
OFPAT_SET_VLAN_VID = _mul_nbapi.OFPAT_SET_VLAN_VID
OFPAT_SET_VLAN_PCP = _mul_nbapi.OFPAT_SET_VLAN_PCP
OFPAT_STRIP_VLAN = _mul_nbapi.OFPAT_STRIP_VLAN
OFPAT_SET_DL_SRC = _mul_nbapi.OFPAT_SET_DL_SRC
OFPAT_SET_DL_DST = _mul_nbapi.OFPAT_SET_DL_DST
OFPAT_SET_NW_SRC = _mul_nbapi.OFPAT_SET_NW_SRC
OFPAT_SET_NW_DST = _mul_nbapi.OFPAT_SET_NW_DST
OFPAT_SET_NW_TOS = _mul_nbapi.OFPAT_SET_NW_TOS
OFPAT_SET_TP_SRC = _mul_nbapi.OFPAT_SET_TP_SRC
OFPAT_SET_TP_DST = _mul_nbapi.OFPAT_SET_TP_DST
OFPAT_ENQUEUE = _mul_nbapi.OFPAT_ENQUEUE
OFPAT_VENDOR = _mul_nbapi.OFPAT_VENDOR
class ofp_action_output(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofp_action_output, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofp_action_output, name)
    __repr__ = _swig_repr
    __swig_setmethods__["type"] = _mul_nbapi.ofp_action_output_type_set
    __swig_getmethods__["type"] = _mul_nbapi.ofp_action_output_type_get
    if _newclass:type = _swig_property(_mul_nbapi.ofp_action_output_type_get, _mul_nbapi.ofp_action_output_type_set)
    __swig_setmethods__["len"] = _mul_nbapi.ofp_action_output_len_set
    __swig_getmethods__["len"] = _mul_nbapi.ofp_action_output_len_get
    if _newclass:len = _swig_property(_mul_nbapi.ofp_action_output_len_get, _mul_nbapi.ofp_action_output_len_set)
    __swig_setmethods__["port"] = _mul_nbapi.ofp_action_output_port_set
    __swig_getmethods__["port"] = _mul_nbapi.ofp_action_output_port_get
    if _newclass:port = _swig_property(_mul_nbapi.ofp_action_output_port_get, _mul_nbapi.ofp_action_output_port_set)
    __swig_setmethods__["max_len"] = _mul_nbapi.ofp_action_output_max_len_set
    __swig_getmethods__["max_len"] = _mul_nbapi.ofp_action_output_max_len_get
    if _newclass:max_len = _swig_property(_mul_nbapi.ofp_action_output_max_len_get, _mul_nbapi.ofp_action_output_max_len_set)
    def __init__(self): 
        this = _mul_nbapi.new_ofp_action_output()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_ofp_action_output
    __del__ = lambda self : None;
ofp_action_output_swigregister = _mul_nbapi.ofp_action_output_swigregister
ofp_action_output_swigregister(ofp_action_output)

OFP_VLAN_NONE = _mul_nbapi.OFP_VLAN_NONE
class ofp_action_vlan_vid(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofp_action_vlan_vid, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofp_action_vlan_vid, name)
    __repr__ = _swig_repr
    __swig_setmethods__["type"] = _mul_nbapi.ofp_action_vlan_vid_type_set
    __swig_getmethods__["type"] = _mul_nbapi.ofp_action_vlan_vid_type_get
    if _newclass:type = _swig_property(_mul_nbapi.ofp_action_vlan_vid_type_get, _mul_nbapi.ofp_action_vlan_vid_type_set)
    __swig_setmethods__["len"] = _mul_nbapi.ofp_action_vlan_vid_len_set
    __swig_getmethods__["len"] = _mul_nbapi.ofp_action_vlan_vid_len_get
    if _newclass:len = _swig_property(_mul_nbapi.ofp_action_vlan_vid_len_get, _mul_nbapi.ofp_action_vlan_vid_len_set)
    __swig_setmethods__["vlan_vid"] = _mul_nbapi.ofp_action_vlan_vid_vlan_vid_set
    __swig_getmethods__["vlan_vid"] = _mul_nbapi.ofp_action_vlan_vid_vlan_vid_get
    if _newclass:vlan_vid = _swig_property(_mul_nbapi.ofp_action_vlan_vid_vlan_vid_get, _mul_nbapi.ofp_action_vlan_vid_vlan_vid_set)
    __swig_setmethods__["pad"] = _mul_nbapi.ofp_action_vlan_vid_pad_set
    __swig_getmethods__["pad"] = _mul_nbapi.ofp_action_vlan_vid_pad_get
    if _newclass:pad = _swig_property(_mul_nbapi.ofp_action_vlan_vid_pad_get, _mul_nbapi.ofp_action_vlan_vid_pad_set)
    def __init__(self): 
        this = _mul_nbapi.new_ofp_action_vlan_vid()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_ofp_action_vlan_vid
    __del__ = lambda self : None;
ofp_action_vlan_vid_swigregister = _mul_nbapi.ofp_action_vlan_vid_swigregister
ofp_action_vlan_vid_swigregister(ofp_action_vlan_vid)

class ofp_action_vlan_pcp(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofp_action_vlan_pcp, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofp_action_vlan_pcp, name)
    __repr__ = _swig_repr
    __swig_setmethods__["type"] = _mul_nbapi.ofp_action_vlan_pcp_type_set
    __swig_getmethods__["type"] = _mul_nbapi.ofp_action_vlan_pcp_type_get
    if _newclass:type = _swig_property(_mul_nbapi.ofp_action_vlan_pcp_type_get, _mul_nbapi.ofp_action_vlan_pcp_type_set)
    __swig_setmethods__["len"] = _mul_nbapi.ofp_action_vlan_pcp_len_set
    __swig_getmethods__["len"] = _mul_nbapi.ofp_action_vlan_pcp_len_get
    if _newclass:len = _swig_property(_mul_nbapi.ofp_action_vlan_pcp_len_get, _mul_nbapi.ofp_action_vlan_pcp_len_set)
    __swig_setmethods__["vlan_pcp"] = _mul_nbapi.ofp_action_vlan_pcp_vlan_pcp_set
    __swig_getmethods__["vlan_pcp"] = _mul_nbapi.ofp_action_vlan_pcp_vlan_pcp_get
    if _newclass:vlan_pcp = _swig_property(_mul_nbapi.ofp_action_vlan_pcp_vlan_pcp_get, _mul_nbapi.ofp_action_vlan_pcp_vlan_pcp_set)
    __swig_setmethods__["pad"] = _mul_nbapi.ofp_action_vlan_pcp_pad_set
    __swig_getmethods__["pad"] = _mul_nbapi.ofp_action_vlan_pcp_pad_get
    if _newclass:pad = _swig_property(_mul_nbapi.ofp_action_vlan_pcp_pad_get, _mul_nbapi.ofp_action_vlan_pcp_pad_set)
    def __init__(self): 
        this = _mul_nbapi.new_ofp_action_vlan_pcp()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_ofp_action_vlan_pcp
    __del__ = lambda self : None;
ofp_action_vlan_pcp_swigregister = _mul_nbapi.ofp_action_vlan_pcp_swigregister
ofp_action_vlan_pcp_swigregister(ofp_action_vlan_pcp)

class ofp_action_dl_addr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofp_action_dl_addr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofp_action_dl_addr, name)
    __repr__ = _swig_repr
    __swig_setmethods__["type"] = _mul_nbapi.ofp_action_dl_addr_type_set
    __swig_getmethods__["type"] = _mul_nbapi.ofp_action_dl_addr_type_get
    if _newclass:type = _swig_property(_mul_nbapi.ofp_action_dl_addr_type_get, _mul_nbapi.ofp_action_dl_addr_type_set)
    __swig_setmethods__["len"] = _mul_nbapi.ofp_action_dl_addr_len_set
    __swig_getmethods__["len"] = _mul_nbapi.ofp_action_dl_addr_len_get
    if _newclass:len = _swig_property(_mul_nbapi.ofp_action_dl_addr_len_get, _mul_nbapi.ofp_action_dl_addr_len_set)
    __swig_setmethods__["dl_addr"] = _mul_nbapi.ofp_action_dl_addr_dl_addr_set
    __swig_getmethods__["dl_addr"] = _mul_nbapi.ofp_action_dl_addr_dl_addr_get
    if _newclass:dl_addr = _swig_property(_mul_nbapi.ofp_action_dl_addr_dl_addr_get, _mul_nbapi.ofp_action_dl_addr_dl_addr_set)
    __swig_setmethods__["pad"] = _mul_nbapi.ofp_action_dl_addr_pad_set
    __swig_getmethods__["pad"] = _mul_nbapi.ofp_action_dl_addr_pad_get
    if _newclass:pad = _swig_property(_mul_nbapi.ofp_action_dl_addr_pad_get, _mul_nbapi.ofp_action_dl_addr_pad_set)
    def __init__(self): 
        this = _mul_nbapi.new_ofp_action_dl_addr()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_ofp_action_dl_addr
    __del__ = lambda self : None;
ofp_action_dl_addr_swigregister = _mul_nbapi.ofp_action_dl_addr_swigregister
ofp_action_dl_addr_swigregister(ofp_action_dl_addr)

class ofp_action_nw_addr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofp_action_nw_addr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofp_action_nw_addr, name)
    __repr__ = _swig_repr
    __swig_setmethods__["type"] = _mul_nbapi.ofp_action_nw_addr_type_set
    __swig_getmethods__["type"] = _mul_nbapi.ofp_action_nw_addr_type_get
    if _newclass:type = _swig_property(_mul_nbapi.ofp_action_nw_addr_type_get, _mul_nbapi.ofp_action_nw_addr_type_set)
    __swig_setmethods__["len"] = _mul_nbapi.ofp_action_nw_addr_len_set
    __swig_getmethods__["len"] = _mul_nbapi.ofp_action_nw_addr_len_get
    if _newclass:len = _swig_property(_mul_nbapi.ofp_action_nw_addr_len_get, _mul_nbapi.ofp_action_nw_addr_len_set)
    __swig_setmethods__["nw_addr"] = _mul_nbapi.ofp_action_nw_addr_nw_addr_set
    __swig_getmethods__["nw_addr"] = _mul_nbapi.ofp_action_nw_addr_nw_addr_get
    if _newclass:nw_addr = _swig_property(_mul_nbapi.ofp_action_nw_addr_nw_addr_get, _mul_nbapi.ofp_action_nw_addr_nw_addr_set)
    def __init__(self): 
        this = _mul_nbapi.new_ofp_action_nw_addr()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_ofp_action_nw_addr
    __del__ = lambda self : None;
ofp_action_nw_addr_swigregister = _mul_nbapi.ofp_action_nw_addr_swigregister
ofp_action_nw_addr_swigregister(ofp_action_nw_addr)

class ofp_action_tp_port(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofp_action_tp_port, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofp_action_tp_port, name)
    __repr__ = _swig_repr
    __swig_setmethods__["type"] = _mul_nbapi.ofp_action_tp_port_type_set
    __swig_getmethods__["type"] = _mul_nbapi.ofp_action_tp_port_type_get
    if _newclass:type = _swig_property(_mul_nbapi.ofp_action_tp_port_type_get, _mul_nbapi.ofp_action_tp_port_type_set)
    __swig_setmethods__["len"] = _mul_nbapi.ofp_action_tp_port_len_set
    __swig_getmethods__["len"] = _mul_nbapi.ofp_action_tp_port_len_get
    if _newclass:len = _swig_property(_mul_nbapi.ofp_action_tp_port_len_get, _mul_nbapi.ofp_action_tp_port_len_set)
    __swig_setmethods__["tp_port"] = _mul_nbapi.ofp_action_tp_port_tp_port_set
    __swig_getmethods__["tp_port"] = _mul_nbapi.ofp_action_tp_port_tp_port_get
    if _newclass:tp_port = _swig_property(_mul_nbapi.ofp_action_tp_port_tp_port_get, _mul_nbapi.ofp_action_tp_port_tp_port_set)
    __swig_setmethods__["pad"] = _mul_nbapi.ofp_action_tp_port_pad_set
    __swig_getmethods__["pad"] = _mul_nbapi.ofp_action_tp_port_pad_get
    if _newclass:pad = _swig_property(_mul_nbapi.ofp_action_tp_port_pad_get, _mul_nbapi.ofp_action_tp_port_pad_set)
    def __init__(self): 
        this = _mul_nbapi.new_ofp_action_tp_port()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_ofp_action_tp_port
    __del__ = lambda self : None;
ofp_action_tp_port_swigregister = _mul_nbapi.ofp_action_tp_port_swigregister
ofp_action_tp_port_swigregister(ofp_action_tp_port)

class ofp_action_nw_tos(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofp_action_nw_tos, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofp_action_nw_tos, name)
    __repr__ = _swig_repr
    __swig_setmethods__["type"] = _mul_nbapi.ofp_action_nw_tos_type_set
    __swig_getmethods__["type"] = _mul_nbapi.ofp_action_nw_tos_type_get
    if _newclass:type = _swig_property(_mul_nbapi.ofp_action_nw_tos_type_get, _mul_nbapi.ofp_action_nw_tos_type_set)
    __swig_setmethods__["len"] = _mul_nbapi.ofp_action_nw_tos_len_set
    __swig_getmethods__["len"] = _mul_nbapi.ofp_action_nw_tos_len_get
    if _newclass:len = _swig_property(_mul_nbapi.ofp_action_nw_tos_len_get, _mul_nbapi.ofp_action_nw_tos_len_set)
    __swig_setmethods__["nw_tos"] = _mul_nbapi.ofp_action_nw_tos_nw_tos_set
    __swig_getmethods__["nw_tos"] = _mul_nbapi.ofp_action_nw_tos_nw_tos_get
    if _newclass:nw_tos = _swig_property(_mul_nbapi.ofp_action_nw_tos_nw_tos_get, _mul_nbapi.ofp_action_nw_tos_nw_tos_set)
    __swig_setmethods__["pad"] = _mul_nbapi.ofp_action_nw_tos_pad_set
    __swig_getmethods__["pad"] = _mul_nbapi.ofp_action_nw_tos_pad_get
    if _newclass:pad = _swig_property(_mul_nbapi.ofp_action_nw_tos_pad_get, _mul_nbapi.ofp_action_nw_tos_pad_set)
    def __init__(self): 
        this = _mul_nbapi.new_ofp_action_nw_tos()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_ofp_action_nw_tos
    __del__ = lambda self : None;
ofp_action_nw_tos_swigregister = _mul_nbapi.ofp_action_nw_tos_swigregister
ofp_action_nw_tos_swigregister(ofp_action_nw_tos)

class ofp_action_vendor_header(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofp_action_vendor_header, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofp_action_vendor_header, name)
    __repr__ = _swig_repr
    __swig_setmethods__["type"] = _mul_nbapi.ofp_action_vendor_header_type_set
    __swig_getmethods__["type"] = _mul_nbapi.ofp_action_vendor_header_type_get
    if _newclass:type = _swig_property(_mul_nbapi.ofp_action_vendor_header_type_get, _mul_nbapi.ofp_action_vendor_header_type_set)
    __swig_setmethods__["len"] = _mul_nbapi.ofp_action_vendor_header_len_set
    __swig_getmethods__["len"] = _mul_nbapi.ofp_action_vendor_header_len_get
    if _newclass:len = _swig_property(_mul_nbapi.ofp_action_vendor_header_len_get, _mul_nbapi.ofp_action_vendor_header_len_set)
    __swig_setmethods__["vendor"] = _mul_nbapi.ofp_action_vendor_header_vendor_set
    __swig_getmethods__["vendor"] = _mul_nbapi.ofp_action_vendor_header_vendor_get
    if _newclass:vendor = _swig_property(_mul_nbapi.ofp_action_vendor_header_vendor_get, _mul_nbapi.ofp_action_vendor_header_vendor_set)
    def __init__(self): 
        this = _mul_nbapi.new_ofp_action_vendor_header()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_ofp_action_vendor_header
    __del__ = lambda self : None;
ofp_action_vendor_header_swigregister = _mul_nbapi.ofp_action_vendor_header_swigregister
ofp_action_vendor_header_swigregister(ofp_action_vendor_header)

class ofp_packet_out(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofp_packet_out, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofp_packet_out, name)
    __repr__ = _swig_repr
    __swig_setmethods__["header"] = _mul_nbapi.ofp_packet_out_header_set
    __swig_getmethods__["header"] = _mul_nbapi.ofp_packet_out_header_get
    if _newclass:header = _swig_property(_mul_nbapi.ofp_packet_out_header_get, _mul_nbapi.ofp_packet_out_header_set)
    __swig_setmethods__["buffer_id"] = _mul_nbapi.ofp_packet_out_buffer_id_set
    __swig_getmethods__["buffer_id"] = _mul_nbapi.ofp_packet_out_buffer_id_get
    if _newclass:buffer_id = _swig_property(_mul_nbapi.ofp_packet_out_buffer_id_get, _mul_nbapi.ofp_packet_out_buffer_id_set)
    __swig_setmethods__["in_port"] = _mul_nbapi.ofp_packet_out_in_port_set
    __swig_getmethods__["in_port"] = _mul_nbapi.ofp_packet_out_in_port_get
    if _newclass:in_port = _swig_property(_mul_nbapi.ofp_packet_out_in_port_get, _mul_nbapi.ofp_packet_out_in_port_set)
    __swig_setmethods__["actions_len"] = _mul_nbapi.ofp_packet_out_actions_len_set
    __swig_getmethods__["actions_len"] = _mul_nbapi.ofp_packet_out_actions_len_get
    if _newclass:actions_len = _swig_property(_mul_nbapi.ofp_packet_out_actions_len_get, _mul_nbapi.ofp_packet_out_actions_len_set)
    __swig_setmethods__["actions"] = _mul_nbapi.ofp_packet_out_actions_set
    __swig_getmethods__["actions"] = _mul_nbapi.ofp_packet_out_actions_get
    if _newclass:actions = _swig_property(_mul_nbapi.ofp_packet_out_actions_get, _mul_nbapi.ofp_packet_out_actions_set)
    def __init__(self): 
        this = _mul_nbapi.new_ofp_packet_out()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_ofp_packet_out
    __del__ = lambda self : None;
ofp_packet_out_swigregister = _mul_nbapi.ofp_packet_out_swigregister
ofp_packet_out_swigregister(ofp_packet_out)

OFPFW_IN_PORT = _mul_nbapi.OFPFW_IN_PORT
OFPFW_DL_VLAN = _mul_nbapi.OFPFW_DL_VLAN
OFPFW_DL_SRC = _mul_nbapi.OFPFW_DL_SRC
OFPFW_DL_DST = _mul_nbapi.OFPFW_DL_DST
OFPFW_DL_TYPE = _mul_nbapi.OFPFW_DL_TYPE
OFPFW_NW_PROTO = _mul_nbapi.OFPFW_NW_PROTO
OFPFW_TP_SRC = _mul_nbapi.OFPFW_TP_SRC
OFPFW_TP_DST = _mul_nbapi.OFPFW_TP_DST
OFPFW_NW_SRC_SHIFT = _mul_nbapi.OFPFW_NW_SRC_SHIFT
OFPFW_NW_SRC_BITS = _mul_nbapi.OFPFW_NW_SRC_BITS
OFPFW_NW_SRC_MASK = _mul_nbapi.OFPFW_NW_SRC_MASK
OFPFW_NW_SRC_ALL = _mul_nbapi.OFPFW_NW_SRC_ALL
OFPFW_NW_DST_SHIFT = _mul_nbapi.OFPFW_NW_DST_SHIFT
OFPFW_NW_DST_BITS = _mul_nbapi.OFPFW_NW_DST_BITS
OFPFW_NW_DST_MASK = _mul_nbapi.OFPFW_NW_DST_MASK
OFPFW_NW_DST_ALL = _mul_nbapi.OFPFW_NW_DST_ALL
OFPFW_DL_VLAN_PCP = _mul_nbapi.OFPFW_DL_VLAN_PCP
OFPFW_NW_TOS = _mul_nbapi.OFPFW_NW_TOS
OFPFW_ALL = _mul_nbapi.OFPFW_ALL
OFP_DL_TYPE_ETH2_CUTOFF = _mul_nbapi.OFP_DL_TYPE_ETH2_CUTOFF
OFP_DL_TYPE_NOT_ETH_TYPE = _mul_nbapi.OFP_DL_TYPE_NOT_ETH_TYPE
class ofp_match(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofp_match, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofp_match, name)
    __repr__ = _swig_repr
    __swig_setmethods__["wildcards"] = _mul_nbapi.ofp_match_wildcards_set
    __swig_getmethods__["wildcards"] = _mul_nbapi.ofp_match_wildcards_get
    if _newclass:wildcards = _swig_property(_mul_nbapi.ofp_match_wildcards_get, _mul_nbapi.ofp_match_wildcards_set)
    __swig_setmethods__["in_port"] = _mul_nbapi.ofp_match_in_port_set
    __swig_getmethods__["in_port"] = _mul_nbapi.ofp_match_in_port_get
    if _newclass:in_port = _swig_property(_mul_nbapi.ofp_match_in_port_get, _mul_nbapi.ofp_match_in_port_set)
    __swig_setmethods__["dl_src"] = _mul_nbapi.ofp_match_dl_src_set
    __swig_getmethods__["dl_src"] = _mul_nbapi.ofp_match_dl_src_get
    if _newclass:dl_src = _swig_property(_mul_nbapi.ofp_match_dl_src_get, _mul_nbapi.ofp_match_dl_src_set)
    __swig_setmethods__["dl_dst"] = _mul_nbapi.ofp_match_dl_dst_set
    __swig_getmethods__["dl_dst"] = _mul_nbapi.ofp_match_dl_dst_get
    if _newclass:dl_dst = _swig_property(_mul_nbapi.ofp_match_dl_dst_get, _mul_nbapi.ofp_match_dl_dst_set)
    __swig_setmethods__["dl_vlan"] = _mul_nbapi.ofp_match_dl_vlan_set
    __swig_getmethods__["dl_vlan"] = _mul_nbapi.ofp_match_dl_vlan_get
    if _newclass:dl_vlan = _swig_property(_mul_nbapi.ofp_match_dl_vlan_get, _mul_nbapi.ofp_match_dl_vlan_set)
    __swig_setmethods__["dl_vlan_pcp"] = _mul_nbapi.ofp_match_dl_vlan_pcp_set
    __swig_getmethods__["dl_vlan_pcp"] = _mul_nbapi.ofp_match_dl_vlan_pcp_get
    if _newclass:dl_vlan_pcp = _swig_property(_mul_nbapi.ofp_match_dl_vlan_pcp_get, _mul_nbapi.ofp_match_dl_vlan_pcp_set)
    __swig_setmethods__["pad1"] = _mul_nbapi.ofp_match_pad1_set
    __swig_getmethods__["pad1"] = _mul_nbapi.ofp_match_pad1_get
    if _newclass:pad1 = _swig_property(_mul_nbapi.ofp_match_pad1_get, _mul_nbapi.ofp_match_pad1_set)
    __swig_setmethods__["dl_type"] = _mul_nbapi.ofp_match_dl_type_set
    __swig_getmethods__["dl_type"] = _mul_nbapi.ofp_match_dl_type_get
    if _newclass:dl_type = _swig_property(_mul_nbapi.ofp_match_dl_type_get, _mul_nbapi.ofp_match_dl_type_set)
    __swig_setmethods__["nw_tos"] = _mul_nbapi.ofp_match_nw_tos_set
    __swig_getmethods__["nw_tos"] = _mul_nbapi.ofp_match_nw_tos_get
    if _newclass:nw_tos = _swig_property(_mul_nbapi.ofp_match_nw_tos_get, _mul_nbapi.ofp_match_nw_tos_set)
    __swig_setmethods__["nw_proto"] = _mul_nbapi.ofp_match_nw_proto_set
    __swig_getmethods__["nw_proto"] = _mul_nbapi.ofp_match_nw_proto_get
    if _newclass:nw_proto = _swig_property(_mul_nbapi.ofp_match_nw_proto_get, _mul_nbapi.ofp_match_nw_proto_set)
    __swig_setmethods__["pad2"] = _mul_nbapi.ofp_match_pad2_set
    __swig_getmethods__["pad2"] = _mul_nbapi.ofp_match_pad2_get
    if _newclass:pad2 = _swig_property(_mul_nbapi.ofp_match_pad2_get, _mul_nbapi.ofp_match_pad2_set)
    __swig_setmethods__["nw_src"] = _mul_nbapi.ofp_match_nw_src_set
    __swig_getmethods__["nw_src"] = _mul_nbapi.ofp_match_nw_src_get
    if _newclass:nw_src = _swig_property(_mul_nbapi.ofp_match_nw_src_get, _mul_nbapi.ofp_match_nw_src_set)
    __swig_setmethods__["nw_dst"] = _mul_nbapi.ofp_match_nw_dst_set
    __swig_getmethods__["nw_dst"] = _mul_nbapi.ofp_match_nw_dst_get
    if _newclass:nw_dst = _swig_property(_mul_nbapi.ofp_match_nw_dst_get, _mul_nbapi.ofp_match_nw_dst_set)
    __swig_setmethods__["tp_src"] = _mul_nbapi.ofp_match_tp_src_set
    __swig_getmethods__["tp_src"] = _mul_nbapi.ofp_match_tp_src_get
    if _newclass:tp_src = _swig_property(_mul_nbapi.ofp_match_tp_src_get, _mul_nbapi.ofp_match_tp_src_set)
    __swig_setmethods__["tp_dst"] = _mul_nbapi.ofp_match_tp_dst_set
    __swig_getmethods__["tp_dst"] = _mul_nbapi.ofp_match_tp_dst_get
    if _newclass:tp_dst = _swig_property(_mul_nbapi.ofp_match_tp_dst_get, _mul_nbapi.ofp_match_tp_dst_set)
    def __init__(self): 
        this = _mul_nbapi.new_ofp_match()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_ofp_match
    __del__ = lambda self : None;
ofp_match_swigregister = _mul_nbapi.ofp_match_swigregister
ofp_match_swigregister(ofp_match)

OFP_FLOW_PERMANENT = _mul_nbapi.OFP_FLOW_PERMANENT
OFP_DEFAULT_PRIORITY = _mul_nbapi.OFP_DEFAULT_PRIORITY
OFPFF_SEND_FLOW_REM = _mul_nbapi.OFPFF_SEND_FLOW_REM
OFPFF_CHECK_OVERLAP = _mul_nbapi.OFPFF_CHECK_OVERLAP
OFPFF_EMERG = _mul_nbapi.OFPFF_EMERG
class ofp_flow_mod(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofp_flow_mod, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofp_flow_mod, name)
    __repr__ = _swig_repr
    __swig_setmethods__["header"] = _mul_nbapi.ofp_flow_mod_header_set
    __swig_getmethods__["header"] = _mul_nbapi.ofp_flow_mod_header_get
    if _newclass:header = _swig_property(_mul_nbapi.ofp_flow_mod_header_get, _mul_nbapi.ofp_flow_mod_header_set)
    __swig_setmethods__["match"] = _mul_nbapi.ofp_flow_mod_match_set
    __swig_getmethods__["match"] = _mul_nbapi.ofp_flow_mod_match_get
    if _newclass:match = _swig_property(_mul_nbapi.ofp_flow_mod_match_get, _mul_nbapi.ofp_flow_mod_match_set)
    __swig_setmethods__["cookie"] = _mul_nbapi.ofp_flow_mod_cookie_set
    __swig_getmethods__["cookie"] = _mul_nbapi.ofp_flow_mod_cookie_get
    if _newclass:cookie = _swig_property(_mul_nbapi.ofp_flow_mod_cookie_get, _mul_nbapi.ofp_flow_mod_cookie_set)
    __swig_setmethods__["command"] = _mul_nbapi.ofp_flow_mod_command_set
    __swig_getmethods__["command"] = _mul_nbapi.ofp_flow_mod_command_get
    if _newclass:command = _swig_property(_mul_nbapi.ofp_flow_mod_command_get, _mul_nbapi.ofp_flow_mod_command_set)
    __swig_setmethods__["idle_timeout"] = _mul_nbapi.ofp_flow_mod_idle_timeout_set
    __swig_getmethods__["idle_timeout"] = _mul_nbapi.ofp_flow_mod_idle_timeout_get
    if _newclass:idle_timeout = _swig_property(_mul_nbapi.ofp_flow_mod_idle_timeout_get, _mul_nbapi.ofp_flow_mod_idle_timeout_set)
    __swig_setmethods__["hard_timeout"] = _mul_nbapi.ofp_flow_mod_hard_timeout_set
    __swig_getmethods__["hard_timeout"] = _mul_nbapi.ofp_flow_mod_hard_timeout_get
    if _newclass:hard_timeout = _swig_property(_mul_nbapi.ofp_flow_mod_hard_timeout_get, _mul_nbapi.ofp_flow_mod_hard_timeout_set)
    __swig_setmethods__["priority"] = _mul_nbapi.ofp_flow_mod_priority_set
    __swig_getmethods__["priority"] = _mul_nbapi.ofp_flow_mod_priority_get
    if _newclass:priority = _swig_property(_mul_nbapi.ofp_flow_mod_priority_get, _mul_nbapi.ofp_flow_mod_priority_set)
    __swig_setmethods__["buffer_id"] = _mul_nbapi.ofp_flow_mod_buffer_id_set
    __swig_getmethods__["buffer_id"] = _mul_nbapi.ofp_flow_mod_buffer_id_get
    if _newclass:buffer_id = _swig_property(_mul_nbapi.ofp_flow_mod_buffer_id_get, _mul_nbapi.ofp_flow_mod_buffer_id_set)
    __swig_setmethods__["out_port"] = _mul_nbapi.ofp_flow_mod_out_port_set
    __swig_getmethods__["out_port"] = _mul_nbapi.ofp_flow_mod_out_port_get
    if _newclass:out_port = _swig_property(_mul_nbapi.ofp_flow_mod_out_port_get, _mul_nbapi.ofp_flow_mod_out_port_set)
    __swig_setmethods__["flags"] = _mul_nbapi.ofp_flow_mod_flags_set
    __swig_getmethods__["flags"] = _mul_nbapi.ofp_flow_mod_flags_get
    if _newclass:flags = _swig_property(_mul_nbapi.ofp_flow_mod_flags_get, _mul_nbapi.ofp_flow_mod_flags_set)
    __swig_setmethods__["actions"] = _mul_nbapi.ofp_flow_mod_actions_set
    __swig_getmethods__["actions"] = _mul_nbapi.ofp_flow_mod_actions_get
    if _newclass:actions = _swig_property(_mul_nbapi.ofp_flow_mod_actions_get, _mul_nbapi.ofp_flow_mod_actions_set)
    def __init__(self): 
        this = _mul_nbapi.new_ofp_flow_mod()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_ofp_flow_mod
    __del__ = lambda self : None;
ofp_flow_mod_swigregister = _mul_nbapi.ofp_flow_mod_swigregister
ofp_flow_mod_swigregister(ofp_flow_mod)

class ofp_flow_removed(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofp_flow_removed, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofp_flow_removed, name)
    __repr__ = _swig_repr
    __swig_setmethods__["header"] = _mul_nbapi.ofp_flow_removed_header_set
    __swig_getmethods__["header"] = _mul_nbapi.ofp_flow_removed_header_get
    if _newclass:header = _swig_property(_mul_nbapi.ofp_flow_removed_header_get, _mul_nbapi.ofp_flow_removed_header_set)
    __swig_setmethods__["match"] = _mul_nbapi.ofp_flow_removed_match_set
    __swig_getmethods__["match"] = _mul_nbapi.ofp_flow_removed_match_get
    if _newclass:match = _swig_property(_mul_nbapi.ofp_flow_removed_match_get, _mul_nbapi.ofp_flow_removed_match_set)
    __swig_setmethods__["cookie"] = _mul_nbapi.ofp_flow_removed_cookie_set
    __swig_getmethods__["cookie"] = _mul_nbapi.ofp_flow_removed_cookie_get
    if _newclass:cookie = _swig_property(_mul_nbapi.ofp_flow_removed_cookie_get, _mul_nbapi.ofp_flow_removed_cookie_set)
    __swig_setmethods__["priority"] = _mul_nbapi.ofp_flow_removed_priority_set
    __swig_getmethods__["priority"] = _mul_nbapi.ofp_flow_removed_priority_get
    if _newclass:priority = _swig_property(_mul_nbapi.ofp_flow_removed_priority_get, _mul_nbapi.ofp_flow_removed_priority_set)
    __swig_setmethods__["reason"] = _mul_nbapi.ofp_flow_removed_reason_set
    __swig_getmethods__["reason"] = _mul_nbapi.ofp_flow_removed_reason_get
    if _newclass:reason = _swig_property(_mul_nbapi.ofp_flow_removed_reason_get, _mul_nbapi.ofp_flow_removed_reason_set)
    __swig_setmethods__["pad"] = _mul_nbapi.ofp_flow_removed_pad_set
    __swig_getmethods__["pad"] = _mul_nbapi.ofp_flow_removed_pad_get
    if _newclass:pad = _swig_property(_mul_nbapi.ofp_flow_removed_pad_get, _mul_nbapi.ofp_flow_removed_pad_set)
    __swig_setmethods__["duration_sec"] = _mul_nbapi.ofp_flow_removed_duration_sec_set
    __swig_getmethods__["duration_sec"] = _mul_nbapi.ofp_flow_removed_duration_sec_get
    if _newclass:duration_sec = _swig_property(_mul_nbapi.ofp_flow_removed_duration_sec_get, _mul_nbapi.ofp_flow_removed_duration_sec_set)
    __swig_setmethods__["duration_nsec"] = _mul_nbapi.ofp_flow_removed_duration_nsec_set
    __swig_getmethods__["duration_nsec"] = _mul_nbapi.ofp_flow_removed_duration_nsec_get
    if _newclass:duration_nsec = _swig_property(_mul_nbapi.ofp_flow_removed_duration_nsec_get, _mul_nbapi.ofp_flow_removed_duration_nsec_set)
    __swig_setmethods__["idle_timeout"] = _mul_nbapi.ofp_flow_removed_idle_timeout_set
    __swig_getmethods__["idle_timeout"] = _mul_nbapi.ofp_flow_removed_idle_timeout_get
    if _newclass:idle_timeout = _swig_property(_mul_nbapi.ofp_flow_removed_idle_timeout_get, _mul_nbapi.ofp_flow_removed_idle_timeout_set)
    __swig_setmethods__["pad2"] = _mul_nbapi.ofp_flow_removed_pad2_set
    __swig_getmethods__["pad2"] = _mul_nbapi.ofp_flow_removed_pad2_get
    if _newclass:pad2 = _swig_property(_mul_nbapi.ofp_flow_removed_pad2_get, _mul_nbapi.ofp_flow_removed_pad2_set)
    __swig_setmethods__["packet_count"] = _mul_nbapi.ofp_flow_removed_packet_count_set
    __swig_getmethods__["packet_count"] = _mul_nbapi.ofp_flow_removed_packet_count_get
    if _newclass:packet_count = _swig_property(_mul_nbapi.ofp_flow_removed_packet_count_get, _mul_nbapi.ofp_flow_removed_packet_count_set)
    __swig_setmethods__["byte_count"] = _mul_nbapi.ofp_flow_removed_byte_count_set
    __swig_getmethods__["byte_count"] = _mul_nbapi.ofp_flow_removed_byte_count_get
    if _newclass:byte_count = _swig_property(_mul_nbapi.ofp_flow_removed_byte_count_get, _mul_nbapi.ofp_flow_removed_byte_count_set)
    def __init__(self): 
        this = _mul_nbapi.new_ofp_flow_removed()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_ofp_flow_removed
    __del__ = lambda self : None;
ofp_flow_removed_swigregister = _mul_nbapi.ofp_flow_removed_swigregister
ofp_flow_removed_swigregister(ofp_flow_removed)

OFPET_HELLO_FAILED = _mul_nbapi.OFPET_HELLO_FAILED
OFPET_BAD_REQUEST = _mul_nbapi.OFPET_BAD_REQUEST
OFPET_BAD_ACTION = _mul_nbapi.OFPET_BAD_ACTION
OFPET_FLOW_MOD_FAILED = _mul_nbapi.OFPET_FLOW_MOD_FAILED
OFPET_PORT_MOD_FAILED = _mul_nbapi.OFPET_PORT_MOD_FAILED
OFPET_QUEUE_OP_FAILED = _mul_nbapi.OFPET_QUEUE_OP_FAILED
OFPBRC_BAD_VERSION = _mul_nbapi.OFPBRC_BAD_VERSION
OFPBRC_BAD_TYPE = _mul_nbapi.OFPBRC_BAD_TYPE
OFPBRC_BAD_STAT = _mul_nbapi.OFPBRC_BAD_STAT
OFPBRC_BAD_VENDOR = _mul_nbapi.OFPBRC_BAD_VENDOR
OFPBRC_BAD_SUBTYPE = _mul_nbapi.OFPBRC_BAD_SUBTYPE
OFPBRC_EPERM = _mul_nbapi.OFPBRC_EPERM
OFPBRC_BAD_LEN = _mul_nbapi.OFPBRC_BAD_LEN
OFPBRC_BUFFER_EMPTY = _mul_nbapi.OFPBRC_BUFFER_EMPTY
OFPBRC_BUFFER_UNKNOWN = _mul_nbapi.OFPBRC_BUFFER_UNKNOWN
OFPBAC_BAD_TYPE = _mul_nbapi.OFPBAC_BAD_TYPE
OFPBAC_BAD_LEN = _mul_nbapi.OFPBAC_BAD_LEN
OFPBAC_BAD_VENDOR = _mul_nbapi.OFPBAC_BAD_VENDOR
OFPBAC_BAD_VENDOR_TYPE = _mul_nbapi.OFPBAC_BAD_VENDOR_TYPE
OFPBAC_BAD_OUT_PORT = _mul_nbapi.OFPBAC_BAD_OUT_PORT
OFPBAC_BAD_ARGUMENT = _mul_nbapi.OFPBAC_BAD_ARGUMENT
OFPBAC_EPERM = _mul_nbapi.OFPBAC_EPERM
OFPBAC_TOO_MANY = _mul_nbapi.OFPBAC_TOO_MANY
OFPBAC_BAD_QUEUE = _mul_nbapi.OFPBAC_BAD_QUEUE
OFPFMFC_ALL_TABLES_FULL = _mul_nbapi.OFPFMFC_ALL_TABLES_FULL
OFPFMFC_OVERLAP = _mul_nbapi.OFPFMFC_OVERLAP
OFPFMFC_EPERM = _mul_nbapi.OFPFMFC_EPERM
OFPFMFC_BAD_EMERG_TIMEOUT = _mul_nbapi.OFPFMFC_BAD_EMERG_TIMEOUT
OFPFMFC_BAD_COMMAND = _mul_nbapi.OFPFMFC_BAD_COMMAND
OFPFMFC_UNSUPPORTED = _mul_nbapi.OFPFMFC_UNSUPPORTED
OFPPMFC_BAD_PORT = _mul_nbapi.OFPPMFC_BAD_PORT
OFPPMFC_BAD_HW_ADDR = _mul_nbapi.OFPPMFC_BAD_HW_ADDR
OFPQOFC_BAD_PORT = _mul_nbapi.OFPQOFC_BAD_PORT
OFPQOFC_BAD_QUEUE = _mul_nbapi.OFPQOFC_BAD_QUEUE
OFPQOFC_EPERM = _mul_nbapi.OFPQOFC_EPERM
OFPST_DESC = _mul_nbapi.OFPST_DESC
OFPST_FLOW = _mul_nbapi.OFPST_FLOW
OFPST_AGGREGATE = _mul_nbapi.OFPST_AGGREGATE
OFPST_TABLE = _mul_nbapi.OFPST_TABLE
OFPST_PORT = _mul_nbapi.OFPST_PORT
OFPST_QUEUE = _mul_nbapi.OFPST_QUEUE
OFPST_VENDOR = _mul_nbapi.OFPST_VENDOR
class ofp_stats_request(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofp_stats_request, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofp_stats_request, name)
    __repr__ = _swig_repr
    __swig_setmethods__["header"] = _mul_nbapi.ofp_stats_request_header_set
    __swig_getmethods__["header"] = _mul_nbapi.ofp_stats_request_header_get
    if _newclass:header = _swig_property(_mul_nbapi.ofp_stats_request_header_get, _mul_nbapi.ofp_stats_request_header_set)
    __swig_setmethods__["type"] = _mul_nbapi.ofp_stats_request_type_set
    __swig_getmethods__["type"] = _mul_nbapi.ofp_stats_request_type_get
    if _newclass:type = _swig_property(_mul_nbapi.ofp_stats_request_type_get, _mul_nbapi.ofp_stats_request_type_set)
    __swig_setmethods__["flags"] = _mul_nbapi.ofp_stats_request_flags_set
    __swig_getmethods__["flags"] = _mul_nbapi.ofp_stats_request_flags_get
    if _newclass:flags = _swig_property(_mul_nbapi.ofp_stats_request_flags_get, _mul_nbapi.ofp_stats_request_flags_set)
    __swig_setmethods__["body"] = _mul_nbapi.ofp_stats_request_body_set
    __swig_getmethods__["body"] = _mul_nbapi.ofp_stats_request_body_get
    if _newclass:body = _swig_property(_mul_nbapi.ofp_stats_request_body_get, _mul_nbapi.ofp_stats_request_body_set)
    def __init__(self): 
        this = _mul_nbapi.new_ofp_stats_request()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_ofp_stats_request
    __del__ = lambda self : None;
ofp_stats_request_swigregister = _mul_nbapi.ofp_stats_request_swigregister
ofp_stats_request_swigregister(ofp_stats_request)

OFPSF_REPLY_MORE = _mul_nbapi.OFPSF_REPLY_MORE
class ofp_stats_reply(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofp_stats_reply, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofp_stats_reply, name)
    __repr__ = _swig_repr
    __swig_setmethods__["header"] = _mul_nbapi.ofp_stats_reply_header_set
    __swig_getmethods__["header"] = _mul_nbapi.ofp_stats_reply_header_get
    if _newclass:header = _swig_property(_mul_nbapi.ofp_stats_reply_header_get, _mul_nbapi.ofp_stats_reply_header_set)
    __swig_setmethods__["type"] = _mul_nbapi.ofp_stats_reply_type_set
    __swig_getmethods__["type"] = _mul_nbapi.ofp_stats_reply_type_get
    if _newclass:type = _swig_property(_mul_nbapi.ofp_stats_reply_type_get, _mul_nbapi.ofp_stats_reply_type_set)
    __swig_setmethods__["flags"] = _mul_nbapi.ofp_stats_reply_flags_set
    __swig_getmethods__["flags"] = _mul_nbapi.ofp_stats_reply_flags_get
    if _newclass:flags = _swig_property(_mul_nbapi.ofp_stats_reply_flags_get, _mul_nbapi.ofp_stats_reply_flags_set)
    __swig_setmethods__["body"] = _mul_nbapi.ofp_stats_reply_body_set
    __swig_getmethods__["body"] = _mul_nbapi.ofp_stats_reply_body_get
    if _newclass:body = _swig_property(_mul_nbapi.ofp_stats_reply_body_get, _mul_nbapi.ofp_stats_reply_body_set)
    def __init__(self): 
        this = _mul_nbapi.new_ofp_stats_reply()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_ofp_stats_reply
    __del__ = lambda self : None;
ofp_stats_reply_swigregister = _mul_nbapi.ofp_stats_reply_swigregister
ofp_stats_reply_swigregister(ofp_stats_reply)

class ofp_flow_stats_request(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofp_flow_stats_request, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofp_flow_stats_request, name)
    __repr__ = _swig_repr
    __swig_setmethods__["match"] = _mul_nbapi.ofp_flow_stats_request_match_set
    __swig_getmethods__["match"] = _mul_nbapi.ofp_flow_stats_request_match_get
    if _newclass:match = _swig_property(_mul_nbapi.ofp_flow_stats_request_match_get, _mul_nbapi.ofp_flow_stats_request_match_set)
    __swig_setmethods__["table_id"] = _mul_nbapi.ofp_flow_stats_request_table_id_set
    __swig_getmethods__["table_id"] = _mul_nbapi.ofp_flow_stats_request_table_id_get
    if _newclass:table_id = _swig_property(_mul_nbapi.ofp_flow_stats_request_table_id_get, _mul_nbapi.ofp_flow_stats_request_table_id_set)
    __swig_setmethods__["pad"] = _mul_nbapi.ofp_flow_stats_request_pad_set
    __swig_getmethods__["pad"] = _mul_nbapi.ofp_flow_stats_request_pad_get
    if _newclass:pad = _swig_property(_mul_nbapi.ofp_flow_stats_request_pad_get, _mul_nbapi.ofp_flow_stats_request_pad_set)
    __swig_setmethods__["out_port"] = _mul_nbapi.ofp_flow_stats_request_out_port_set
    __swig_getmethods__["out_port"] = _mul_nbapi.ofp_flow_stats_request_out_port_get
    if _newclass:out_port = _swig_property(_mul_nbapi.ofp_flow_stats_request_out_port_get, _mul_nbapi.ofp_flow_stats_request_out_port_set)
    def __init__(self): 
        this = _mul_nbapi.new_ofp_flow_stats_request()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_ofp_flow_stats_request
    __del__ = lambda self : None;
ofp_flow_stats_request_swigregister = _mul_nbapi.ofp_flow_stats_request_swigregister
ofp_flow_stats_request_swigregister(ofp_flow_stats_request)

class ofp_flow_stats(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofp_flow_stats, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofp_flow_stats, name)
    __repr__ = _swig_repr
    __swig_setmethods__["length"] = _mul_nbapi.ofp_flow_stats_length_set
    __swig_getmethods__["length"] = _mul_nbapi.ofp_flow_stats_length_get
    if _newclass:length = _swig_property(_mul_nbapi.ofp_flow_stats_length_get, _mul_nbapi.ofp_flow_stats_length_set)
    __swig_setmethods__["table_id"] = _mul_nbapi.ofp_flow_stats_table_id_set
    __swig_getmethods__["table_id"] = _mul_nbapi.ofp_flow_stats_table_id_get
    if _newclass:table_id = _swig_property(_mul_nbapi.ofp_flow_stats_table_id_get, _mul_nbapi.ofp_flow_stats_table_id_set)
    __swig_setmethods__["pad"] = _mul_nbapi.ofp_flow_stats_pad_set
    __swig_getmethods__["pad"] = _mul_nbapi.ofp_flow_stats_pad_get
    if _newclass:pad = _swig_property(_mul_nbapi.ofp_flow_stats_pad_get, _mul_nbapi.ofp_flow_stats_pad_set)
    __swig_setmethods__["match"] = _mul_nbapi.ofp_flow_stats_match_set
    __swig_getmethods__["match"] = _mul_nbapi.ofp_flow_stats_match_get
    if _newclass:match = _swig_property(_mul_nbapi.ofp_flow_stats_match_get, _mul_nbapi.ofp_flow_stats_match_set)
    __swig_setmethods__["duration_sec"] = _mul_nbapi.ofp_flow_stats_duration_sec_set
    __swig_getmethods__["duration_sec"] = _mul_nbapi.ofp_flow_stats_duration_sec_get
    if _newclass:duration_sec = _swig_property(_mul_nbapi.ofp_flow_stats_duration_sec_get, _mul_nbapi.ofp_flow_stats_duration_sec_set)
    __swig_setmethods__["duration_nsec"] = _mul_nbapi.ofp_flow_stats_duration_nsec_set
    __swig_getmethods__["duration_nsec"] = _mul_nbapi.ofp_flow_stats_duration_nsec_get
    if _newclass:duration_nsec = _swig_property(_mul_nbapi.ofp_flow_stats_duration_nsec_get, _mul_nbapi.ofp_flow_stats_duration_nsec_set)
    __swig_setmethods__["priority"] = _mul_nbapi.ofp_flow_stats_priority_set
    __swig_getmethods__["priority"] = _mul_nbapi.ofp_flow_stats_priority_get
    if _newclass:priority = _swig_property(_mul_nbapi.ofp_flow_stats_priority_get, _mul_nbapi.ofp_flow_stats_priority_set)
    __swig_setmethods__["idle_timeout"] = _mul_nbapi.ofp_flow_stats_idle_timeout_set
    __swig_getmethods__["idle_timeout"] = _mul_nbapi.ofp_flow_stats_idle_timeout_get
    if _newclass:idle_timeout = _swig_property(_mul_nbapi.ofp_flow_stats_idle_timeout_get, _mul_nbapi.ofp_flow_stats_idle_timeout_set)
    __swig_setmethods__["hard_timeout"] = _mul_nbapi.ofp_flow_stats_hard_timeout_set
    __swig_getmethods__["hard_timeout"] = _mul_nbapi.ofp_flow_stats_hard_timeout_get
    if _newclass:hard_timeout = _swig_property(_mul_nbapi.ofp_flow_stats_hard_timeout_get, _mul_nbapi.ofp_flow_stats_hard_timeout_set)
    __swig_setmethods__["pad2"] = _mul_nbapi.ofp_flow_stats_pad2_set
    __swig_getmethods__["pad2"] = _mul_nbapi.ofp_flow_stats_pad2_get
    if _newclass:pad2 = _swig_property(_mul_nbapi.ofp_flow_stats_pad2_get, _mul_nbapi.ofp_flow_stats_pad2_set)
    __swig_setmethods__["cookie"] = _mul_nbapi.ofp_flow_stats_cookie_set
    __swig_getmethods__["cookie"] = _mul_nbapi.ofp_flow_stats_cookie_get
    if _newclass:cookie = _swig_property(_mul_nbapi.ofp_flow_stats_cookie_get, _mul_nbapi.ofp_flow_stats_cookie_set)
    __swig_setmethods__["packet_count"] = _mul_nbapi.ofp_flow_stats_packet_count_set
    __swig_getmethods__["packet_count"] = _mul_nbapi.ofp_flow_stats_packet_count_get
    if _newclass:packet_count = _swig_property(_mul_nbapi.ofp_flow_stats_packet_count_get, _mul_nbapi.ofp_flow_stats_packet_count_set)
    __swig_setmethods__["byte_count"] = _mul_nbapi.ofp_flow_stats_byte_count_set
    __swig_getmethods__["byte_count"] = _mul_nbapi.ofp_flow_stats_byte_count_get
    if _newclass:byte_count = _swig_property(_mul_nbapi.ofp_flow_stats_byte_count_get, _mul_nbapi.ofp_flow_stats_byte_count_set)
    __swig_setmethods__["actions"] = _mul_nbapi.ofp_flow_stats_actions_set
    __swig_getmethods__["actions"] = _mul_nbapi.ofp_flow_stats_actions_get
    if _newclass:actions = _swig_property(_mul_nbapi.ofp_flow_stats_actions_get, _mul_nbapi.ofp_flow_stats_actions_set)
    def __init__(self): 
        this = _mul_nbapi.new_ofp_flow_stats()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_ofp_flow_stats
    __del__ = lambda self : None;
ofp_flow_stats_swigregister = _mul_nbapi.ofp_flow_stats_swigregister
ofp_flow_stats_swigregister(ofp_flow_stats)

class ofp_aggregate_stats_request(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofp_aggregate_stats_request, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofp_aggregate_stats_request, name)
    __repr__ = _swig_repr
    __swig_setmethods__["match"] = _mul_nbapi.ofp_aggregate_stats_request_match_set
    __swig_getmethods__["match"] = _mul_nbapi.ofp_aggregate_stats_request_match_get
    if _newclass:match = _swig_property(_mul_nbapi.ofp_aggregate_stats_request_match_get, _mul_nbapi.ofp_aggregate_stats_request_match_set)
    __swig_setmethods__["table_id"] = _mul_nbapi.ofp_aggregate_stats_request_table_id_set
    __swig_getmethods__["table_id"] = _mul_nbapi.ofp_aggregate_stats_request_table_id_get
    if _newclass:table_id = _swig_property(_mul_nbapi.ofp_aggregate_stats_request_table_id_get, _mul_nbapi.ofp_aggregate_stats_request_table_id_set)
    __swig_setmethods__["pad"] = _mul_nbapi.ofp_aggregate_stats_request_pad_set
    __swig_getmethods__["pad"] = _mul_nbapi.ofp_aggregate_stats_request_pad_get
    if _newclass:pad = _swig_property(_mul_nbapi.ofp_aggregate_stats_request_pad_get, _mul_nbapi.ofp_aggregate_stats_request_pad_set)
    __swig_setmethods__["out_port"] = _mul_nbapi.ofp_aggregate_stats_request_out_port_set
    __swig_getmethods__["out_port"] = _mul_nbapi.ofp_aggregate_stats_request_out_port_get
    if _newclass:out_port = _swig_property(_mul_nbapi.ofp_aggregate_stats_request_out_port_get, _mul_nbapi.ofp_aggregate_stats_request_out_port_set)
    def __init__(self): 
        this = _mul_nbapi.new_ofp_aggregate_stats_request()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_ofp_aggregate_stats_request
    __del__ = lambda self : None;
ofp_aggregate_stats_request_swigregister = _mul_nbapi.ofp_aggregate_stats_request_swigregister
ofp_aggregate_stats_request_swigregister(ofp_aggregate_stats_request)

class ofp_aggregate_stats_reply(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofp_aggregate_stats_reply, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofp_aggregate_stats_reply, name)
    __repr__ = _swig_repr
    __swig_setmethods__["packet_count"] = _mul_nbapi.ofp_aggregate_stats_reply_packet_count_set
    __swig_getmethods__["packet_count"] = _mul_nbapi.ofp_aggregate_stats_reply_packet_count_get
    if _newclass:packet_count = _swig_property(_mul_nbapi.ofp_aggregate_stats_reply_packet_count_get, _mul_nbapi.ofp_aggregate_stats_reply_packet_count_set)
    __swig_setmethods__["byte_count"] = _mul_nbapi.ofp_aggregate_stats_reply_byte_count_set
    __swig_getmethods__["byte_count"] = _mul_nbapi.ofp_aggregate_stats_reply_byte_count_get
    if _newclass:byte_count = _swig_property(_mul_nbapi.ofp_aggregate_stats_reply_byte_count_get, _mul_nbapi.ofp_aggregate_stats_reply_byte_count_set)
    __swig_setmethods__["flow_count"] = _mul_nbapi.ofp_aggregate_stats_reply_flow_count_set
    __swig_getmethods__["flow_count"] = _mul_nbapi.ofp_aggregate_stats_reply_flow_count_get
    if _newclass:flow_count = _swig_property(_mul_nbapi.ofp_aggregate_stats_reply_flow_count_get, _mul_nbapi.ofp_aggregate_stats_reply_flow_count_set)
    __swig_setmethods__["pad"] = _mul_nbapi.ofp_aggregate_stats_reply_pad_set
    __swig_getmethods__["pad"] = _mul_nbapi.ofp_aggregate_stats_reply_pad_get
    if _newclass:pad = _swig_property(_mul_nbapi.ofp_aggregate_stats_reply_pad_get, _mul_nbapi.ofp_aggregate_stats_reply_pad_set)
    def __init__(self): 
        this = _mul_nbapi.new_ofp_aggregate_stats_reply()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_ofp_aggregate_stats_reply
    __del__ = lambda self : None;
ofp_aggregate_stats_reply_swigregister = _mul_nbapi.ofp_aggregate_stats_reply_swigregister
ofp_aggregate_stats_reply_swigregister(ofp_aggregate_stats_reply)

class ofp_table_stats(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofp_table_stats, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofp_table_stats, name)
    __repr__ = _swig_repr
    __swig_setmethods__["table_id"] = _mul_nbapi.ofp_table_stats_table_id_set
    __swig_getmethods__["table_id"] = _mul_nbapi.ofp_table_stats_table_id_get
    if _newclass:table_id = _swig_property(_mul_nbapi.ofp_table_stats_table_id_get, _mul_nbapi.ofp_table_stats_table_id_set)
    __swig_setmethods__["pad"] = _mul_nbapi.ofp_table_stats_pad_set
    __swig_getmethods__["pad"] = _mul_nbapi.ofp_table_stats_pad_get
    if _newclass:pad = _swig_property(_mul_nbapi.ofp_table_stats_pad_get, _mul_nbapi.ofp_table_stats_pad_set)
    __swig_setmethods__["name"] = _mul_nbapi.ofp_table_stats_name_set
    __swig_getmethods__["name"] = _mul_nbapi.ofp_table_stats_name_get
    if _newclass:name = _swig_property(_mul_nbapi.ofp_table_stats_name_get, _mul_nbapi.ofp_table_stats_name_set)
    __swig_setmethods__["wildcards"] = _mul_nbapi.ofp_table_stats_wildcards_set
    __swig_getmethods__["wildcards"] = _mul_nbapi.ofp_table_stats_wildcards_get
    if _newclass:wildcards = _swig_property(_mul_nbapi.ofp_table_stats_wildcards_get, _mul_nbapi.ofp_table_stats_wildcards_set)
    __swig_setmethods__["max_entries"] = _mul_nbapi.ofp_table_stats_max_entries_set
    __swig_getmethods__["max_entries"] = _mul_nbapi.ofp_table_stats_max_entries_get
    if _newclass:max_entries = _swig_property(_mul_nbapi.ofp_table_stats_max_entries_get, _mul_nbapi.ofp_table_stats_max_entries_set)
    __swig_setmethods__["active_count"] = _mul_nbapi.ofp_table_stats_active_count_set
    __swig_getmethods__["active_count"] = _mul_nbapi.ofp_table_stats_active_count_get
    if _newclass:active_count = _swig_property(_mul_nbapi.ofp_table_stats_active_count_get, _mul_nbapi.ofp_table_stats_active_count_set)
    __swig_setmethods__["lookup_count"] = _mul_nbapi.ofp_table_stats_lookup_count_set
    __swig_getmethods__["lookup_count"] = _mul_nbapi.ofp_table_stats_lookup_count_get
    if _newclass:lookup_count = _swig_property(_mul_nbapi.ofp_table_stats_lookup_count_get, _mul_nbapi.ofp_table_stats_lookup_count_set)
    __swig_setmethods__["matched_count"] = _mul_nbapi.ofp_table_stats_matched_count_set
    __swig_getmethods__["matched_count"] = _mul_nbapi.ofp_table_stats_matched_count_get
    if _newclass:matched_count = _swig_property(_mul_nbapi.ofp_table_stats_matched_count_get, _mul_nbapi.ofp_table_stats_matched_count_set)
    def __init__(self): 
        this = _mul_nbapi.new_ofp_table_stats()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_ofp_table_stats
    __del__ = lambda self : None;
ofp_table_stats_swigregister = _mul_nbapi.ofp_table_stats_swigregister
ofp_table_stats_swigregister(ofp_table_stats)

class ofp_port_stats_request(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofp_port_stats_request, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofp_port_stats_request, name)
    __repr__ = _swig_repr
    __swig_setmethods__["port_no"] = _mul_nbapi.ofp_port_stats_request_port_no_set
    __swig_getmethods__["port_no"] = _mul_nbapi.ofp_port_stats_request_port_no_get
    if _newclass:port_no = _swig_property(_mul_nbapi.ofp_port_stats_request_port_no_get, _mul_nbapi.ofp_port_stats_request_port_no_set)
    __swig_setmethods__["pad"] = _mul_nbapi.ofp_port_stats_request_pad_set
    __swig_getmethods__["pad"] = _mul_nbapi.ofp_port_stats_request_pad_get
    if _newclass:pad = _swig_property(_mul_nbapi.ofp_port_stats_request_pad_get, _mul_nbapi.ofp_port_stats_request_pad_set)
    def __init__(self): 
        this = _mul_nbapi.new_ofp_port_stats_request()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_ofp_port_stats_request
    __del__ = lambda self : None;
ofp_port_stats_request_swigregister = _mul_nbapi.ofp_port_stats_request_swigregister
ofp_port_stats_request_swigregister(ofp_port_stats_request)

class ofp_port_stats(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofp_port_stats, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofp_port_stats, name)
    __repr__ = _swig_repr
    __swig_setmethods__["port_no"] = _mul_nbapi.ofp_port_stats_port_no_set
    __swig_getmethods__["port_no"] = _mul_nbapi.ofp_port_stats_port_no_get
    if _newclass:port_no = _swig_property(_mul_nbapi.ofp_port_stats_port_no_get, _mul_nbapi.ofp_port_stats_port_no_set)
    __swig_setmethods__["pad"] = _mul_nbapi.ofp_port_stats_pad_set
    __swig_getmethods__["pad"] = _mul_nbapi.ofp_port_stats_pad_get
    if _newclass:pad = _swig_property(_mul_nbapi.ofp_port_stats_pad_get, _mul_nbapi.ofp_port_stats_pad_set)
    __swig_setmethods__["rx_packets"] = _mul_nbapi.ofp_port_stats_rx_packets_set
    __swig_getmethods__["rx_packets"] = _mul_nbapi.ofp_port_stats_rx_packets_get
    if _newclass:rx_packets = _swig_property(_mul_nbapi.ofp_port_stats_rx_packets_get, _mul_nbapi.ofp_port_stats_rx_packets_set)
    __swig_setmethods__["tx_packets"] = _mul_nbapi.ofp_port_stats_tx_packets_set
    __swig_getmethods__["tx_packets"] = _mul_nbapi.ofp_port_stats_tx_packets_get
    if _newclass:tx_packets = _swig_property(_mul_nbapi.ofp_port_stats_tx_packets_get, _mul_nbapi.ofp_port_stats_tx_packets_set)
    __swig_setmethods__["rx_bytes"] = _mul_nbapi.ofp_port_stats_rx_bytes_set
    __swig_getmethods__["rx_bytes"] = _mul_nbapi.ofp_port_stats_rx_bytes_get
    if _newclass:rx_bytes = _swig_property(_mul_nbapi.ofp_port_stats_rx_bytes_get, _mul_nbapi.ofp_port_stats_rx_bytes_set)
    __swig_setmethods__["tx_bytes"] = _mul_nbapi.ofp_port_stats_tx_bytes_set
    __swig_getmethods__["tx_bytes"] = _mul_nbapi.ofp_port_stats_tx_bytes_get
    if _newclass:tx_bytes = _swig_property(_mul_nbapi.ofp_port_stats_tx_bytes_get, _mul_nbapi.ofp_port_stats_tx_bytes_set)
    __swig_setmethods__["rx_dropped"] = _mul_nbapi.ofp_port_stats_rx_dropped_set
    __swig_getmethods__["rx_dropped"] = _mul_nbapi.ofp_port_stats_rx_dropped_get
    if _newclass:rx_dropped = _swig_property(_mul_nbapi.ofp_port_stats_rx_dropped_get, _mul_nbapi.ofp_port_stats_rx_dropped_set)
    __swig_setmethods__["tx_dropped"] = _mul_nbapi.ofp_port_stats_tx_dropped_set
    __swig_getmethods__["tx_dropped"] = _mul_nbapi.ofp_port_stats_tx_dropped_get
    if _newclass:tx_dropped = _swig_property(_mul_nbapi.ofp_port_stats_tx_dropped_get, _mul_nbapi.ofp_port_stats_tx_dropped_set)
    __swig_setmethods__["rx_errors"] = _mul_nbapi.ofp_port_stats_rx_errors_set
    __swig_getmethods__["rx_errors"] = _mul_nbapi.ofp_port_stats_rx_errors_get
    if _newclass:rx_errors = _swig_property(_mul_nbapi.ofp_port_stats_rx_errors_get, _mul_nbapi.ofp_port_stats_rx_errors_set)
    __swig_setmethods__["tx_errors"] = _mul_nbapi.ofp_port_stats_tx_errors_set
    __swig_getmethods__["tx_errors"] = _mul_nbapi.ofp_port_stats_tx_errors_get
    if _newclass:tx_errors = _swig_property(_mul_nbapi.ofp_port_stats_tx_errors_get, _mul_nbapi.ofp_port_stats_tx_errors_set)
    __swig_setmethods__["rx_frame_err"] = _mul_nbapi.ofp_port_stats_rx_frame_err_set
    __swig_getmethods__["rx_frame_err"] = _mul_nbapi.ofp_port_stats_rx_frame_err_get
    if _newclass:rx_frame_err = _swig_property(_mul_nbapi.ofp_port_stats_rx_frame_err_get, _mul_nbapi.ofp_port_stats_rx_frame_err_set)
    __swig_setmethods__["rx_over_err"] = _mul_nbapi.ofp_port_stats_rx_over_err_set
    __swig_getmethods__["rx_over_err"] = _mul_nbapi.ofp_port_stats_rx_over_err_get
    if _newclass:rx_over_err = _swig_property(_mul_nbapi.ofp_port_stats_rx_over_err_get, _mul_nbapi.ofp_port_stats_rx_over_err_set)
    __swig_setmethods__["rx_crc_err"] = _mul_nbapi.ofp_port_stats_rx_crc_err_set
    __swig_getmethods__["rx_crc_err"] = _mul_nbapi.ofp_port_stats_rx_crc_err_get
    if _newclass:rx_crc_err = _swig_property(_mul_nbapi.ofp_port_stats_rx_crc_err_get, _mul_nbapi.ofp_port_stats_rx_crc_err_set)
    __swig_setmethods__["collisions"] = _mul_nbapi.ofp_port_stats_collisions_set
    __swig_getmethods__["collisions"] = _mul_nbapi.ofp_port_stats_collisions_get
    if _newclass:collisions = _swig_property(_mul_nbapi.ofp_port_stats_collisions_get, _mul_nbapi.ofp_port_stats_collisions_set)
    def __init__(self): 
        this = _mul_nbapi.new_ofp_port_stats()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_ofp_port_stats
    __del__ = lambda self : None;
ofp_port_stats_swigregister = _mul_nbapi.ofp_port_stats_swigregister
ofp_port_stats_swigregister(ofp_port_stats)

class ofp_vendor_header(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofp_vendor_header, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofp_vendor_header, name)
    __repr__ = _swig_repr
    __swig_setmethods__["header"] = _mul_nbapi.ofp_vendor_header_header_set
    __swig_getmethods__["header"] = _mul_nbapi.ofp_vendor_header_header_get
    if _newclass:header = _swig_property(_mul_nbapi.ofp_vendor_header_header_get, _mul_nbapi.ofp_vendor_header_header_set)
    __swig_setmethods__["vendor"] = _mul_nbapi.ofp_vendor_header_vendor_set
    __swig_getmethods__["vendor"] = _mul_nbapi.ofp_vendor_header_vendor_get
    if _newclass:vendor = _swig_property(_mul_nbapi.ofp_vendor_header_vendor_get, _mul_nbapi.ofp_vendor_header_vendor_set)
    __swig_setmethods__["body"] = _mul_nbapi.ofp_vendor_header_body_set
    __swig_getmethods__["body"] = _mul_nbapi.ofp_vendor_header_body_get
    if _newclass:body = _swig_property(_mul_nbapi.ofp_vendor_header_body_get, _mul_nbapi.ofp_vendor_header_body_set)
    def __init__(self): 
        this = _mul_nbapi.new_ofp_vendor_header()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_ofp_vendor_header
    __del__ = lambda self : None;
ofp_vendor_header_swigregister = _mul_nbapi.ofp_vendor_header_swigregister
ofp_vendor_header_swigregister(ofp_vendor_header)

class ofp_packet_queue(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofp_packet_queue, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofp_packet_queue, name)
    __repr__ = _swig_repr
    __swig_setmethods__["queue_id"] = _mul_nbapi.ofp_packet_queue_queue_id_set
    __swig_getmethods__["queue_id"] = _mul_nbapi.ofp_packet_queue_queue_id_get
    if _newclass:queue_id = _swig_property(_mul_nbapi.ofp_packet_queue_queue_id_get, _mul_nbapi.ofp_packet_queue_queue_id_set)
    __swig_setmethods__["len"] = _mul_nbapi.ofp_packet_queue_len_set
    __swig_getmethods__["len"] = _mul_nbapi.ofp_packet_queue_len_get
    if _newclass:len = _swig_property(_mul_nbapi.ofp_packet_queue_len_get, _mul_nbapi.ofp_packet_queue_len_set)
    __swig_setmethods__["pad"] = _mul_nbapi.ofp_packet_queue_pad_set
    __swig_getmethods__["pad"] = _mul_nbapi.ofp_packet_queue_pad_get
    if _newclass:pad = _swig_property(_mul_nbapi.ofp_packet_queue_pad_get, _mul_nbapi.ofp_packet_queue_pad_set)
    __swig_setmethods__["properties"] = _mul_nbapi.ofp_packet_queue_properties_set
    __swig_getmethods__["properties"] = _mul_nbapi.ofp_packet_queue_properties_get
    if _newclass:properties = _swig_property(_mul_nbapi.ofp_packet_queue_properties_get, _mul_nbapi.ofp_packet_queue_properties_set)
    def __init__(self): 
        this = _mul_nbapi.new_ofp_packet_queue()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_ofp_packet_queue
    __del__ = lambda self : None;
ofp_packet_queue_swigregister = _mul_nbapi.ofp_packet_queue_swigregister
ofp_packet_queue_swigregister(ofp_packet_queue)

class ofp_queue_get_config_request(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofp_queue_get_config_request, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofp_queue_get_config_request, name)
    __repr__ = _swig_repr
    __swig_setmethods__["header"] = _mul_nbapi.ofp_queue_get_config_request_header_set
    __swig_getmethods__["header"] = _mul_nbapi.ofp_queue_get_config_request_header_get
    if _newclass:header = _swig_property(_mul_nbapi.ofp_queue_get_config_request_header_get, _mul_nbapi.ofp_queue_get_config_request_header_set)
    __swig_setmethods__["port"] = _mul_nbapi.ofp_queue_get_config_request_port_set
    __swig_getmethods__["port"] = _mul_nbapi.ofp_queue_get_config_request_port_get
    if _newclass:port = _swig_property(_mul_nbapi.ofp_queue_get_config_request_port_get, _mul_nbapi.ofp_queue_get_config_request_port_set)
    __swig_setmethods__["pad"] = _mul_nbapi.ofp_queue_get_config_request_pad_set
    __swig_getmethods__["pad"] = _mul_nbapi.ofp_queue_get_config_request_pad_get
    if _newclass:pad = _swig_property(_mul_nbapi.ofp_queue_get_config_request_pad_get, _mul_nbapi.ofp_queue_get_config_request_pad_set)
    def __init__(self): 
        this = _mul_nbapi.new_ofp_queue_get_config_request()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_ofp_queue_get_config_request
    __del__ = lambda self : None;
ofp_queue_get_config_request_swigregister = _mul_nbapi.ofp_queue_get_config_request_swigregister
ofp_queue_get_config_request_swigregister(ofp_queue_get_config_request)

class ofp_queue_get_config_reply(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofp_queue_get_config_reply, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofp_queue_get_config_reply, name)
    __repr__ = _swig_repr
    __swig_setmethods__["header"] = _mul_nbapi.ofp_queue_get_config_reply_header_set
    __swig_getmethods__["header"] = _mul_nbapi.ofp_queue_get_config_reply_header_get
    if _newclass:header = _swig_property(_mul_nbapi.ofp_queue_get_config_reply_header_get, _mul_nbapi.ofp_queue_get_config_reply_header_set)
    __swig_setmethods__["port"] = _mul_nbapi.ofp_queue_get_config_reply_port_set
    __swig_getmethods__["port"] = _mul_nbapi.ofp_queue_get_config_reply_port_get
    if _newclass:port = _swig_property(_mul_nbapi.ofp_queue_get_config_reply_port_get, _mul_nbapi.ofp_queue_get_config_reply_port_set)
    __swig_setmethods__["pad"] = _mul_nbapi.ofp_queue_get_config_reply_pad_set
    __swig_getmethods__["pad"] = _mul_nbapi.ofp_queue_get_config_reply_pad_get
    if _newclass:pad = _swig_property(_mul_nbapi.ofp_queue_get_config_reply_pad_get, _mul_nbapi.ofp_queue_get_config_reply_pad_set)
    __swig_setmethods__["queues"] = _mul_nbapi.ofp_queue_get_config_reply_queues_set
    __swig_getmethods__["queues"] = _mul_nbapi.ofp_queue_get_config_reply_queues_get
    if _newclass:queues = _swig_property(_mul_nbapi.ofp_queue_get_config_reply_queues_get, _mul_nbapi.ofp_queue_get_config_reply_queues_set)
    def __init__(self): 
        this = _mul_nbapi.new_ofp_queue_get_config_reply()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_ofp_queue_get_config_reply
    __del__ = lambda self : None;
ofp_queue_get_config_reply_swigregister = _mul_nbapi.ofp_queue_get_config_reply_swigregister
ofp_queue_get_config_reply_swigregister(ofp_queue_get_config_reply)

class ofp_action_enqueue(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofp_action_enqueue, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofp_action_enqueue, name)
    __repr__ = _swig_repr
    __swig_setmethods__["type"] = _mul_nbapi.ofp_action_enqueue_type_set
    __swig_getmethods__["type"] = _mul_nbapi.ofp_action_enqueue_type_get
    if _newclass:type = _swig_property(_mul_nbapi.ofp_action_enqueue_type_get, _mul_nbapi.ofp_action_enqueue_type_set)
    __swig_setmethods__["len"] = _mul_nbapi.ofp_action_enqueue_len_set
    __swig_getmethods__["len"] = _mul_nbapi.ofp_action_enqueue_len_get
    if _newclass:len = _swig_property(_mul_nbapi.ofp_action_enqueue_len_get, _mul_nbapi.ofp_action_enqueue_len_set)
    __swig_setmethods__["port"] = _mul_nbapi.ofp_action_enqueue_port_set
    __swig_getmethods__["port"] = _mul_nbapi.ofp_action_enqueue_port_get
    if _newclass:port = _swig_property(_mul_nbapi.ofp_action_enqueue_port_get, _mul_nbapi.ofp_action_enqueue_port_set)
    __swig_setmethods__["pad"] = _mul_nbapi.ofp_action_enqueue_pad_set
    __swig_getmethods__["pad"] = _mul_nbapi.ofp_action_enqueue_pad_get
    if _newclass:pad = _swig_property(_mul_nbapi.ofp_action_enqueue_pad_get, _mul_nbapi.ofp_action_enqueue_pad_set)
    __swig_setmethods__["queue_id"] = _mul_nbapi.ofp_action_enqueue_queue_id_set
    __swig_getmethods__["queue_id"] = _mul_nbapi.ofp_action_enqueue_queue_id_get
    if _newclass:queue_id = _swig_property(_mul_nbapi.ofp_action_enqueue_queue_id_get, _mul_nbapi.ofp_action_enqueue_queue_id_set)
    def __init__(self): 
        this = _mul_nbapi.new_ofp_action_enqueue()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_ofp_action_enqueue
    __del__ = lambda self : None;
ofp_action_enqueue_swigregister = _mul_nbapi.ofp_action_enqueue_swigregister
ofp_action_enqueue_swigregister(ofp_action_enqueue)

class ofp_queue_stats_request(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofp_queue_stats_request, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofp_queue_stats_request, name)
    __repr__ = _swig_repr
    __swig_setmethods__["port_no"] = _mul_nbapi.ofp_queue_stats_request_port_no_set
    __swig_getmethods__["port_no"] = _mul_nbapi.ofp_queue_stats_request_port_no_get
    if _newclass:port_no = _swig_property(_mul_nbapi.ofp_queue_stats_request_port_no_get, _mul_nbapi.ofp_queue_stats_request_port_no_set)
    __swig_setmethods__["pad"] = _mul_nbapi.ofp_queue_stats_request_pad_set
    __swig_getmethods__["pad"] = _mul_nbapi.ofp_queue_stats_request_pad_get
    if _newclass:pad = _swig_property(_mul_nbapi.ofp_queue_stats_request_pad_get, _mul_nbapi.ofp_queue_stats_request_pad_set)
    __swig_setmethods__["queue_id"] = _mul_nbapi.ofp_queue_stats_request_queue_id_set
    __swig_getmethods__["queue_id"] = _mul_nbapi.ofp_queue_stats_request_queue_id_get
    if _newclass:queue_id = _swig_property(_mul_nbapi.ofp_queue_stats_request_queue_id_get, _mul_nbapi.ofp_queue_stats_request_queue_id_set)
    def __init__(self): 
        this = _mul_nbapi.new_ofp_queue_stats_request()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_ofp_queue_stats_request
    __del__ = lambda self : None;
ofp_queue_stats_request_swigregister = _mul_nbapi.ofp_queue_stats_request_swigregister
ofp_queue_stats_request_swigregister(ofp_queue_stats_request)

class ofp_queue_stats(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofp_queue_stats, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofp_queue_stats, name)
    __repr__ = _swig_repr
    __swig_setmethods__["port_no"] = _mul_nbapi.ofp_queue_stats_port_no_set
    __swig_getmethods__["port_no"] = _mul_nbapi.ofp_queue_stats_port_no_get
    if _newclass:port_no = _swig_property(_mul_nbapi.ofp_queue_stats_port_no_get, _mul_nbapi.ofp_queue_stats_port_no_set)
    __swig_setmethods__["pad"] = _mul_nbapi.ofp_queue_stats_pad_set
    __swig_getmethods__["pad"] = _mul_nbapi.ofp_queue_stats_pad_get
    if _newclass:pad = _swig_property(_mul_nbapi.ofp_queue_stats_pad_get, _mul_nbapi.ofp_queue_stats_pad_set)
    __swig_setmethods__["queue_id"] = _mul_nbapi.ofp_queue_stats_queue_id_set
    __swig_getmethods__["queue_id"] = _mul_nbapi.ofp_queue_stats_queue_id_get
    if _newclass:queue_id = _swig_property(_mul_nbapi.ofp_queue_stats_queue_id_get, _mul_nbapi.ofp_queue_stats_queue_id_set)
    __swig_setmethods__["tx_bytes"] = _mul_nbapi.ofp_queue_stats_tx_bytes_set
    __swig_getmethods__["tx_bytes"] = _mul_nbapi.ofp_queue_stats_tx_bytes_get
    if _newclass:tx_bytes = _swig_property(_mul_nbapi.ofp_queue_stats_tx_bytes_get, _mul_nbapi.ofp_queue_stats_tx_bytes_set)
    __swig_setmethods__["tx_packets"] = _mul_nbapi.ofp_queue_stats_tx_packets_set
    __swig_getmethods__["tx_packets"] = _mul_nbapi.ofp_queue_stats_tx_packets_get
    if _newclass:tx_packets = _swig_property(_mul_nbapi.ofp_queue_stats_tx_packets_get, _mul_nbapi.ofp_queue_stats_tx_packets_set)
    __swig_setmethods__["tx_errors"] = _mul_nbapi.ofp_queue_stats_tx_errors_set
    __swig_getmethods__["tx_errors"] = _mul_nbapi.ofp_queue_stats_tx_errors_get
    if _newclass:tx_errors = _swig_property(_mul_nbapi.ofp_queue_stats_tx_errors_get, _mul_nbapi.ofp_queue_stats_tx_errors_set)
    def __init__(self): 
        this = _mul_nbapi.new_ofp_queue_stats()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_ofp_queue_stats
    __del__ = lambda self : None;
ofp_queue_stats_swigregister = _mul_nbapi.ofp_queue_stats_swigregister
ofp_queue_stats_swigregister(ofp_queue_stats)

OFPT131_HELLO = _mul_nbapi.OFPT131_HELLO
OFPT131_ERROR = _mul_nbapi.OFPT131_ERROR
OFPT131_ECHO_REQUEST = _mul_nbapi.OFPT131_ECHO_REQUEST
OFPT131_ECHO_REPLY = _mul_nbapi.OFPT131_ECHO_REPLY
OFPT131_EXPERIMENTER = _mul_nbapi.OFPT131_EXPERIMENTER
OFPT131_FEATURES_REQUEST = _mul_nbapi.OFPT131_FEATURES_REQUEST
OFPT131_FEATURES_REPLY = _mul_nbapi.OFPT131_FEATURES_REPLY
OFPT131_GET_CONFIG_REQUEST = _mul_nbapi.OFPT131_GET_CONFIG_REQUEST
OFPT131_GET_CONFIG_REPLY = _mul_nbapi.OFPT131_GET_CONFIG_REPLY
OFPT131_SET_CONFIG = _mul_nbapi.OFPT131_SET_CONFIG
OFPT131_PACKET_IN = _mul_nbapi.OFPT131_PACKET_IN
OFPT131_FLOW_REMOVED = _mul_nbapi.OFPT131_FLOW_REMOVED
OFPT131_PORT_STATUS = _mul_nbapi.OFPT131_PORT_STATUS
OFPT131_PACKET_OUT = _mul_nbapi.OFPT131_PACKET_OUT
OFPT131_FLOW_MOD = _mul_nbapi.OFPT131_FLOW_MOD
OFPT131_GROUP_MOD = _mul_nbapi.OFPT131_GROUP_MOD
OFPT131_PORT_MOD = _mul_nbapi.OFPT131_PORT_MOD
OFPT131_TABLE_MOD = _mul_nbapi.OFPT131_TABLE_MOD
OFPT131_MULTIPART_REQUEST = _mul_nbapi.OFPT131_MULTIPART_REQUEST
OFPT131_MULTIPART_REPLY = _mul_nbapi.OFPT131_MULTIPART_REPLY
OFPT131_BARRIER_REQUEST = _mul_nbapi.OFPT131_BARRIER_REQUEST
OFPT131_BARRIER_REPLY = _mul_nbapi.OFPT131_BARRIER_REPLY
OFPT131_QUEUE_GET_CONFIG_REQUEST = _mul_nbapi.OFPT131_QUEUE_GET_CONFIG_REQUEST
OFPT131_QUEUE_GET_CONFIG_REPLY = _mul_nbapi.OFPT131_QUEUE_GET_CONFIG_REPLY
OFPT131_ROLE_REQUEST = _mul_nbapi.OFPT131_ROLE_REQUEST
OFPT131_ROLE_REPLY = _mul_nbapi.OFPT131_ROLE_REPLY
OFPT131_GET_ASYNC_REQUEST = _mul_nbapi.OFPT131_GET_ASYNC_REQUEST
OFPT131_GET_ASYNC_REPLY = _mul_nbapi.OFPT131_GET_ASYNC_REPLY
OFPT131_SET_ASYNC = _mul_nbapi.OFPT131_SET_ASYNC
OFPT131_METER_MOD = _mul_nbapi.OFPT131_METER_MOD
class ofp131_port(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofp131_port, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofp131_port, name)
    __repr__ = _swig_repr
    __swig_setmethods__["port_no"] = _mul_nbapi.ofp131_port_port_no_set
    __swig_getmethods__["port_no"] = _mul_nbapi.ofp131_port_port_no_get
    if _newclass:port_no = _swig_property(_mul_nbapi.ofp131_port_port_no_get, _mul_nbapi.ofp131_port_port_no_set)
    __swig_setmethods__["pad"] = _mul_nbapi.ofp131_port_pad_set
    __swig_getmethods__["pad"] = _mul_nbapi.ofp131_port_pad_get
    if _newclass:pad = _swig_property(_mul_nbapi.ofp131_port_pad_get, _mul_nbapi.ofp131_port_pad_set)
    __swig_setmethods__["hw_addr"] = _mul_nbapi.ofp131_port_hw_addr_set
    __swig_getmethods__["hw_addr"] = _mul_nbapi.ofp131_port_hw_addr_get
    if _newclass:hw_addr = _swig_property(_mul_nbapi.ofp131_port_hw_addr_get, _mul_nbapi.ofp131_port_hw_addr_set)
    __swig_setmethods__["pad2"] = _mul_nbapi.ofp131_port_pad2_set
    __swig_getmethods__["pad2"] = _mul_nbapi.ofp131_port_pad2_get
    if _newclass:pad2 = _swig_property(_mul_nbapi.ofp131_port_pad2_get, _mul_nbapi.ofp131_port_pad2_set)
    __swig_setmethods__["name"] = _mul_nbapi.ofp131_port_name_set
    __swig_getmethods__["name"] = _mul_nbapi.ofp131_port_name_get
    if _newclass:name = _swig_property(_mul_nbapi.ofp131_port_name_get, _mul_nbapi.ofp131_port_name_set)
    __swig_setmethods__["config"] = _mul_nbapi.ofp131_port_config_set
    __swig_getmethods__["config"] = _mul_nbapi.ofp131_port_config_get
    if _newclass:config = _swig_property(_mul_nbapi.ofp131_port_config_get, _mul_nbapi.ofp131_port_config_set)
    __swig_setmethods__["state"] = _mul_nbapi.ofp131_port_state_set
    __swig_getmethods__["state"] = _mul_nbapi.ofp131_port_state_get
    if _newclass:state = _swig_property(_mul_nbapi.ofp131_port_state_get, _mul_nbapi.ofp131_port_state_set)
    __swig_setmethods__["curr"] = _mul_nbapi.ofp131_port_curr_set
    __swig_getmethods__["curr"] = _mul_nbapi.ofp131_port_curr_get
    if _newclass:curr = _swig_property(_mul_nbapi.ofp131_port_curr_get, _mul_nbapi.ofp131_port_curr_set)
    __swig_setmethods__["advertised"] = _mul_nbapi.ofp131_port_advertised_set
    __swig_getmethods__["advertised"] = _mul_nbapi.ofp131_port_advertised_get
    if _newclass:advertised = _swig_property(_mul_nbapi.ofp131_port_advertised_get, _mul_nbapi.ofp131_port_advertised_set)
    __swig_setmethods__["supported"] = _mul_nbapi.ofp131_port_supported_set
    __swig_getmethods__["supported"] = _mul_nbapi.ofp131_port_supported_get
    if _newclass:supported = _swig_property(_mul_nbapi.ofp131_port_supported_get, _mul_nbapi.ofp131_port_supported_set)
    __swig_setmethods__["peer"] = _mul_nbapi.ofp131_port_peer_set
    __swig_getmethods__["peer"] = _mul_nbapi.ofp131_port_peer_get
    if _newclass:peer = _swig_property(_mul_nbapi.ofp131_port_peer_get, _mul_nbapi.ofp131_port_peer_set)
    __swig_setmethods__["curr_speed"] = _mul_nbapi.ofp131_port_curr_speed_set
    __swig_getmethods__["curr_speed"] = _mul_nbapi.ofp131_port_curr_speed_get
    if _newclass:curr_speed = _swig_property(_mul_nbapi.ofp131_port_curr_speed_get, _mul_nbapi.ofp131_port_curr_speed_set)
    __swig_setmethods__["max_speed"] = _mul_nbapi.ofp131_port_max_speed_set
    __swig_getmethods__["max_speed"] = _mul_nbapi.ofp131_port_max_speed_get
    if _newclass:max_speed = _swig_property(_mul_nbapi.ofp131_port_max_speed_get, _mul_nbapi.ofp131_port_max_speed_set)
    def __init__(self): 
        this = _mul_nbapi.new_ofp131_port()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_ofp131_port
    __del__ = lambda self : None;
ofp131_port_swigregister = _mul_nbapi.ofp131_port_swigregister
ofp131_port_swigregister(ofp131_port)

OFPPC131_PORT_DOWN = _mul_nbapi.OFPPC131_PORT_DOWN
OFPPC131_NO_RECV = _mul_nbapi.OFPPC131_NO_RECV
OFPPC131_NO_FWD = _mul_nbapi.OFPPC131_NO_FWD
OFPPC131_NO_PACKET_IN = _mul_nbapi.OFPPC131_NO_PACKET_IN
OFPPS131_LINK_DOWN = _mul_nbapi.OFPPS131_LINK_DOWN
OFPPS131_BLOCKED = _mul_nbapi.OFPPS131_BLOCKED
OFPPS131_LIVE = _mul_nbapi.OFPPS131_LIVE
OFPP131_MAX = _mul_nbapi.OFPP131_MAX
OFPP131_IN_PORT = _mul_nbapi.OFPP131_IN_PORT
OFPP131_TABLE = _mul_nbapi.OFPP131_TABLE
OFPP131_NORMAL = _mul_nbapi.OFPP131_NORMAL
OFPP131_FLOOD = _mul_nbapi.OFPP131_FLOOD
OFPP131_ALL = _mul_nbapi.OFPP131_ALL
OFPP131_CONTROLLER = _mul_nbapi.OFPP131_CONTROLLER
OFPP131_LOCAL = _mul_nbapi.OFPP131_LOCAL
OFPP131_ANY = _mul_nbapi.OFPP131_ANY
OFPPF131_10MB_HD = _mul_nbapi.OFPPF131_10MB_HD
OFPPF131_10MB_FD = _mul_nbapi.OFPPF131_10MB_FD
OFPPF131_100MB_HD = _mul_nbapi.OFPPF131_100MB_HD
OFPPF131_100MB_FD = _mul_nbapi.OFPPF131_100MB_FD
OFPPF131_1GB_HD = _mul_nbapi.OFPPF131_1GB_HD
OFPPF131_1GB_FD = _mul_nbapi.OFPPF131_1GB_FD
OFPPF131_10GB_FD = _mul_nbapi.OFPPF131_10GB_FD
OFPPF131_40GB_FD = _mul_nbapi.OFPPF131_40GB_FD
OFPPF131_100GB_FD = _mul_nbapi.OFPPF131_100GB_FD
OFPPF131_1TB_FD = _mul_nbapi.OFPPF131_1TB_FD
OFPPF131_OTHER = _mul_nbapi.OFPPF131_OTHER
OFPPF131_COPPER = _mul_nbapi.OFPPF131_COPPER
OFPPF131_FIBER = _mul_nbapi.OFPPF131_FIBER
OFPPF131_AUTONEG = _mul_nbapi.OFPPF131_AUTONEG
OFPPF131_PAUSE = _mul_nbapi.OFPPF131_PAUSE
OFPPF131_PAUSE_ASYM = _mul_nbapi.OFPPF131_PAUSE_ASYM
class ofp131_packet_queue(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofp131_packet_queue, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofp131_packet_queue, name)
    __repr__ = _swig_repr
    __swig_setmethods__["queue_id"] = _mul_nbapi.ofp131_packet_queue_queue_id_set
    __swig_getmethods__["queue_id"] = _mul_nbapi.ofp131_packet_queue_queue_id_get
    if _newclass:queue_id = _swig_property(_mul_nbapi.ofp131_packet_queue_queue_id_get, _mul_nbapi.ofp131_packet_queue_queue_id_set)
    __swig_setmethods__["port"] = _mul_nbapi.ofp131_packet_queue_port_set
    __swig_getmethods__["port"] = _mul_nbapi.ofp131_packet_queue_port_get
    if _newclass:port = _swig_property(_mul_nbapi.ofp131_packet_queue_port_get, _mul_nbapi.ofp131_packet_queue_port_set)
    __swig_setmethods__["len"] = _mul_nbapi.ofp131_packet_queue_len_set
    __swig_getmethods__["len"] = _mul_nbapi.ofp131_packet_queue_len_get
    if _newclass:len = _swig_property(_mul_nbapi.ofp131_packet_queue_len_get, _mul_nbapi.ofp131_packet_queue_len_set)
    __swig_setmethods__["pad"] = _mul_nbapi.ofp131_packet_queue_pad_set
    __swig_getmethods__["pad"] = _mul_nbapi.ofp131_packet_queue_pad_get
    if _newclass:pad = _swig_property(_mul_nbapi.ofp131_packet_queue_pad_get, _mul_nbapi.ofp131_packet_queue_pad_set)
    __swig_setmethods__["properties"] = _mul_nbapi.ofp131_packet_queue_properties_set
    __swig_getmethods__["properties"] = _mul_nbapi.ofp131_packet_queue_properties_get
    if _newclass:properties = _swig_property(_mul_nbapi.ofp131_packet_queue_properties_get, _mul_nbapi.ofp131_packet_queue_properties_set)
    def __init__(self): 
        this = _mul_nbapi.new_ofp131_packet_queue()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_ofp131_packet_queue
    __del__ = lambda self : None;
ofp131_packet_queue_swigregister = _mul_nbapi.ofp131_packet_queue_swigregister
ofp131_packet_queue_swigregister(ofp131_packet_queue)

class ofp131_queue_prop_experimenter(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofp131_queue_prop_experimenter, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofp131_queue_prop_experimenter, name)
    __repr__ = _swig_repr
    __swig_setmethods__["prop_header"] = _mul_nbapi.ofp131_queue_prop_experimenter_prop_header_set
    __swig_getmethods__["prop_header"] = _mul_nbapi.ofp131_queue_prop_experimenter_prop_header_get
    if _newclass:prop_header = _swig_property(_mul_nbapi.ofp131_queue_prop_experimenter_prop_header_get, _mul_nbapi.ofp131_queue_prop_experimenter_prop_header_set)
    __swig_setmethods__["experimenter"] = _mul_nbapi.ofp131_queue_prop_experimenter_experimenter_set
    __swig_getmethods__["experimenter"] = _mul_nbapi.ofp131_queue_prop_experimenter_experimenter_get
    if _newclass:experimenter = _swig_property(_mul_nbapi.ofp131_queue_prop_experimenter_experimenter_get, _mul_nbapi.ofp131_queue_prop_experimenter_experimenter_set)
    __swig_setmethods__["pad"] = _mul_nbapi.ofp131_queue_prop_experimenter_pad_set
    __swig_getmethods__["pad"] = _mul_nbapi.ofp131_queue_prop_experimenter_pad_get
    if _newclass:pad = _swig_property(_mul_nbapi.ofp131_queue_prop_experimenter_pad_get, _mul_nbapi.ofp131_queue_prop_experimenter_pad_set)
    __swig_setmethods__["data"] = _mul_nbapi.ofp131_queue_prop_experimenter_data_set
    __swig_getmethods__["data"] = _mul_nbapi.ofp131_queue_prop_experimenter_data_get
    if _newclass:data = _swig_property(_mul_nbapi.ofp131_queue_prop_experimenter_data_get, _mul_nbapi.ofp131_queue_prop_experimenter_data_set)
    def __init__(self): 
        this = _mul_nbapi.new_ofp131_queue_prop_experimenter()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_ofp131_queue_prop_experimenter
    __del__ = lambda self : None;
ofp131_queue_prop_experimenter_swigregister = _mul_nbapi.ofp131_queue_prop_experimenter_swigregister
ofp131_queue_prop_experimenter_swigregister(ofp131_queue_prop_experimenter)

class ofp131_oxm_experimenter_header(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofp131_oxm_experimenter_header, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofp131_oxm_experimenter_header, name)
    __repr__ = _swig_repr
    __swig_setmethods__["oxm_header"] = _mul_nbapi.ofp131_oxm_experimenter_header_oxm_header_set
    __swig_getmethods__["oxm_header"] = _mul_nbapi.ofp131_oxm_experimenter_header_oxm_header_get
    if _newclass:oxm_header = _swig_property(_mul_nbapi.ofp131_oxm_experimenter_header_oxm_header_get, _mul_nbapi.ofp131_oxm_experimenter_header_oxm_header_set)
    __swig_setmethods__["experimenter"] = _mul_nbapi.ofp131_oxm_experimenter_header_experimenter_set
    __swig_getmethods__["experimenter"] = _mul_nbapi.ofp131_oxm_experimenter_header_experimenter_get
    if _newclass:experimenter = _swig_property(_mul_nbapi.ofp131_oxm_experimenter_header_experimenter_get, _mul_nbapi.ofp131_oxm_experimenter_header_experimenter_set)
    def __init__(self): 
        this = _mul_nbapi.new_ofp131_oxm_experimenter_header()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_ofp131_oxm_experimenter_header
    __del__ = lambda self : None;
ofp131_oxm_experimenter_header_swigregister = _mul_nbapi.ofp131_oxm_experimenter_header_swigregister
ofp131_oxm_experimenter_header_swigregister(ofp131_oxm_experimenter_header)

OFPAT131_OUTPUT = _mul_nbapi.OFPAT131_OUTPUT
OFPAT131_COPY_TTL_OUT = _mul_nbapi.OFPAT131_COPY_TTL_OUT
OFPAT131_COPY_TTL_IN = _mul_nbapi.OFPAT131_COPY_TTL_IN
OFPAT131_MPLS_TTL = _mul_nbapi.OFPAT131_MPLS_TTL
OFPAT131_DEC_MPLS_TTL = _mul_nbapi.OFPAT131_DEC_MPLS_TTL
OFPAT131_PUSH_VLAN = _mul_nbapi.OFPAT131_PUSH_VLAN
OFPAT131_POP_VLAN = _mul_nbapi.OFPAT131_POP_VLAN
OFPAT131_PUSH_MPLS = _mul_nbapi.OFPAT131_PUSH_MPLS
OFPAT131_POP_MPLS = _mul_nbapi.OFPAT131_POP_MPLS
OFPAT131_SET_QUEUE = _mul_nbapi.OFPAT131_SET_QUEUE
OFPAT131_GROUP = _mul_nbapi.OFPAT131_GROUP
OFPAT131_SET_NW_TTL = _mul_nbapi.OFPAT131_SET_NW_TTL
OFPAT131_DEC_NW_TTL = _mul_nbapi.OFPAT131_DEC_NW_TTL
OFPAT131_SET_FIELD = _mul_nbapi.OFPAT131_SET_FIELD
OFPAT131_PUSH_PBB = _mul_nbapi.OFPAT131_PUSH_PBB
OFPAT131_POP_PBB = _mul_nbapi.OFPAT131_POP_PBB
OFPAT131_EXPERIMENTER = _mul_nbapi.OFPAT131_EXPERIMENTER
class ofp131_action_output(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofp131_action_output, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofp131_action_output, name)
    __repr__ = _swig_repr
    __swig_setmethods__["type"] = _mul_nbapi.ofp131_action_output_type_set
    __swig_getmethods__["type"] = _mul_nbapi.ofp131_action_output_type_get
    if _newclass:type = _swig_property(_mul_nbapi.ofp131_action_output_type_get, _mul_nbapi.ofp131_action_output_type_set)
    __swig_setmethods__["len"] = _mul_nbapi.ofp131_action_output_len_set
    __swig_getmethods__["len"] = _mul_nbapi.ofp131_action_output_len_get
    if _newclass:len = _swig_property(_mul_nbapi.ofp131_action_output_len_get, _mul_nbapi.ofp131_action_output_len_set)
    __swig_setmethods__["port"] = _mul_nbapi.ofp131_action_output_port_set
    __swig_getmethods__["port"] = _mul_nbapi.ofp131_action_output_port_get
    if _newclass:port = _swig_property(_mul_nbapi.ofp131_action_output_port_get, _mul_nbapi.ofp131_action_output_port_set)
    __swig_setmethods__["max_len"] = _mul_nbapi.ofp131_action_output_max_len_set
    __swig_getmethods__["max_len"] = _mul_nbapi.ofp131_action_output_max_len_get
    if _newclass:max_len = _swig_property(_mul_nbapi.ofp131_action_output_max_len_get, _mul_nbapi.ofp131_action_output_max_len_set)
    __swig_setmethods__["pad"] = _mul_nbapi.ofp131_action_output_pad_set
    __swig_getmethods__["pad"] = _mul_nbapi.ofp131_action_output_pad_get
    if _newclass:pad = _swig_property(_mul_nbapi.ofp131_action_output_pad_get, _mul_nbapi.ofp131_action_output_pad_set)
    def __init__(self): 
        this = _mul_nbapi.new_ofp131_action_output()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_ofp131_action_output
    __del__ = lambda self : None;
ofp131_action_output_swigregister = _mul_nbapi.ofp131_action_output_swigregister
ofp131_action_output_swigregister(ofp131_action_output)

class ofp131_action_set_queue(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofp131_action_set_queue, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofp131_action_set_queue, name)
    __repr__ = _swig_repr
    __swig_setmethods__["type"] = _mul_nbapi.ofp131_action_set_queue_type_set
    __swig_getmethods__["type"] = _mul_nbapi.ofp131_action_set_queue_type_get
    if _newclass:type = _swig_property(_mul_nbapi.ofp131_action_set_queue_type_get, _mul_nbapi.ofp131_action_set_queue_type_set)
    __swig_setmethods__["len"] = _mul_nbapi.ofp131_action_set_queue_len_set
    __swig_getmethods__["len"] = _mul_nbapi.ofp131_action_set_queue_len_get
    if _newclass:len = _swig_property(_mul_nbapi.ofp131_action_set_queue_len_get, _mul_nbapi.ofp131_action_set_queue_len_set)
    __swig_setmethods__["queue_id"] = _mul_nbapi.ofp131_action_set_queue_queue_id_set
    __swig_getmethods__["queue_id"] = _mul_nbapi.ofp131_action_set_queue_queue_id_get
    if _newclass:queue_id = _swig_property(_mul_nbapi.ofp131_action_set_queue_queue_id_get, _mul_nbapi.ofp131_action_set_queue_queue_id_set)
    def __init__(self): 
        this = _mul_nbapi.new_ofp131_action_set_queue()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_ofp131_action_set_queue
    __del__ = lambda self : None;
ofp131_action_set_queue_swigregister = _mul_nbapi.ofp131_action_set_queue_swigregister
ofp131_action_set_queue_swigregister(ofp131_action_set_queue)

class ofp131_switch_features(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofp131_switch_features, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofp131_switch_features, name)
    __repr__ = _swig_repr
    __swig_setmethods__["header"] = _mul_nbapi.ofp131_switch_features_header_set
    __swig_getmethods__["header"] = _mul_nbapi.ofp131_switch_features_header_get
    if _newclass:header = _swig_property(_mul_nbapi.ofp131_switch_features_header_get, _mul_nbapi.ofp131_switch_features_header_set)
    __swig_setmethods__["datapath_id"] = _mul_nbapi.ofp131_switch_features_datapath_id_set
    __swig_getmethods__["datapath_id"] = _mul_nbapi.ofp131_switch_features_datapath_id_get
    if _newclass:datapath_id = _swig_property(_mul_nbapi.ofp131_switch_features_datapath_id_get, _mul_nbapi.ofp131_switch_features_datapath_id_set)
    __swig_setmethods__["n_buffers"] = _mul_nbapi.ofp131_switch_features_n_buffers_set
    __swig_getmethods__["n_buffers"] = _mul_nbapi.ofp131_switch_features_n_buffers_get
    if _newclass:n_buffers = _swig_property(_mul_nbapi.ofp131_switch_features_n_buffers_get, _mul_nbapi.ofp131_switch_features_n_buffers_set)
    __swig_setmethods__["n_tables"] = _mul_nbapi.ofp131_switch_features_n_tables_set
    __swig_getmethods__["n_tables"] = _mul_nbapi.ofp131_switch_features_n_tables_get
    if _newclass:n_tables = _swig_property(_mul_nbapi.ofp131_switch_features_n_tables_get, _mul_nbapi.ofp131_switch_features_n_tables_set)
    __swig_setmethods__["auxiliary_id"] = _mul_nbapi.ofp131_switch_features_auxiliary_id_set
    __swig_getmethods__["auxiliary_id"] = _mul_nbapi.ofp131_switch_features_auxiliary_id_get
    if _newclass:auxiliary_id = _swig_property(_mul_nbapi.ofp131_switch_features_auxiliary_id_get, _mul_nbapi.ofp131_switch_features_auxiliary_id_set)
    __swig_setmethods__["pad"] = _mul_nbapi.ofp131_switch_features_pad_set
    __swig_getmethods__["pad"] = _mul_nbapi.ofp131_switch_features_pad_get
    if _newclass:pad = _swig_property(_mul_nbapi.ofp131_switch_features_pad_get, _mul_nbapi.ofp131_switch_features_pad_set)
    __swig_setmethods__["capabilities"] = _mul_nbapi.ofp131_switch_features_capabilities_set
    __swig_getmethods__["capabilities"] = _mul_nbapi.ofp131_switch_features_capabilities_get
    if _newclass:capabilities = _swig_property(_mul_nbapi.ofp131_switch_features_capabilities_get, _mul_nbapi.ofp131_switch_features_capabilities_set)
    __swig_setmethods__["reserved"] = _mul_nbapi.ofp131_switch_features_reserved_set
    __swig_getmethods__["reserved"] = _mul_nbapi.ofp131_switch_features_reserved_get
    if _newclass:reserved = _swig_property(_mul_nbapi.ofp131_switch_features_reserved_get, _mul_nbapi.ofp131_switch_features_reserved_set)
    def __init__(self): 
        this = _mul_nbapi.new_ofp131_switch_features()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_ofp131_switch_features
    __del__ = lambda self : None;
ofp131_switch_features_swigregister = _mul_nbapi.ofp131_switch_features_swigregister
ofp131_switch_features_swigregister(ofp131_switch_features)

OFPC131_FLOW_STATS = _mul_nbapi.OFPC131_FLOW_STATS
OFPC131_TABLE_STATS = _mul_nbapi.OFPC131_TABLE_STATS
OFPC131_PORT_STATS = _mul_nbapi.OFPC131_PORT_STATS
OFPC131_GROUP_STATS = _mul_nbapi.OFPC131_GROUP_STATS
OFPC131_IP_REASM = _mul_nbapi.OFPC131_IP_REASM
OFPC131_QUEUE_STATS = _mul_nbapi.OFPC131_QUEUE_STATS
OFPC131_PORT_BLOCKED = _mul_nbapi.OFPC131_PORT_BLOCKED
class ofp131_flow_mod(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofp131_flow_mod, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofp131_flow_mod, name)
    __repr__ = _swig_repr
    __swig_setmethods__["header"] = _mul_nbapi.ofp131_flow_mod_header_set
    __swig_getmethods__["header"] = _mul_nbapi.ofp131_flow_mod_header_get
    if _newclass:header = _swig_property(_mul_nbapi.ofp131_flow_mod_header_get, _mul_nbapi.ofp131_flow_mod_header_set)
    __swig_setmethods__["cookie"] = _mul_nbapi.ofp131_flow_mod_cookie_set
    __swig_getmethods__["cookie"] = _mul_nbapi.ofp131_flow_mod_cookie_get
    if _newclass:cookie = _swig_property(_mul_nbapi.ofp131_flow_mod_cookie_get, _mul_nbapi.ofp131_flow_mod_cookie_set)
    __swig_setmethods__["cookie_mask"] = _mul_nbapi.ofp131_flow_mod_cookie_mask_set
    __swig_getmethods__["cookie_mask"] = _mul_nbapi.ofp131_flow_mod_cookie_mask_get
    if _newclass:cookie_mask = _swig_property(_mul_nbapi.ofp131_flow_mod_cookie_mask_get, _mul_nbapi.ofp131_flow_mod_cookie_mask_set)
    __swig_setmethods__["table_id"] = _mul_nbapi.ofp131_flow_mod_table_id_set
    __swig_getmethods__["table_id"] = _mul_nbapi.ofp131_flow_mod_table_id_get
    if _newclass:table_id = _swig_property(_mul_nbapi.ofp131_flow_mod_table_id_get, _mul_nbapi.ofp131_flow_mod_table_id_set)
    __swig_setmethods__["command"] = _mul_nbapi.ofp131_flow_mod_command_set
    __swig_getmethods__["command"] = _mul_nbapi.ofp131_flow_mod_command_get
    if _newclass:command = _swig_property(_mul_nbapi.ofp131_flow_mod_command_get, _mul_nbapi.ofp131_flow_mod_command_set)
    __swig_setmethods__["idle_timeout"] = _mul_nbapi.ofp131_flow_mod_idle_timeout_set
    __swig_getmethods__["idle_timeout"] = _mul_nbapi.ofp131_flow_mod_idle_timeout_get
    if _newclass:idle_timeout = _swig_property(_mul_nbapi.ofp131_flow_mod_idle_timeout_get, _mul_nbapi.ofp131_flow_mod_idle_timeout_set)
    __swig_setmethods__["hard_timeout"] = _mul_nbapi.ofp131_flow_mod_hard_timeout_set
    __swig_getmethods__["hard_timeout"] = _mul_nbapi.ofp131_flow_mod_hard_timeout_get
    if _newclass:hard_timeout = _swig_property(_mul_nbapi.ofp131_flow_mod_hard_timeout_get, _mul_nbapi.ofp131_flow_mod_hard_timeout_set)
    __swig_setmethods__["priority"] = _mul_nbapi.ofp131_flow_mod_priority_set
    __swig_getmethods__["priority"] = _mul_nbapi.ofp131_flow_mod_priority_get
    if _newclass:priority = _swig_property(_mul_nbapi.ofp131_flow_mod_priority_get, _mul_nbapi.ofp131_flow_mod_priority_set)
    __swig_setmethods__["buffer_id"] = _mul_nbapi.ofp131_flow_mod_buffer_id_set
    __swig_getmethods__["buffer_id"] = _mul_nbapi.ofp131_flow_mod_buffer_id_get
    if _newclass:buffer_id = _swig_property(_mul_nbapi.ofp131_flow_mod_buffer_id_get, _mul_nbapi.ofp131_flow_mod_buffer_id_set)
    __swig_setmethods__["out_port"] = _mul_nbapi.ofp131_flow_mod_out_port_set
    __swig_getmethods__["out_port"] = _mul_nbapi.ofp131_flow_mod_out_port_get
    if _newclass:out_port = _swig_property(_mul_nbapi.ofp131_flow_mod_out_port_get, _mul_nbapi.ofp131_flow_mod_out_port_set)
    __swig_setmethods__["out_group"] = _mul_nbapi.ofp131_flow_mod_out_group_set
    __swig_getmethods__["out_group"] = _mul_nbapi.ofp131_flow_mod_out_group_get
    if _newclass:out_group = _swig_property(_mul_nbapi.ofp131_flow_mod_out_group_get, _mul_nbapi.ofp131_flow_mod_out_group_set)
    __swig_setmethods__["flags"] = _mul_nbapi.ofp131_flow_mod_flags_set
    __swig_getmethods__["flags"] = _mul_nbapi.ofp131_flow_mod_flags_get
    if _newclass:flags = _swig_property(_mul_nbapi.ofp131_flow_mod_flags_get, _mul_nbapi.ofp131_flow_mod_flags_set)
    __swig_setmethods__["pad"] = _mul_nbapi.ofp131_flow_mod_pad_set
    __swig_getmethods__["pad"] = _mul_nbapi.ofp131_flow_mod_pad_get
    if _newclass:pad = _swig_property(_mul_nbapi.ofp131_flow_mod_pad_get, _mul_nbapi.ofp131_flow_mod_pad_set)
    __swig_setmethods__["match"] = _mul_nbapi.ofp131_flow_mod_match_set
    __swig_getmethods__["match"] = _mul_nbapi.ofp131_flow_mod_match_get
    if _newclass:match = _swig_property(_mul_nbapi.ofp131_flow_mod_match_get, _mul_nbapi.ofp131_flow_mod_match_set)
    def __init__(self): 
        this = _mul_nbapi.new_ofp131_flow_mod()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_ofp131_flow_mod
    __del__ = lambda self : None;
ofp131_flow_mod_swigregister = _mul_nbapi.ofp131_flow_mod_swigregister
ofp131_flow_mod_swigregister(ofp131_flow_mod)

OFPFF131_SEND_FLOW_REM = _mul_nbapi.OFPFF131_SEND_FLOW_REM
OFPFF131_CHECK_OVERLAP = _mul_nbapi.OFPFF131_CHECK_OVERLAP
OFPFF131_RESET_COUNTS = _mul_nbapi.OFPFF131_RESET_COUNTS
OFPFF131_NO_PKT_COUNTS = _mul_nbapi.OFPFF131_NO_PKT_COUNTS
OFPFF131_NO_BYT_COUNTS = _mul_nbapi.OFPFF131_NO_BYT_COUNTS
class ofp131_port_mod(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofp131_port_mod, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofp131_port_mod, name)
    __repr__ = _swig_repr
    __swig_setmethods__["header"] = _mul_nbapi.ofp131_port_mod_header_set
    __swig_getmethods__["header"] = _mul_nbapi.ofp131_port_mod_header_get
    if _newclass:header = _swig_property(_mul_nbapi.ofp131_port_mod_header_get, _mul_nbapi.ofp131_port_mod_header_set)
    __swig_setmethods__["port_no"] = _mul_nbapi.ofp131_port_mod_port_no_set
    __swig_getmethods__["port_no"] = _mul_nbapi.ofp131_port_mod_port_no_get
    if _newclass:port_no = _swig_property(_mul_nbapi.ofp131_port_mod_port_no_get, _mul_nbapi.ofp131_port_mod_port_no_set)
    __swig_setmethods__["pad"] = _mul_nbapi.ofp131_port_mod_pad_set
    __swig_getmethods__["pad"] = _mul_nbapi.ofp131_port_mod_pad_get
    if _newclass:pad = _swig_property(_mul_nbapi.ofp131_port_mod_pad_get, _mul_nbapi.ofp131_port_mod_pad_set)
    __swig_setmethods__["hw_addr"] = _mul_nbapi.ofp131_port_mod_hw_addr_set
    __swig_getmethods__["hw_addr"] = _mul_nbapi.ofp131_port_mod_hw_addr_get
    if _newclass:hw_addr = _swig_property(_mul_nbapi.ofp131_port_mod_hw_addr_get, _mul_nbapi.ofp131_port_mod_hw_addr_set)
    __swig_setmethods__["pad2"] = _mul_nbapi.ofp131_port_mod_pad2_set
    __swig_getmethods__["pad2"] = _mul_nbapi.ofp131_port_mod_pad2_get
    if _newclass:pad2 = _swig_property(_mul_nbapi.ofp131_port_mod_pad2_get, _mul_nbapi.ofp131_port_mod_pad2_set)
    __swig_setmethods__["config"] = _mul_nbapi.ofp131_port_mod_config_set
    __swig_getmethods__["config"] = _mul_nbapi.ofp131_port_mod_config_get
    if _newclass:config = _swig_property(_mul_nbapi.ofp131_port_mod_config_get, _mul_nbapi.ofp131_port_mod_config_set)
    __swig_setmethods__["mask"] = _mul_nbapi.ofp131_port_mod_mask_set
    __swig_getmethods__["mask"] = _mul_nbapi.ofp131_port_mod_mask_get
    if _newclass:mask = _swig_property(_mul_nbapi.ofp131_port_mod_mask_get, _mul_nbapi.ofp131_port_mod_mask_set)
    __swig_setmethods__["advertise"] = _mul_nbapi.ofp131_port_mod_advertise_set
    __swig_getmethods__["advertise"] = _mul_nbapi.ofp131_port_mod_advertise_get
    if _newclass:advertise = _swig_property(_mul_nbapi.ofp131_port_mod_advertise_get, _mul_nbapi.ofp131_port_mod_advertise_set)
    __swig_setmethods__["pad3"] = _mul_nbapi.ofp131_port_mod_pad3_set
    __swig_getmethods__["pad3"] = _mul_nbapi.ofp131_port_mod_pad3_get
    if _newclass:pad3 = _swig_property(_mul_nbapi.ofp131_port_mod_pad3_get, _mul_nbapi.ofp131_port_mod_pad3_set)
    def __init__(self): 
        this = _mul_nbapi.new_ofp131_port_mod()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_ofp131_port_mod
    __del__ = lambda self : None;
ofp131_port_mod_swigregister = _mul_nbapi.ofp131_port_mod_swigregister
ofp131_port_mod_swigregister(ofp131_port_mod)

class ofp131_flow_stats_request(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofp131_flow_stats_request, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofp131_flow_stats_request, name)
    __repr__ = _swig_repr
    __swig_setmethods__["table_id"] = _mul_nbapi.ofp131_flow_stats_request_table_id_set
    __swig_getmethods__["table_id"] = _mul_nbapi.ofp131_flow_stats_request_table_id_get
    if _newclass:table_id = _swig_property(_mul_nbapi.ofp131_flow_stats_request_table_id_get, _mul_nbapi.ofp131_flow_stats_request_table_id_set)
    __swig_setmethods__["pad"] = _mul_nbapi.ofp131_flow_stats_request_pad_set
    __swig_getmethods__["pad"] = _mul_nbapi.ofp131_flow_stats_request_pad_get
    if _newclass:pad = _swig_property(_mul_nbapi.ofp131_flow_stats_request_pad_get, _mul_nbapi.ofp131_flow_stats_request_pad_set)
    __swig_setmethods__["out_port"] = _mul_nbapi.ofp131_flow_stats_request_out_port_set
    __swig_getmethods__["out_port"] = _mul_nbapi.ofp131_flow_stats_request_out_port_get
    if _newclass:out_port = _swig_property(_mul_nbapi.ofp131_flow_stats_request_out_port_get, _mul_nbapi.ofp131_flow_stats_request_out_port_set)
    __swig_setmethods__["out_group"] = _mul_nbapi.ofp131_flow_stats_request_out_group_set
    __swig_getmethods__["out_group"] = _mul_nbapi.ofp131_flow_stats_request_out_group_get
    if _newclass:out_group = _swig_property(_mul_nbapi.ofp131_flow_stats_request_out_group_get, _mul_nbapi.ofp131_flow_stats_request_out_group_set)
    __swig_setmethods__["pad2"] = _mul_nbapi.ofp131_flow_stats_request_pad2_set
    __swig_getmethods__["pad2"] = _mul_nbapi.ofp131_flow_stats_request_pad2_get
    if _newclass:pad2 = _swig_property(_mul_nbapi.ofp131_flow_stats_request_pad2_get, _mul_nbapi.ofp131_flow_stats_request_pad2_set)
    __swig_setmethods__["cookie"] = _mul_nbapi.ofp131_flow_stats_request_cookie_set
    __swig_getmethods__["cookie"] = _mul_nbapi.ofp131_flow_stats_request_cookie_get
    if _newclass:cookie = _swig_property(_mul_nbapi.ofp131_flow_stats_request_cookie_get, _mul_nbapi.ofp131_flow_stats_request_cookie_set)
    __swig_setmethods__["cookie_mask"] = _mul_nbapi.ofp131_flow_stats_request_cookie_mask_set
    __swig_getmethods__["cookie_mask"] = _mul_nbapi.ofp131_flow_stats_request_cookie_mask_get
    if _newclass:cookie_mask = _swig_property(_mul_nbapi.ofp131_flow_stats_request_cookie_mask_get, _mul_nbapi.ofp131_flow_stats_request_cookie_mask_set)
    __swig_setmethods__["match"] = _mul_nbapi.ofp131_flow_stats_request_match_set
    __swig_getmethods__["match"] = _mul_nbapi.ofp131_flow_stats_request_match_get
    if _newclass:match = _swig_property(_mul_nbapi.ofp131_flow_stats_request_match_get, _mul_nbapi.ofp131_flow_stats_request_match_set)
    def __init__(self): 
        this = _mul_nbapi.new_ofp131_flow_stats_request()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_ofp131_flow_stats_request
    __del__ = lambda self : None;
ofp131_flow_stats_request_swigregister = _mul_nbapi.ofp131_flow_stats_request_swigregister
ofp131_flow_stats_request_swigregister(ofp131_flow_stats_request)

class ofp131_flow_stats(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofp131_flow_stats, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofp131_flow_stats, name)
    __repr__ = _swig_repr
    __swig_setmethods__["length"] = _mul_nbapi.ofp131_flow_stats_length_set
    __swig_getmethods__["length"] = _mul_nbapi.ofp131_flow_stats_length_get
    if _newclass:length = _swig_property(_mul_nbapi.ofp131_flow_stats_length_get, _mul_nbapi.ofp131_flow_stats_length_set)
    __swig_setmethods__["table_id"] = _mul_nbapi.ofp131_flow_stats_table_id_set
    __swig_getmethods__["table_id"] = _mul_nbapi.ofp131_flow_stats_table_id_get
    if _newclass:table_id = _swig_property(_mul_nbapi.ofp131_flow_stats_table_id_get, _mul_nbapi.ofp131_flow_stats_table_id_set)
    __swig_setmethods__["pad"] = _mul_nbapi.ofp131_flow_stats_pad_set
    __swig_getmethods__["pad"] = _mul_nbapi.ofp131_flow_stats_pad_get
    if _newclass:pad = _swig_property(_mul_nbapi.ofp131_flow_stats_pad_get, _mul_nbapi.ofp131_flow_stats_pad_set)
    __swig_setmethods__["duration_sec"] = _mul_nbapi.ofp131_flow_stats_duration_sec_set
    __swig_getmethods__["duration_sec"] = _mul_nbapi.ofp131_flow_stats_duration_sec_get
    if _newclass:duration_sec = _swig_property(_mul_nbapi.ofp131_flow_stats_duration_sec_get, _mul_nbapi.ofp131_flow_stats_duration_sec_set)
    __swig_setmethods__["duration_nsec"] = _mul_nbapi.ofp131_flow_stats_duration_nsec_set
    __swig_getmethods__["duration_nsec"] = _mul_nbapi.ofp131_flow_stats_duration_nsec_get
    if _newclass:duration_nsec = _swig_property(_mul_nbapi.ofp131_flow_stats_duration_nsec_get, _mul_nbapi.ofp131_flow_stats_duration_nsec_set)
    __swig_setmethods__["priority"] = _mul_nbapi.ofp131_flow_stats_priority_set
    __swig_getmethods__["priority"] = _mul_nbapi.ofp131_flow_stats_priority_get
    if _newclass:priority = _swig_property(_mul_nbapi.ofp131_flow_stats_priority_get, _mul_nbapi.ofp131_flow_stats_priority_set)
    __swig_setmethods__["idle_timeout"] = _mul_nbapi.ofp131_flow_stats_idle_timeout_set
    __swig_getmethods__["idle_timeout"] = _mul_nbapi.ofp131_flow_stats_idle_timeout_get
    if _newclass:idle_timeout = _swig_property(_mul_nbapi.ofp131_flow_stats_idle_timeout_get, _mul_nbapi.ofp131_flow_stats_idle_timeout_set)
    __swig_setmethods__["hard_timeout"] = _mul_nbapi.ofp131_flow_stats_hard_timeout_set
    __swig_getmethods__["hard_timeout"] = _mul_nbapi.ofp131_flow_stats_hard_timeout_get
    if _newclass:hard_timeout = _swig_property(_mul_nbapi.ofp131_flow_stats_hard_timeout_get, _mul_nbapi.ofp131_flow_stats_hard_timeout_set)
    __swig_setmethods__["flags"] = _mul_nbapi.ofp131_flow_stats_flags_set
    __swig_getmethods__["flags"] = _mul_nbapi.ofp131_flow_stats_flags_get
    if _newclass:flags = _swig_property(_mul_nbapi.ofp131_flow_stats_flags_get, _mul_nbapi.ofp131_flow_stats_flags_set)
    __swig_setmethods__["pad2"] = _mul_nbapi.ofp131_flow_stats_pad2_set
    __swig_getmethods__["pad2"] = _mul_nbapi.ofp131_flow_stats_pad2_get
    if _newclass:pad2 = _swig_property(_mul_nbapi.ofp131_flow_stats_pad2_get, _mul_nbapi.ofp131_flow_stats_pad2_set)
    __swig_setmethods__["cookie"] = _mul_nbapi.ofp131_flow_stats_cookie_set
    __swig_getmethods__["cookie"] = _mul_nbapi.ofp131_flow_stats_cookie_get
    if _newclass:cookie = _swig_property(_mul_nbapi.ofp131_flow_stats_cookie_get, _mul_nbapi.ofp131_flow_stats_cookie_set)
    __swig_setmethods__["packet_count"] = _mul_nbapi.ofp131_flow_stats_packet_count_set
    __swig_getmethods__["packet_count"] = _mul_nbapi.ofp131_flow_stats_packet_count_get
    if _newclass:packet_count = _swig_property(_mul_nbapi.ofp131_flow_stats_packet_count_get, _mul_nbapi.ofp131_flow_stats_packet_count_set)
    __swig_setmethods__["byte_count"] = _mul_nbapi.ofp131_flow_stats_byte_count_set
    __swig_getmethods__["byte_count"] = _mul_nbapi.ofp131_flow_stats_byte_count_get
    if _newclass:byte_count = _swig_property(_mul_nbapi.ofp131_flow_stats_byte_count_get, _mul_nbapi.ofp131_flow_stats_byte_count_set)
    __swig_setmethods__["match"] = _mul_nbapi.ofp131_flow_stats_match_set
    __swig_getmethods__["match"] = _mul_nbapi.ofp131_flow_stats_match_get
    if _newclass:match = _swig_property(_mul_nbapi.ofp131_flow_stats_match_get, _mul_nbapi.ofp131_flow_stats_match_set)
    def __init__(self): 
        this = _mul_nbapi.new_ofp131_flow_stats()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_ofp131_flow_stats
    __del__ = lambda self : None;
ofp131_flow_stats_swigregister = _mul_nbapi.ofp131_flow_stats_swigregister
ofp131_flow_stats_swigregister(ofp131_flow_stats)

class ofp131_aggregate_stats_request(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofp131_aggregate_stats_request, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofp131_aggregate_stats_request, name)
    __repr__ = _swig_repr
    __swig_setmethods__["table_id"] = _mul_nbapi.ofp131_aggregate_stats_request_table_id_set
    __swig_getmethods__["table_id"] = _mul_nbapi.ofp131_aggregate_stats_request_table_id_get
    if _newclass:table_id = _swig_property(_mul_nbapi.ofp131_aggregate_stats_request_table_id_get, _mul_nbapi.ofp131_aggregate_stats_request_table_id_set)
    __swig_setmethods__["pad"] = _mul_nbapi.ofp131_aggregate_stats_request_pad_set
    __swig_getmethods__["pad"] = _mul_nbapi.ofp131_aggregate_stats_request_pad_get
    if _newclass:pad = _swig_property(_mul_nbapi.ofp131_aggregate_stats_request_pad_get, _mul_nbapi.ofp131_aggregate_stats_request_pad_set)
    __swig_setmethods__["out_port"] = _mul_nbapi.ofp131_aggregate_stats_request_out_port_set
    __swig_getmethods__["out_port"] = _mul_nbapi.ofp131_aggregate_stats_request_out_port_get
    if _newclass:out_port = _swig_property(_mul_nbapi.ofp131_aggregate_stats_request_out_port_get, _mul_nbapi.ofp131_aggregate_stats_request_out_port_set)
    __swig_setmethods__["out_group"] = _mul_nbapi.ofp131_aggregate_stats_request_out_group_set
    __swig_getmethods__["out_group"] = _mul_nbapi.ofp131_aggregate_stats_request_out_group_get
    if _newclass:out_group = _swig_property(_mul_nbapi.ofp131_aggregate_stats_request_out_group_get, _mul_nbapi.ofp131_aggregate_stats_request_out_group_set)
    __swig_setmethods__["pad2"] = _mul_nbapi.ofp131_aggregate_stats_request_pad2_set
    __swig_getmethods__["pad2"] = _mul_nbapi.ofp131_aggregate_stats_request_pad2_get
    if _newclass:pad2 = _swig_property(_mul_nbapi.ofp131_aggregate_stats_request_pad2_get, _mul_nbapi.ofp131_aggregate_stats_request_pad2_set)
    __swig_setmethods__["cookie"] = _mul_nbapi.ofp131_aggregate_stats_request_cookie_set
    __swig_getmethods__["cookie"] = _mul_nbapi.ofp131_aggregate_stats_request_cookie_get
    if _newclass:cookie = _swig_property(_mul_nbapi.ofp131_aggregate_stats_request_cookie_get, _mul_nbapi.ofp131_aggregate_stats_request_cookie_set)
    __swig_setmethods__["cookie_mask"] = _mul_nbapi.ofp131_aggregate_stats_request_cookie_mask_set
    __swig_getmethods__["cookie_mask"] = _mul_nbapi.ofp131_aggregate_stats_request_cookie_mask_get
    if _newclass:cookie_mask = _swig_property(_mul_nbapi.ofp131_aggregate_stats_request_cookie_mask_get, _mul_nbapi.ofp131_aggregate_stats_request_cookie_mask_set)
    __swig_setmethods__["match"] = _mul_nbapi.ofp131_aggregate_stats_request_match_set
    __swig_getmethods__["match"] = _mul_nbapi.ofp131_aggregate_stats_request_match_get
    if _newclass:match = _swig_property(_mul_nbapi.ofp131_aggregate_stats_request_match_get, _mul_nbapi.ofp131_aggregate_stats_request_match_set)
    def __init__(self): 
        this = _mul_nbapi.new_ofp131_aggregate_stats_request()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_ofp131_aggregate_stats_request
    __del__ = lambda self : None;
ofp131_aggregate_stats_request_swigregister = _mul_nbapi.ofp131_aggregate_stats_request_swigregister
ofp131_aggregate_stats_request_swigregister(ofp131_aggregate_stats_request)

class ofp131_table_stats(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofp131_table_stats, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofp131_table_stats, name)
    __repr__ = _swig_repr
    __swig_setmethods__["table_id"] = _mul_nbapi.ofp131_table_stats_table_id_set
    __swig_getmethods__["table_id"] = _mul_nbapi.ofp131_table_stats_table_id_get
    if _newclass:table_id = _swig_property(_mul_nbapi.ofp131_table_stats_table_id_get, _mul_nbapi.ofp131_table_stats_table_id_set)
    __swig_setmethods__["pad"] = _mul_nbapi.ofp131_table_stats_pad_set
    __swig_getmethods__["pad"] = _mul_nbapi.ofp131_table_stats_pad_get
    if _newclass:pad = _swig_property(_mul_nbapi.ofp131_table_stats_pad_get, _mul_nbapi.ofp131_table_stats_pad_set)
    __swig_setmethods__["active_count"] = _mul_nbapi.ofp131_table_stats_active_count_set
    __swig_getmethods__["active_count"] = _mul_nbapi.ofp131_table_stats_active_count_get
    if _newclass:active_count = _swig_property(_mul_nbapi.ofp131_table_stats_active_count_get, _mul_nbapi.ofp131_table_stats_active_count_set)
    __swig_setmethods__["lookup_count"] = _mul_nbapi.ofp131_table_stats_lookup_count_set
    __swig_getmethods__["lookup_count"] = _mul_nbapi.ofp131_table_stats_lookup_count_get
    if _newclass:lookup_count = _swig_property(_mul_nbapi.ofp131_table_stats_lookup_count_get, _mul_nbapi.ofp131_table_stats_lookup_count_set)
    __swig_setmethods__["matched_count"] = _mul_nbapi.ofp131_table_stats_matched_count_set
    __swig_getmethods__["matched_count"] = _mul_nbapi.ofp131_table_stats_matched_count_get
    if _newclass:matched_count = _swig_property(_mul_nbapi.ofp131_table_stats_matched_count_get, _mul_nbapi.ofp131_table_stats_matched_count_set)
    def __init__(self): 
        this = _mul_nbapi.new_ofp131_table_stats()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_ofp131_table_stats
    __del__ = lambda self : None;
ofp131_table_stats_swigregister = _mul_nbapi.ofp131_table_stats_swigregister
ofp131_table_stats_swigregister(ofp131_table_stats)

class ofp131_port_stats_request(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofp131_port_stats_request, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofp131_port_stats_request, name)
    __repr__ = _swig_repr
    __swig_setmethods__["port_no"] = _mul_nbapi.ofp131_port_stats_request_port_no_set
    __swig_getmethods__["port_no"] = _mul_nbapi.ofp131_port_stats_request_port_no_get
    if _newclass:port_no = _swig_property(_mul_nbapi.ofp131_port_stats_request_port_no_get, _mul_nbapi.ofp131_port_stats_request_port_no_set)
    __swig_setmethods__["pad"] = _mul_nbapi.ofp131_port_stats_request_pad_set
    __swig_getmethods__["pad"] = _mul_nbapi.ofp131_port_stats_request_pad_get
    if _newclass:pad = _swig_property(_mul_nbapi.ofp131_port_stats_request_pad_get, _mul_nbapi.ofp131_port_stats_request_pad_set)
    def __init__(self): 
        this = _mul_nbapi.new_ofp131_port_stats_request()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_ofp131_port_stats_request
    __del__ = lambda self : None;
ofp131_port_stats_request_swigregister = _mul_nbapi.ofp131_port_stats_request_swigregister
ofp131_port_stats_request_swigregister(ofp131_port_stats_request)

class ofp131_port_stats(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofp131_port_stats, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofp131_port_stats, name)
    __repr__ = _swig_repr
    __swig_setmethods__["port_no"] = _mul_nbapi.ofp131_port_stats_port_no_set
    __swig_getmethods__["port_no"] = _mul_nbapi.ofp131_port_stats_port_no_get
    if _newclass:port_no = _swig_property(_mul_nbapi.ofp131_port_stats_port_no_get, _mul_nbapi.ofp131_port_stats_port_no_set)
    __swig_setmethods__["pad"] = _mul_nbapi.ofp131_port_stats_pad_set
    __swig_getmethods__["pad"] = _mul_nbapi.ofp131_port_stats_pad_get
    if _newclass:pad = _swig_property(_mul_nbapi.ofp131_port_stats_pad_get, _mul_nbapi.ofp131_port_stats_pad_set)
    __swig_setmethods__["rx_packets"] = _mul_nbapi.ofp131_port_stats_rx_packets_set
    __swig_getmethods__["rx_packets"] = _mul_nbapi.ofp131_port_stats_rx_packets_get
    if _newclass:rx_packets = _swig_property(_mul_nbapi.ofp131_port_stats_rx_packets_get, _mul_nbapi.ofp131_port_stats_rx_packets_set)
    __swig_setmethods__["tx_packets"] = _mul_nbapi.ofp131_port_stats_tx_packets_set
    __swig_getmethods__["tx_packets"] = _mul_nbapi.ofp131_port_stats_tx_packets_get
    if _newclass:tx_packets = _swig_property(_mul_nbapi.ofp131_port_stats_tx_packets_get, _mul_nbapi.ofp131_port_stats_tx_packets_set)
    __swig_setmethods__["rx_bytes"] = _mul_nbapi.ofp131_port_stats_rx_bytes_set
    __swig_getmethods__["rx_bytes"] = _mul_nbapi.ofp131_port_stats_rx_bytes_get
    if _newclass:rx_bytes = _swig_property(_mul_nbapi.ofp131_port_stats_rx_bytes_get, _mul_nbapi.ofp131_port_stats_rx_bytes_set)
    __swig_setmethods__["tx_bytes"] = _mul_nbapi.ofp131_port_stats_tx_bytes_set
    __swig_getmethods__["tx_bytes"] = _mul_nbapi.ofp131_port_stats_tx_bytes_get
    if _newclass:tx_bytes = _swig_property(_mul_nbapi.ofp131_port_stats_tx_bytes_get, _mul_nbapi.ofp131_port_stats_tx_bytes_set)
    __swig_setmethods__["rx_dropped"] = _mul_nbapi.ofp131_port_stats_rx_dropped_set
    __swig_getmethods__["rx_dropped"] = _mul_nbapi.ofp131_port_stats_rx_dropped_get
    if _newclass:rx_dropped = _swig_property(_mul_nbapi.ofp131_port_stats_rx_dropped_get, _mul_nbapi.ofp131_port_stats_rx_dropped_set)
    __swig_setmethods__["tx_dropped"] = _mul_nbapi.ofp131_port_stats_tx_dropped_set
    __swig_getmethods__["tx_dropped"] = _mul_nbapi.ofp131_port_stats_tx_dropped_get
    if _newclass:tx_dropped = _swig_property(_mul_nbapi.ofp131_port_stats_tx_dropped_get, _mul_nbapi.ofp131_port_stats_tx_dropped_set)
    __swig_setmethods__["rx_errors"] = _mul_nbapi.ofp131_port_stats_rx_errors_set
    __swig_getmethods__["rx_errors"] = _mul_nbapi.ofp131_port_stats_rx_errors_get
    if _newclass:rx_errors = _swig_property(_mul_nbapi.ofp131_port_stats_rx_errors_get, _mul_nbapi.ofp131_port_stats_rx_errors_set)
    __swig_setmethods__["tx_errors"] = _mul_nbapi.ofp131_port_stats_tx_errors_set
    __swig_getmethods__["tx_errors"] = _mul_nbapi.ofp131_port_stats_tx_errors_get
    if _newclass:tx_errors = _swig_property(_mul_nbapi.ofp131_port_stats_tx_errors_get, _mul_nbapi.ofp131_port_stats_tx_errors_set)
    __swig_setmethods__["rx_frame_err"] = _mul_nbapi.ofp131_port_stats_rx_frame_err_set
    __swig_getmethods__["rx_frame_err"] = _mul_nbapi.ofp131_port_stats_rx_frame_err_get
    if _newclass:rx_frame_err = _swig_property(_mul_nbapi.ofp131_port_stats_rx_frame_err_get, _mul_nbapi.ofp131_port_stats_rx_frame_err_set)
    __swig_setmethods__["rx_over_err"] = _mul_nbapi.ofp131_port_stats_rx_over_err_set
    __swig_getmethods__["rx_over_err"] = _mul_nbapi.ofp131_port_stats_rx_over_err_get
    if _newclass:rx_over_err = _swig_property(_mul_nbapi.ofp131_port_stats_rx_over_err_get, _mul_nbapi.ofp131_port_stats_rx_over_err_set)
    __swig_setmethods__["rx_crc_err"] = _mul_nbapi.ofp131_port_stats_rx_crc_err_set
    __swig_getmethods__["rx_crc_err"] = _mul_nbapi.ofp131_port_stats_rx_crc_err_get
    if _newclass:rx_crc_err = _swig_property(_mul_nbapi.ofp131_port_stats_rx_crc_err_get, _mul_nbapi.ofp131_port_stats_rx_crc_err_set)
    __swig_setmethods__["collisions"] = _mul_nbapi.ofp131_port_stats_collisions_set
    __swig_getmethods__["collisions"] = _mul_nbapi.ofp131_port_stats_collisions_get
    if _newclass:collisions = _swig_property(_mul_nbapi.ofp131_port_stats_collisions_get, _mul_nbapi.ofp131_port_stats_collisions_set)
    __swig_setmethods__["duration_sec"] = _mul_nbapi.ofp131_port_stats_duration_sec_set
    __swig_getmethods__["duration_sec"] = _mul_nbapi.ofp131_port_stats_duration_sec_get
    if _newclass:duration_sec = _swig_property(_mul_nbapi.ofp131_port_stats_duration_sec_get, _mul_nbapi.ofp131_port_stats_duration_sec_set)
    __swig_setmethods__["duration_nsec"] = _mul_nbapi.ofp131_port_stats_duration_nsec_set
    __swig_getmethods__["duration_nsec"] = _mul_nbapi.ofp131_port_stats_duration_nsec_get
    if _newclass:duration_nsec = _swig_property(_mul_nbapi.ofp131_port_stats_duration_nsec_get, _mul_nbapi.ofp131_port_stats_duration_nsec_set)
    def __init__(self): 
        this = _mul_nbapi.new_ofp131_port_stats()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_ofp131_port_stats
    __del__ = lambda self : None;
ofp131_port_stats_swigregister = _mul_nbapi.ofp131_port_stats_swigregister
ofp131_port_stats_swigregister(ofp131_port_stats)

class ofp131_queue_stats_request(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofp131_queue_stats_request, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofp131_queue_stats_request, name)
    __repr__ = _swig_repr
    __swig_setmethods__["port_no"] = _mul_nbapi.ofp131_queue_stats_request_port_no_set
    __swig_getmethods__["port_no"] = _mul_nbapi.ofp131_queue_stats_request_port_no_get
    if _newclass:port_no = _swig_property(_mul_nbapi.ofp131_queue_stats_request_port_no_get, _mul_nbapi.ofp131_queue_stats_request_port_no_set)
    __swig_setmethods__["queue_id"] = _mul_nbapi.ofp131_queue_stats_request_queue_id_set
    __swig_getmethods__["queue_id"] = _mul_nbapi.ofp131_queue_stats_request_queue_id_get
    if _newclass:queue_id = _swig_property(_mul_nbapi.ofp131_queue_stats_request_queue_id_get, _mul_nbapi.ofp131_queue_stats_request_queue_id_set)
    def __init__(self): 
        this = _mul_nbapi.new_ofp131_queue_stats_request()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_ofp131_queue_stats_request
    __del__ = lambda self : None;
ofp131_queue_stats_request_swigregister = _mul_nbapi.ofp131_queue_stats_request_swigregister
ofp131_queue_stats_request_swigregister(ofp131_queue_stats_request)

class ofp131_queue_stats(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofp131_queue_stats, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofp131_queue_stats, name)
    __repr__ = _swig_repr
    __swig_setmethods__["port_no"] = _mul_nbapi.ofp131_queue_stats_port_no_set
    __swig_getmethods__["port_no"] = _mul_nbapi.ofp131_queue_stats_port_no_get
    if _newclass:port_no = _swig_property(_mul_nbapi.ofp131_queue_stats_port_no_get, _mul_nbapi.ofp131_queue_stats_port_no_set)
    __swig_setmethods__["queue_id"] = _mul_nbapi.ofp131_queue_stats_queue_id_set
    __swig_getmethods__["queue_id"] = _mul_nbapi.ofp131_queue_stats_queue_id_get
    if _newclass:queue_id = _swig_property(_mul_nbapi.ofp131_queue_stats_queue_id_get, _mul_nbapi.ofp131_queue_stats_queue_id_set)
    __swig_setmethods__["tx_bytes"] = _mul_nbapi.ofp131_queue_stats_tx_bytes_set
    __swig_getmethods__["tx_bytes"] = _mul_nbapi.ofp131_queue_stats_tx_bytes_get
    if _newclass:tx_bytes = _swig_property(_mul_nbapi.ofp131_queue_stats_tx_bytes_get, _mul_nbapi.ofp131_queue_stats_tx_bytes_set)
    __swig_setmethods__["tx_packets"] = _mul_nbapi.ofp131_queue_stats_tx_packets_set
    __swig_getmethods__["tx_packets"] = _mul_nbapi.ofp131_queue_stats_tx_packets_get
    if _newclass:tx_packets = _swig_property(_mul_nbapi.ofp131_queue_stats_tx_packets_get, _mul_nbapi.ofp131_queue_stats_tx_packets_set)
    __swig_setmethods__["tx_errors"] = _mul_nbapi.ofp131_queue_stats_tx_errors_set
    __swig_getmethods__["tx_errors"] = _mul_nbapi.ofp131_queue_stats_tx_errors_get
    if _newclass:tx_errors = _swig_property(_mul_nbapi.ofp131_queue_stats_tx_errors_get, _mul_nbapi.ofp131_queue_stats_tx_errors_set)
    __swig_setmethods__["duration_sec"] = _mul_nbapi.ofp131_queue_stats_duration_sec_set
    __swig_getmethods__["duration_sec"] = _mul_nbapi.ofp131_queue_stats_duration_sec_get
    if _newclass:duration_sec = _swig_property(_mul_nbapi.ofp131_queue_stats_duration_sec_get, _mul_nbapi.ofp131_queue_stats_duration_sec_set)
    __swig_setmethods__["duration_nsec"] = _mul_nbapi.ofp131_queue_stats_duration_nsec_set
    __swig_getmethods__["duration_nsec"] = _mul_nbapi.ofp131_queue_stats_duration_nsec_get
    if _newclass:duration_nsec = _swig_property(_mul_nbapi.ofp131_queue_stats_duration_nsec_get, _mul_nbapi.ofp131_queue_stats_duration_nsec_set)
    def __init__(self): 
        this = _mul_nbapi.new_ofp131_queue_stats()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_ofp131_queue_stats
    __del__ = lambda self : None;
ofp131_queue_stats_swigregister = _mul_nbapi.ofp131_queue_stats_swigregister
ofp131_queue_stats_swigregister(ofp131_queue_stats)

class ofp131_packet_out(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofp131_packet_out, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofp131_packet_out, name)
    __repr__ = _swig_repr
    __swig_setmethods__["header"] = _mul_nbapi.ofp131_packet_out_header_set
    __swig_getmethods__["header"] = _mul_nbapi.ofp131_packet_out_header_get
    if _newclass:header = _swig_property(_mul_nbapi.ofp131_packet_out_header_get, _mul_nbapi.ofp131_packet_out_header_set)
    __swig_setmethods__["buffer_id"] = _mul_nbapi.ofp131_packet_out_buffer_id_set
    __swig_getmethods__["buffer_id"] = _mul_nbapi.ofp131_packet_out_buffer_id_get
    if _newclass:buffer_id = _swig_property(_mul_nbapi.ofp131_packet_out_buffer_id_get, _mul_nbapi.ofp131_packet_out_buffer_id_set)
    __swig_setmethods__["in_port"] = _mul_nbapi.ofp131_packet_out_in_port_set
    __swig_getmethods__["in_port"] = _mul_nbapi.ofp131_packet_out_in_port_get
    if _newclass:in_port = _swig_property(_mul_nbapi.ofp131_packet_out_in_port_get, _mul_nbapi.ofp131_packet_out_in_port_set)
    __swig_setmethods__["actions_len"] = _mul_nbapi.ofp131_packet_out_actions_len_set
    __swig_getmethods__["actions_len"] = _mul_nbapi.ofp131_packet_out_actions_len_get
    if _newclass:actions_len = _swig_property(_mul_nbapi.ofp131_packet_out_actions_len_get, _mul_nbapi.ofp131_packet_out_actions_len_set)
    __swig_setmethods__["pad"] = _mul_nbapi.ofp131_packet_out_pad_set
    __swig_getmethods__["pad"] = _mul_nbapi.ofp131_packet_out_pad_get
    if _newclass:pad = _swig_property(_mul_nbapi.ofp131_packet_out_pad_get, _mul_nbapi.ofp131_packet_out_pad_set)
    __swig_setmethods__["actions"] = _mul_nbapi.ofp131_packet_out_actions_set
    __swig_getmethods__["actions"] = _mul_nbapi.ofp131_packet_out_actions_get
    if _newclass:actions = _swig_property(_mul_nbapi.ofp131_packet_out_actions_get, _mul_nbapi.ofp131_packet_out_actions_set)
    def __init__(self): 
        this = _mul_nbapi.new_ofp131_packet_out()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_ofp131_packet_out
    __del__ = lambda self : None;
ofp131_packet_out_swigregister = _mul_nbapi.ofp131_packet_out_swigregister
ofp131_packet_out_swigregister(ofp131_packet_out)

class ofp131_packet_in(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofp131_packet_in, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofp131_packet_in, name)
    __repr__ = _swig_repr
    __swig_setmethods__["header"] = _mul_nbapi.ofp131_packet_in_header_set
    __swig_getmethods__["header"] = _mul_nbapi.ofp131_packet_in_header_get
    if _newclass:header = _swig_property(_mul_nbapi.ofp131_packet_in_header_get, _mul_nbapi.ofp131_packet_in_header_set)
    __swig_setmethods__["buffer_id"] = _mul_nbapi.ofp131_packet_in_buffer_id_set
    __swig_getmethods__["buffer_id"] = _mul_nbapi.ofp131_packet_in_buffer_id_get
    if _newclass:buffer_id = _swig_property(_mul_nbapi.ofp131_packet_in_buffer_id_get, _mul_nbapi.ofp131_packet_in_buffer_id_set)
    __swig_setmethods__["total_len"] = _mul_nbapi.ofp131_packet_in_total_len_set
    __swig_getmethods__["total_len"] = _mul_nbapi.ofp131_packet_in_total_len_get
    if _newclass:total_len = _swig_property(_mul_nbapi.ofp131_packet_in_total_len_get, _mul_nbapi.ofp131_packet_in_total_len_set)
    __swig_setmethods__["reason"] = _mul_nbapi.ofp131_packet_in_reason_set
    __swig_getmethods__["reason"] = _mul_nbapi.ofp131_packet_in_reason_get
    if _newclass:reason = _swig_property(_mul_nbapi.ofp131_packet_in_reason_get, _mul_nbapi.ofp131_packet_in_reason_set)
    __swig_setmethods__["table_id"] = _mul_nbapi.ofp131_packet_in_table_id_set
    __swig_getmethods__["table_id"] = _mul_nbapi.ofp131_packet_in_table_id_get
    if _newclass:table_id = _swig_property(_mul_nbapi.ofp131_packet_in_table_id_get, _mul_nbapi.ofp131_packet_in_table_id_set)
    __swig_setmethods__["cookie"] = _mul_nbapi.ofp131_packet_in_cookie_set
    __swig_getmethods__["cookie"] = _mul_nbapi.ofp131_packet_in_cookie_get
    if _newclass:cookie = _swig_property(_mul_nbapi.ofp131_packet_in_cookie_get, _mul_nbapi.ofp131_packet_in_cookie_set)
    __swig_setmethods__["match"] = _mul_nbapi.ofp131_packet_in_match_set
    __swig_getmethods__["match"] = _mul_nbapi.ofp131_packet_in_match_get
    if _newclass:match = _swig_property(_mul_nbapi.ofp131_packet_in_match_get, _mul_nbapi.ofp131_packet_in_match_set)
    def __init__(self): 
        this = _mul_nbapi.new_ofp131_packet_in()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_ofp131_packet_in
    __del__ = lambda self : None;
ofp131_packet_in_swigregister = _mul_nbapi.ofp131_packet_in_swigregister
ofp131_packet_in_swigregister(ofp131_packet_in)

class ofp131_flow_removed(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofp131_flow_removed, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofp131_flow_removed, name)
    __repr__ = _swig_repr
    __swig_setmethods__["header"] = _mul_nbapi.ofp131_flow_removed_header_set
    __swig_getmethods__["header"] = _mul_nbapi.ofp131_flow_removed_header_get
    if _newclass:header = _swig_property(_mul_nbapi.ofp131_flow_removed_header_get, _mul_nbapi.ofp131_flow_removed_header_set)
    __swig_setmethods__["cookie"] = _mul_nbapi.ofp131_flow_removed_cookie_set
    __swig_getmethods__["cookie"] = _mul_nbapi.ofp131_flow_removed_cookie_get
    if _newclass:cookie = _swig_property(_mul_nbapi.ofp131_flow_removed_cookie_get, _mul_nbapi.ofp131_flow_removed_cookie_set)
    __swig_setmethods__["priority"] = _mul_nbapi.ofp131_flow_removed_priority_set
    __swig_getmethods__["priority"] = _mul_nbapi.ofp131_flow_removed_priority_get
    if _newclass:priority = _swig_property(_mul_nbapi.ofp131_flow_removed_priority_get, _mul_nbapi.ofp131_flow_removed_priority_set)
    __swig_setmethods__["reason"] = _mul_nbapi.ofp131_flow_removed_reason_set
    __swig_getmethods__["reason"] = _mul_nbapi.ofp131_flow_removed_reason_get
    if _newclass:reason = _swig_property(_mul_nbapi.ofp131_flow_removed_reason_get, _mul_nbapi.ofp131_flow_removed_reason_set)
    __swig_setmethods__["table_id"] = _mul_nbapi.ofp131_flow_removed_table_id_set
    __swig_getmethods__["table_id"] = _mul_nbapi.ofp131_flow_removed_table_id_get
    if _newclass:table_id = _swig_property(_mul_nbapi.ofp131_flow_removed_table_id_get, _mul_nbapi.ofp131_flow_removed_table_id_set)
    __swig_setmethods__["duration_sec"] = _mul_nbapi.ofp131_flow_removed_duration_sec_set
    __swig_getmethods__["duration_sec"] = _mul_nbapi.ofp131_flow_removed_duration_sec_get
    if _newclass:duration_sec = _swig_property(_mul_nbapi.ofp131_flow_removed_duration_sec_get, _mul_nbapi.ofp131_flow_removed_duration_sec_set)
    __swig_setmethods__["duration_nsec"] = _mul_nbapi.ofp131_flow_removed_duration_nsec_set
    __swig_getmethods__["duration_nsec"] = _mul_nbapi.ofp131_flow_removed_duration_nsec_get
    if _newclass:duration_nsec = _swig_property(_mul_nbapi.ofp131_flow_removed_duration_nsec_get, _mul_nbapi.ofp131_flow_removed_duration_nsec_set)
    __swig_setmethods__["idle_timeout"] = _mul_nbapi.ofp131_flow_removed_idle_timeout_set
    __swig_getmethods__["idle_timeout"] = _mul_nbapi.ofp131_flow_removed_idle_timeout_get
    if _newclass:idle_timeout = _swig_property(_mul_nbapi.ofp131_flow_removed_idle_timeout_get, _mul_nbapi.ofp131_flow_removed_idle_timeout_set)
    __swig_setmethods__["hard_timeout"] = _mul_nbapi.ofp131_flow_removed_hard_timeout_set
    __swig_getmethods__["hard_timeout"] = _mul_nbapi.ofp131_flow_removed_hard_timeout_get
    if _newclass:hard_timeout = _swig_property(_mul_nbapi.ofp131_flow_removed_hard_timeout_get, _mul_nbapi.ofp131_flow_removed_hard_timeout_set)
    __swig_setmethods__["packet_count"] = _mul_nbapi.ofp131_flow_removed_packet_count_set
    __swig_getmethods__["packet_count"] = _mul_nbapi.ofp131_flow_removed_packet_count_get
    if _newclass:packet_count = _swig_property(_mul_nbapi.ofp131_flow_removed_packet_count_get, _mul_nbapi.ofp131_flow_removed_packet_count_set)
    __swig_setmethods__["byte_count"] = _mul_nbapi.ofp131_flow_removed_byte_count_set
    __swig_getmethods__["byte_count"] = _mul_nbapi.ofp131_flow_removed_byte_count_get
    if _newclass:byte_count = _swig_property(_mul_nbapi.ofp131_flow_removed_byte_count_get, _mul_nbapi.ofp131_flow_removed_byte_count_set)
    __swig_setmethods__["match"] = _mul_nbapi.ofp131_flow_removed_match_set
    __swig_getmethods__["match"] = _mul_nbapi.ofp131_flow_removed_match_get
    if _newclass:match = _swig_property(_mul_nbapi.ofp131_flow_removed_match_get, _mul_nbapi.ofp131_flow_removed_match_set)
    def __init__(self): 
        this = _mul_nbapi.new_ofp131_flow_removed()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_ofp131_flow_removed
    __del__ = lambda self : None;
ofp131_flow_removed_swigregister = _mul_nbapi.ofp131_flow_removed_swigregister
ofp131_flow_removed_swigregister(ofp131_flow_removed)

class ofp131_port_status(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofp131_port_status, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofp131_port_status, name)
    __repr__ = _swig_repr
    __swig_setmethods__["header"] = _mul_nbapi.ofp131_port_status_header_set
    __swig_getmethods__["header"] = _mul_nbapi.ofp131_port_status_header_get
    if _newclass:header = _swig_property(_mul_nbapi.ofp131_port_status_header_get, _mul_nbapi.ofp131_port_status_header_set)
    __swig_setmethods__["reason"] = _mul_nbapi.ofp131_port_status_reason_set
    __swig_getmethods__["reason"] = _mul_nbapi.ofp131_port_status_reason_get
    if _newclass:reason = _swig_property(_mul_nbapi.ofp131_port_status_reason_get, _mul_nbapi.ofp131_port_status_reason_set)
    __swig_setmethods__["pad"] = _mul_nbapi.ofp131_port_status_pad_set
    __swig_getmethods__["pad"] = _mul_nbapi.ofp131_port_status_pad_get
    if _newclass:pad = _swig_property(_mul_nbapi.ofp131_port_status_pad_get, _mul_nbapi.ofp131_port_status_pad_set)
    __swig_setmethods__["desc"] = _mul_nbapi.ofp131_port_status_desc_set
    __swig_getmethods__["desc"] = _mul_nbapi.ofp131_port_status_desc_get
    if _newclass:desc = _swig_property(_mul_nbapi.ofp131_port_status_desc_get, _mul_nbapi.ofp131_port_status_desc_set)
    def __init__(self): 
        this = _mul_nbapi.new_ofp131_port_status()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_ofp131_port_status
    __del__ = lambda self : None;
ofp131_port_status_swigregister = _mul_nbapi.ofp131_port_status_swigregister
ofp131_port_status_swigregister(ofp131_port_status)

class ofp131_queue_get_config_request(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofp131_queue_get_config_request, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofp131_queue_get_config_request, name)
    __repr__ = _swig_repr
    __swig_setmethods__["header"] = _mul_nbapi.ofp131_queue_get_config_request_header_set
    __swig_getmethods__["header"] = _mul_nbapi.ofp131_queue_get_config_request_header_get
    if _newclass:header = _swig_property(_mul_nbapi.ofp131_queue_get_config_request_header_get, _mul_nbapi.ofp131_queue_get_config_request_header_set)
    __swig_setmethods__["port"] = _mul_nbapi.ofp131_queue_get_config_request_port_set
    __swig_getmethods__["port"] = _mul_nbapi.ofp131_queue_get_config_request_port_get
    if _newclass:port = _swig_property(_mul_nbapi.ofp131_queue_get_config_request_port_get, _mul_nbapi.ofp131_queue_get_config_request_port_set)
    __swig_setmethods__["pad"] = _mul_nbapi.ofp131_queue_get_config_request_pad_set
    __swig_getmethods__["pad"] = _mul_nbapi.ofp131_queue_get_config_request_pad_get
    if _newclass:pad = _swig_property(_mul_nbapi.ofp131_queue_get_config_request_pad_get, _mul_nbapi.ofp131_queue_get_config_request_pad_set)
    def __init__(self): 
        this = _mul_nbapi.new_ofp131_queue_get_config_request()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_ofp131_queue_get_config_request
    __del__ = lambda self : None;
ofp131_queue_get_config_request_swigregister = _mul_nbapi.ofp131_queue_get_config_request_swigregister
ofp131_queue_get_config_request_swigregister(ofp131_queue_get_config_request)

class ofp131_queue_get_config_reply(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofp131_queue_get_config_reply, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofp131_queue_get_config_reply, name)
    __repr__ = _swig_repr
    __swig_setmethods__["header"] = _mul_nbapi.ofp131_queue_get_config_reply_header_set
    __swig_getmethods__["header"] = _mul_nbapi.ofp131_queue_get_config_reply_header_get
    if _newclass:header = _swig_property(_mul_nbapi.ofp131_queue_get_config_reply_header_get, _mul_nbapi.ofp131_queue_get_config_reply_header_set)
    __swig_setmethods__["port"] = _mul_nbapi.ofp131_queue_get_config_reply_port_set
    __swig_getmethods__["port"] = _mul_nbapi.ofp131_queue_get_config_reply_port_get
    if _newclass:port = _swig_property(_mul_nbapi.ofp131_queue_get_config_reply_port_get, _mul_nbapi.ofp131_queue_get_config_reply_port_set)
    __swig_setmethods__["pad"] = _mul_nbapi.ofp131_queue_get_config_reply_pad_set
    __swig_getmethods__["pad"] = _mul_nbapi.ofp131_queue_get_config_reply_pad_get
    if _newclass:pad = _swig_property(_mul_nbapi.ofp131_queue_get_config_reply_pad_get, _mul_nbapi.ofp131_queue_get_config_reply_pad_set)
    __swig_setmethods__["queues"] = _mul_nbapi.ofp131_queue_get_config_reply_queues_set
    __swig_getmethods__["queues"] = _mul_nbapi.ofp131_queue_get_config_reply_queues_get
    if _newclass:queues = _swig_property(_mul_nbapi.ofp131_queue_get_config_reply_queues_get, _mul_nbapi.ofp131_queue_get_config_reply_queues_set)
    def __init__(self): 
        this = _mul_nbapi.new_ofp131_queue_get_config_reply()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_ofp131_queue_get_config_reply
    __del__ = lambda self : None;
ofp131_queue_get_config_reply_swigregister = _mul_nbapi.ofp131_queue_get_config_reply_swigregister
ofp131_queue_get_config_reply_swigregister(ofp131_queue_get_config_reply)

OFPET131_HELLO_FAILED = _mul_nbapi.OFPET131_HELLO_FAILED
OFPET131_BAD_REQUEST = _mul_nbapi.OFPET131_BAD_REQUEST
OFPET131_BAD_ACTION = _mul_nbapi.OFPET131_BAD_ACTION
OFPET131_BAD_INSTRUCTION = _mul_nbapi.OFPET131_BAD_INSTRUCTION
OFPET131_BAD_MATCH = _mul_nbapi.OFPET131_BAD_MATCH
OFPET131_FLOW_MOD_FAILED = _mul_nbapi.OFPET131_FLOW_MOD_FAILED
OFPET131_GROUP_MOD_FAILED = _mul_nbapi.OFPET131_GROUP_MOD_FAILED
OFPET131_PORT_MOD_FAILED = _mul_nbapi.OFPET131_PORT_MOD_FAILED
OFPET131_TABLE_MOD_FAILED = _mul_nbapi.OFPET131_TABLE_MOD_FAILED
OFPET131_QUEUE_OP_FAILED = _mul_nbapi.OFPET131_QUEUE_OP_FAILED
OFPET131_SWITCH_CONFIG_FAILED = _mul_nbapi.OFPET131_SWITCH_CONFIG_FAILED
OFPET131_ROLE_REQUEST_FAILED = _mul_nbapi.OFPET131_ROLE_REQUEST_FAILED
OFPET131_METER_MOD_FAILED = _mul_nbapi.OFPET131_METER_MOD_FAILED
OFPET131_TABLE_FEATURES_FAILED = _mul_nbapi.OFPET131_TABLE_FEATURES_FAILED
OFPET131_EXPERIMENTER = _mul_nbapi.OFPET131_EXPERIMENTER
OFPBRC131_BAD_VERSION = _mul_nbapi.OFPBRC131_BAD_VERSION
OFPBRC131_BAD_TYPE = _mul_nbapi.OFPBRC131_BAD_TYPE
OFPBRC131_BAD_MULTIPART = _mul_nbapi.OFPBRC131_BAD_MULTIPART
OFPBRC131_BAD_EXPERIMENTER = _mul_nbapi.OFPBRC131_BAD_EXPERIMENTER
OFPBRC131_BAD_EXP_TYPE = _mul_nbapi.OFPBRC131_BAD_EXP_TYPE
OFPBRC131_EPERM = _mul_nbapi.OFPBRC131_EPERM
OFPBRC131_BAD_LEN = _mul_nbapi.OFPBRC131_BAD_LEN
OFPBRC131_BUFFER_EMPTY = _mul_nbapi.OFPBRC131_BUFFER_EMPTY
OFPBRC131_BUFFER_UNKNOWN = _mul_nbapi.OFPBRC131_BUFFER_UNKNOWN
OFPBRC131_BAD_TABLE_ID = _mul_nbapi.OFPBRC131_BAD_TABLE_ID
OFPBRC131_IS_SLAVE = _mul_nbapi.OFPBRC131_IS_SLAVE
OFPBRC131_BAD_PORT = _mul_nbapi.OFPBRC131_BAD_PORT
OFPBRC131_BAD_PACKET = _mul_nbapi.OFPBRC131_BAD_PACKET
OFPBRC131_MULTIPART_BUFFER_OVERFLOW = _mul_nbapi.OFPBRC131_MULTIPART_BUFFER_OVERFLOW
OFPBAC131_BAD_TYPE = _mul_nbapi.OFPBAC131_BAD_TYPE
OFPBAC131_BAD_LEN = _mul_nbapi.OFPBAC131_BAD_LEN
OFPBAC131_BAD_EXPERIMENTER = _mul_nbapi.OFPBAC131_BAD_EXPERIMENTER
OFPBAC131_BAD_EXP_TYPE = _mul_nbapi.OFPBAC131_BAD_EXP_TYPE
OFPBAC131_BAD_OUT_PORT = _mul_nbapi.OFPBAC131_BAD_OUT_PORT
OFPBAC131_BAD_ARGUMENT = _mul_nbapi.OFPBAC131_BAD_ARGUMENT
OFPBAC131_EPERM = _mul_nbapi.OFPBAC131_EPERM
OFPBAC131_TOO_MANY = _mul_nbapi.OFPBAC131_TOO_MANY
OFPBAC131_BAD_QUEUE = _mul_nbapi.OFPBAC131_BAD_QUEUE
OFPBAC131_BAD_OUT_GROUP = _mul_nbapi.OFPBAC131_BAD_OUT_GROUP
OFPBAC131_MATCH_INCONSISTENT = _mul_nbapi.OFPBAC131_MATCH_INCONSISTENT
OFPBAC131_UNSUPPORTED_ORDER = _mul_nbapi.OFPBAC131_UNSUPPORTED_ORDER
OFPBAC131_BAD_TAG = _mul_nbapi.OFPBAC131_BAD_TAG
OFPBAC131_BAD_SET_TYPE = _mul_nbapi.OFPBAC131_BAD_SET_TYPE
OFPBAC131_BAD_SET_LEN = _mul_nbapi.OFPBAC131_BAD_SET_LEN
OFPBAC131_BAD_SET_ARGUMENT = _mul_nbapi.OFPBAC131_BAD_SET_ARGUMENT
OFPBIC131_UNKNOWN_INST = _mul_nbapi.OFPBIC131_UNKNOWN_INST
OFPBIC131_UNSUP_INST = _mul_nbapi.OFPBIC131_UNSUP_INST
OFPBIC131_BAD_TABLE_ID = _mul_nbapi.OFPBIC131_BAD_TABLE_ID
OFPBIC131_UNSUP_METADATA = _mul_nbapi.OFPBIC131_UNSUP_METADATA
OFPBIC131_UNSUP_METADATA_MASK = _mul_nbapi.OFPBIC131_UNSUP_METADATA_MASK
OFPBIC131_BAD_EXPERIMENTER = _mul_nbapi.OFPBIC131_BAD_EXPERIMENTER
OFPBIC131_BAD_EXP_TYPE = _mul_nbapi.OFPBIC131_BAD_EXP_TYPE
OFPBIC131_BAD_LEN = _mul_nbapi.OFPBIC131_BAD_LEN
OFPBIC131_EPERM = _mul_nbapi.OFPBIC131_EPERM
OFPBMC131_BAD_TYPE = _mul_nbapi.OFPBMC131_BAD_TYPE
OFPBMC131_BAD_LEN = _mul_nbapi.OFPBMC131_BAD_LEN
OFPBMC131_BAD_TAG = _mul_nbapi.OFPBMC131_BAD_TAG
OFPBMC131_BAD_DL_ADDR_MASK = _mul_nbapi.OFPBMC131_BAD_DL_ADDR_MASK
OFPBMC131_BAD_NW_ADDR_MASK = _mul_nbapi.OFPBMC131_BAD_NW_ADDR_MASK
OFPBMC131_BAD_WILDCARDS = _mul_nbapi.OFPBMC131_BAD_WILDCARDS
OFPBMC131_BAD_FIELD = _mul_nbapi.OFPBMC131_BAD_FIELD
OFPBMC131_BAD_VALUE = _mul_nbapi.OFPBMC131_BAD_VALUE
OFPBMC131_BAD_MASK = _mul_nbapi.OFPBMC131_BAD_MASK
OFPBMC131_BAD_PREREQ = _mul_nbapi.OFPBMC131_BAD_PREREQ
OFPBMC131_DUP_FIELD = _mul_nbapi.OFPBMC131_DUP_FIELD
OFPBMC131_EPERM = _mul_nbapi.OFPBMC131_EPERM
OFPFMFC131_UNKNOWN = _mul_nbapi.OFPFMFC131_UNKNOWN
OFPFMFC131_TABLE_FULL = _mul_nbapi.OFPFMFC131_TABLE_FULL
OFPFMFC131_BAD_TABLE_ID = _mul_nbapi.OFPFMFC131_BAD_TABLE_ID
OFPFMFC131_OVERLAP = _mul_nbapi.OFPFMFC131_OVERLAP
OFPFMFC131_EPERM = _mul_nbapi.OFPFMFC131_EPERM
OFPFMFC131_BAD_TIMEOUT = _mul_nbapi.OFPFMFC131_BAD_TIMEOUT
OFPFMFC131_BAD_COMMAND = _mul_nbapi.OFPFMFC131_BAD_COMMAND
OFPFMFC131_BAD_FLAGS = _mul_nbapi.OFPFMFC131_BAD_FLAGS
OFPGMFC131_GROUP_EXISTS = _mul_nbapi.OFPGMFC131_GROUP_EXISTS
OFPGMFC131_INVALID_GROUP = _mul_nbapi.OFPGMFC131_INVALID_GROUP
OFPGMFC131_WEIGHT_UNSUPPORTED = _mul_nbapi.OFPGMFC131_WEIGHT_UNSUPPORTED
OFPGMFC131_OUT_OF_GROUPS = _mul_nbapi.OFPGMFC131_OUT_OF_GROUPS
OFPGMFC131_OUT_OF_BUCKETS = _mul_nbapi.OFPGMFC131_OUT_OF_BUCKETS
OFPGMFC131_CHAINING_UNSUPPORTED = _mul_nbapi.OFPGMFC131_CHAINING_UNSUPPORTED
OFPGMFC131_WATCH_UNSUPPORTED = _mul_nbapi.OFPGMFC131_WATCH_UNSUPPORTED
OFPGMFC131_LOOP = _mul_nbapi.OFPGMFC131_LOOP
OFPGMFC131_UNKNOWN_GROUP = _mul_nbapi.OFPGMFC131_UNKNOWN_GROUP
OFPGMFC131_CHAINED_GROUP = _mul_nbapi.OFPGMFC131_CHAINED_GROUP
OFPGMFC131_BAD_TYPE = _mul_nbapi.OFPGMFC131_BAD_TYPE
OFPGMFC131_BAD_COMMAND = _mul_nbapi.OFPGMFC131_BAD_COMMAND
OFPGMFC131_BAD_BUCKET = _mul_nbapi.OFPGMFC131_BAD_BUCKET
OFPGMFC131_BAD_WATCH = _mul_nbapi.OFPGMFC131_BAD_WATCH
OFPGMFC131_EPERM = _mul_nbapi.OFPGMFC131_EPERM
OFPPMFC131_BAD_PORT = _mul_nbapi.OFPPMFC131_BAD_PORT
OFPPMFC131_BAD_HW_ADDR = _mul_nbapi.OFPPMFC131_BAD_HW_ADDR
OFPPMFC131_BAD_CONFIG = _mul_nbapi.OFPPMFC131_BAD_CONFIG
OFPPMFC131_BAD_ADVERTISE = _mul_nbapi.OFPPMFC131_BAD_ADVERTISE
OFPPMFC131_EPERM = _mul_nbapi.OFPPMFC131_EPERM
OFPQOFC131_BAD_PORT = _mul_nbapi.OFPQOFC131_BAD_PORT
OFPQOFC131_BAD_QUEUE = _mul_nbapi.OFPQOFC131_BAD_QUEUE
OFPQOFC131_EPERM = _mul_nbapi.OFPQOFC131_EPERM
class ofp131_error_experimenter_msg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofp131_error_experimenter_msg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofp131_error_experimenter_msg, name)
    __repr__ = _swig_repr
    __swig_setmethods__["header"] = _mul_nbapi.ofp131_error_experimenter_msg_header_set
    __swig_getmethods__["header"] = _mul_nbapi.ofp131_error_experimenter_msg_header_get
    if _newclass:header = _swig_property(_mul_nbapi.ofp131_error_experimenter_msg_header_get, _mul_nbapi.ofp131_error_experimenter_msg_header_set)
    __swig_setmethods__["type"] = _mul_nbapi.ofp131_error_experimenter_msg_type_set
    __swig_getmethods__["type"] = _mul_nbapi.ofp131_error_experimenter_msg_type_get
    if _newclass:type = _swig_property(_mul_nbapi.ofp131_error_experimenter_msg_type_get, _mul_nbapi.ofp131_error_experimenter_msg_type_set)
    __swig_setmethods__["exp_type"] = _mul_nbapi.ofp131_error_experimenter_msg_exp_type_set
    __swig_getmethods__["exp_type"] = _mul_nbapi.ofp131_error_experimenter_msg_exp_type_get
    if _newclass:exp_type = _swig_property(_mul_nbapi.ofp131_error_experimenter_msg_exp_type_get, _mul_nbapi.ofp131_error_experimenter_msg_exp_type_set)
    __swig_setmethods__["experimenter"] = _mul_nbapi.ofp131_error_experimenter_msg_experimenter_set
    __swig_getmethods__["experimenter"] = _mul_nbapi.ofp131_error_experimenter_msg_experimenter_get
    if _newclass:experimenter = _swig_property(_mul_nbapi.ofp131_error_experimenter_msg_experimenter_get, _mul_nbapi.ofp131_error_experimenter_msg_experimenter_set)
    __swig_setmethods__["data"] = _mul_nbapi.ofp131_error_experimenter_msg_data_set
    __swig_getmethods__["data"] = _mul_nbapi.ofp131_error_experimenter_msg_data_get
    if _newclass:data = _swig_property(_mul_nbapi.ofp131_error_experimenter_msg_data_get, _mul_nbapi.ofp131_error_experimenter_msg_data_set)
    def __init__(self): 
        this = _mul_nbapi.new_ofp131_error_experimenter_msg()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_ofp131_error_experimenter_msg
    __del__ = lambda self : None;
ofp131_error_experimenter_msg_swigregister = _mul_nbapi.ofp131_error_experimenter_msg_swigregister
ofp131_error_experimenter_msg_swigregister(ofp131_error_experimenter_msg)

OFPT140_HELLO = _mul_nbapi.OFPT140_HELLO
OFPT140_ERROR = _mul_nbapi.OFPT140_ERROR
OFPT140_ECHO_REQUEST = _mul_nbapi.OFPT140_ECHO_REQUEST
OFPT140_ECHO_REPLY = _mul_nbapi.OFPT140_ECHO_REPLY
OFPT140_EXPERIMENTER = _mul_nbapi.OFPT140_EXPERIMENTER
OFPT140_FEATURES_REQUEST = _mul_nbapi.OFPT140_FEATURES_REQUEST
OFPT140_FEATURES_REPLY = _mul_nbapi.OFPT140_FEATURES_REPLY
OFPT140_GET_CONFIG_REQUEST = _mul_nbapi.OFPT140_GET_CONFIG_REQUEST
OFPT140_GET_CONFIG_REPLY = _mul_nbapi.OFPT140_GET_CONFIG_REPLY
OFPT140_SET_CONFIG = _mul_nbapi.OFPT140_SET_CONFIG
OFPT140_PACKET_IN = _mul_nbapi.OFPT140_PACKET_IN
OFPT140_FLOW_REMOVED = _mul_nbapi.OFPT140_FLOW_REMOVED
OFPT140_PORT_STATUS = _mul_nbapi.OFPT140_PORT_STATUS
OFPT140_PACKET_OUT = _mul_nbapi.OFPT140_PACKET_OUT
OFPT140_FLOW_MOD = _mul_nbapi.OFPT140_FLOW_MOD
OFPT140_GROUP_MOD = _mul_nbapi.OFPT140_GROUP_MOD
OFPT140_PORT_MOD = _mul_nbapi.OFPT140_PORT_MOD
OFPT140_TABLE_MOD = _mul_nbapi.OFPT140_TABLE_MOD
OFPT140_MULTIPART_REQUEST = _mul_nbapi.OFPT140_MULTIPART_REQUEST
OFPT140_MULTIPART_REPLY = _mul_nbapi.OFPT140_MULTIPART_REPLY
OFPT140_BARRIER_REQUEST = _mul_nbapi.OFPT140_BARRIER_REQUEST
OFPT140_BARRIER_REPLY = _mul_nbapi.OFPT140_BARRIER_REPLY
OFPT140_QUEUE_GET_CONFIG_REQUEST = _mul_nbapi.OFPT140_QUEUE_GET_CONFIG_REQUEST
OFPT140_QUEUE_GET_CONFIG_REPLY = _mul_nbapi.OFPT140_QUEUE_GET_CONFIG_REPLY
OFPT140_ROLE_REQUEST = _mul_nbapi.OFPT140_ROLE_REQUEST
OFPT140_ROLE_REPLY = _mul_nbapi.OFPT140_ROLE_REPLY
OFPT140_GET_ASYNC_REQUEST = _mul_nbapi.OFPT140_GET_ASYNC_REQUEST
OFPT140_GET_ASYNC_REPLY = _mul_nbapi.OFPT140_GET_ASYNC_REPLY
OFPT140_SET_ASYNC = _mul_nbapi.OFPT140_SET_ASYNC
OFPT140_METER_MOD = _mul_nbapi.OFPT140_METER_MOD
OFPT140_ROLE_STATUS = _mul_nbapi.OFPT140_ROLE_STATUS
OFPT140_TABLE_STATUS = _mul_nbapi.OFPT140_TABLE_STATUS
OFPT140_REQUESTFORWARD = _mul_nbapi.OFPT140_REQUESTFORWARD
OFPT140_BUNDLE_CONTROL = _mul_nbapi.OFPT140_BUNDLE_CONTROL
OFPT140_BUNDLE_ADD_MESSAGE = _mul_nbapi.OFPT140_BUNDLE_ADD_MESSAGE
class ofp_port_desc_prop_header(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofp_port_desc_prop_header, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofp_port_desc_prop_header, name)
    __repr__ = _swig_repr
    __swig_setmethods__["type"] = _mul_nbapi.ofp_port_desc_prop_header_type_set
    __swig_getmethods__["type"] = _mul_nbapi.ofp_port_desc_prop_header_type_get
    if _newclass:type = _swig_property(_mul_nbapi.ofp_port_desc_prop_header_type_get, _mul_nbapi.ofp_port_desc_prop_header_type_set)
    __swig_setmethods__["length"] = _mul_nbapi.ofp_port_desc_prop_header_length_set
    __swig_getmethods__["length"] = _mul_nbapi.ofp_port_desc_prop_header_length_get
    if _newclass:length = _swig_property(_mul_nbapi.ofp_port_desc_prop_header_length_get, _mul_nbapi.ofp_port_desc_prop_header_length_set)
    def __init__(self): 
        this = _mul_nbapi.new_ofp_port_desc_prop_header()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_ofp_port_desc_prop_header
    __del__ = lambda self : None;
ofp_port_desc_prop_header_swigregister = _mul_nbapi.ofp_port_desc_prop_header_swigregister
ofp_port_desc_prop_header_swigregister(ofp_port_desc_prop_header)

class ofp_port_desc_prop_ethernet(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofp_port_desc_prop_ethernet, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofp_port_desc_prop_ethernet, name)
    __repr__ = _swig_repr
    __swig_setmethods__["type"] = _mul_nbapi.ofp_port_desc_prop_ethernet_type_set
    __swig_getmethods__["type"] = _mul_nbapi.ofp_port_desc_prop_ethernet_type_get
    if _newclass:type = _swig_property(_mul_nbapi.ofp_port_desc_prop_ethernet_type_get, _mul_nbapi.ofp_port_desc_prop_ethernet_type_set)
    __swig_setmethods__["length"] = _mul_nbapi.ofp_port_desc_prop_ethernet_length_set
    __swig_getmethods__["length"] = _mul_nbapi.ofp_port_desc_prop_ethernet_length_get
    if _newclass:length = _swig_property(_mul_nbapi.ofp_port_desc_prop_ethernet_length_get, _mul_nbapi.ofp_port_desc_prop_ethernet_length_set)
    __swig_setmethods__["pad"] = _mul_nbapi.ofp_port_desc_prop_ethernet_pad_set
    __swig_getmethods__["pad"] = _mul_nbapi.ofp_port_desc_prop_ethernet_pad_get
    if _newclass:pad = _swig_property(_mul_nbapi.ofp_port_desc_prop_ethernet_pad_get, _mul_nbapi.ofp_port_desc_prop_ethernet_pad_set)
    __swig_setmethods__["curr"] = _mul_nbapi.ofp_port_desc_prop_ethernet_curr_set
    __swig_getmethods__["curr"] = _mul_nbapi.ofp_port_desc_prop_ethernet_curr_get
    if _newclass:curr = _swig_property(_mul_nbapi.ofp_port_desc_prop_ethernet_curr_get, _mul_nbapi.ofp_port_desc_prop_ethernet_curr_set)
    __swig_setmethods__["advertised"] = _mul_nbapi.ofp_port_desc_prop_ethernet_advertised_set
    __swig_getmethods__["advertised"] = _mul_nbapi.ofp_port_desc_prop_ethernet_advertised_get
    if _newclass:advertised = _swig_property(_mul_nbapi.ofp_port_desc_prop_ethernet_advertised_get, _mul_nbapi.ofp_port_desc_prop_ethernet_advertised_set)
    __swig_setmethods__["supported"] = _mul_nbapi.ofp_port_desc_prop_ethernet_supported_set
    __swig_getmethods__["supported"] = _mul_nbapi.ofp_port_desc_prop_ethernet_supported_get
    if _newclass:supported = _swig_property(_mul_nbapi.ofp_port_desc_prop_ethernet_supported_get, _mul_nbapi.ofp_port_desc_prop_ethernet_supported_set)
    __swig_setmethods__["peer"] = _mul_nbapi.ofp_port_desc_prop_ethernet_peer_set
    __swig_getmethods__["peer"] = _mul_nbapi.ofp_port_desc_prop_ethernet_peer_get
    if _newclass:peer = _swig_property(_mul_nbapi.ofp_port_desc_prop_ethernet_peer_get, _mul_nbapi.ofp_port_desc_prop_ethernet_peer_set)
    __swig_setmethods__["curr_speed"] = _mul_nbapi.ofp_port_desc_prop_ethernet_curr_speed_set
    __swig_getmethods__["curr_speed"] = _mul_nbapi.ofp_port_desc_prop_ethernet_curr_speed_get
    if _newclass:curr_speed = _swig_property(_mul_nbapi.ofp_port_desc_prop_ethernet_curr_speed_get, _mul_nbapi.ofp_port_desc_prop_ethernet_curr_speed_set)
    __swig_setmethods__["max_speed"] = _mul_nbapi.ofp_port_desc_prop_ethernet_max_speed_set
    __swig_getmethods__["max_speed"] = _mul_nbapi.ofp_port_desc_prop_ethernet_max_speed_get
    if _newclass:max_speed = _swig_property(_mul_nbapi.ofp_port_desc_prop_ethernet_max_speed_get, _mul_nbapi.ofp_port_desc_prop_ethernet_max_speed_set)
    def __init__(self): 
        this = _mul_nbapi.new_ofp_port_desc_prop_ethernet()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_ofp_port_desc_prop_ethernet
    __del__ = lambda self : None;
ofp_port_desc_prop_ethernet_swigregister = _mul_nbapi.ofp_port_desc_prop_ethernet_swigregister
ofp_port_desc_prop_ethernet_swigregister(ofp_port_desc_prop_ethernet)

OFPOPF_RX_TUNE = _mul_nbapi.OFPOPF_RX_TUNE
OFPOPF_TX_TUNE = _mul_nbapi.OFPOPF_TX_TUNE
OFPOPF_TX_PWR = _mul_nbapi.OFPOPF_TX_PWR
OFPOPF_USE_FREQ = _mul_nbapi.OFPOPF_USE_FREQ
class ofp_port_desc_prop_optical(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofp_port_desc_prop_optical, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofp_port_desc_prop_optical, name)
    __repr__ = _swig_repr
    __swig_setmethods__["type"] = _mul_nbapi.ofp_port_desc_prop_optical_type_set
    __swig_getmethods__["type"] = _mul_nbapi.ofp_port_desc_prop_optical_type_get
    if _newclass:type = _swig_property(_mul_nbapi.ofp_port_desc_prop_optical_type_get, _mul_nbapi.ofp_port_desc_prop_optical_type_set)
    __swig_setmethods__["length"] = _mul_nbapi.ofp_port_desc_prop_optical_length_set
    __swig_getmethods__["length"] = _mul_nbapi.ofp_port_desc_prop_optical_length_get
    if _newclass:length = _swig_property(_mul_nbapi.ofp_port_desc_prop_optical_length_get, _mul_nbapi.ofp_port_desc_prop_optical_length_set)
    __swig_setmethods__["pad"] = _mul_nbapi.ofp_port_desc_prop_optical_pad_set
    __swig_getmethods__["pad"] = _mul_nbapi.ofp_port_desc_prop_optical_pad_get
    if _newclass:pad = _swig_property(_mul_nbapi.ofp_port_desc_prop_optical_pad_get, _mul_nbapi.ofp_port_desc_prop_optical_pad_set)
    __swig_setmethods__["supported"] = _mul_nbapi.ofp_port_desc_prop_optical_supported_set
    __swig_getmethods__["supported"] = _mul_nbapi.ofp_port_desc_prop_optical_supported_get
    if _newclass:supported = _swig_property(_mul_nbapi.ofp_port_desc_prop_optical_supported_get, _mul_nbapi.ofp_port_desc_prop_optical_supported_set)
    __swig_setmethods__["tx_min_freq_lmda"] = _mul_nbapi.ofp_port_desc_prop_optical_tx_min_freq_lmda_set
    __swig_getmethods__["tx_min_freq_lmda"] = _mul_nbapi.ofp_port_desc_prop_optical_tx_min_freq_lmda_get
    if _newclass:tx_min_freq_lmda = _swig_property(_mul_nbapi.ofp_port_desc_prop_optical_tx_min_freq_lmda_get, _mul_nbapi.ofp_port_desc_prop_optical_tx_min_freq_lmda_set)
    __swig_setmethods__["tx_max_freq_lmda"] = _mul_nbapi.ofp_port_desc_prop_optical_tx_max_freq_lmda_set
    __swig_getmethods__["tx_max_freq_lmda"] = _mul_nbapi.ofp_port_desc_prop_optical_tx_max_freq_lmda_get
    if _newclass:tx_max_freq_lmda = _swig_property(_mul_nbapi.ofp_port_desc_prop_optical_tx_max_freq_lmda_get, _mul_nbapi.ofp_port_desc_prop_optical_tx_max_freq_lmda_set)
    __swig_setmethods__["tx_grid_freq_lmda"] = _mul_nbapi.ofp_port_desc_prop_optical_tx_grid_freq_lmda_set
    __swig_getmethods__["tx_grid_freq_lmda"] = _mul_nbapi.ofp_port_desc_prop_optical_tx_grid_freq_lmda_get
    if _newclass:tx_grid_freq_lmda = _swig_property(_mul_nbapi.ofp_port_desc_prop_optical_tx_grid_freq_lmda_get, _mul_nbapi.ofp_port_desc_prop_optical_tx_grid_freq_lmda_set)
    __swig_setmethods__["rx_min_freq_lmda"] = _mul_nbapi.ofp_port_desc_prop_optical_rx_min_freq_lmda_set
    __swig_getmethods__["rx_min_freq_lmda"] = _mul_nbapi.ofp_port_desc_prop_optical_rx_min_freq_lmda_get
    if _newclass:rx_min_freq_lmda = _swig_property(_mul_nbapi.ofp_port_desc_prop_optical_rx_min_freq_lmda_get, _mul_nbapi.ofp_port_desc_prop_optical_rx_min_freq_lmda_set)
    __swig_setmethods__["rx_max_freq_lmda"] = _mul_nbapi.ofp_port_desc_prop_optical_rx_max_freq_lmda_set
    __swig_getmethods__["rx_max_freq_lmda"] = _mul_nbapi.ofp_port_desc_prop_optical_rx_max_freq_lmda_get
    if _newclass:rx_max_freq_lmda = _swig_property(_mul_nbapi.ofp_port_desc_prop_optical_rx_max_freq_lmda_get, _mul_nbapi.ofp_port_desc_prop_optical_rx_max_freq_lmda_set)
    __swig_setmethods__["rx_grid_freq_lmda"] = _mul_nbapi.ofp_port_desc_prop_optical_rx_grid_freq_lmda_set
    __swig_getmethods__["rx_grid_freq_lmda"] = _mul_nbapi.ofp_port_desc_prop_optical_rx_grid_freq_lmda_get
    if _newclass:rx_grid_freq_lmda = _swig_property(_mul_nbapi.ofp_port_desc_prop_optical_rx_grid_freq_lmda_get, _mul_nbapi.ofp_port_desc_prop_optical_rx_grid_freq_lmda_set)
    __swig_setmethods__["tx_pwr_min"] = _mul_nbapi.ofp_port_desc_prop_optical_tx_pwr_min_set
    __swig_getmethods__["tx_pwr_min"] = _mul_nbapi.ofp_port_desc_prop_optical_tx_pwr_min_get
    if _newclass:tx_pwr_min = _swig_property(_mul_nbapi.ofp_port_desc_prop_optical_tx_pwr_min_get, _mul_nbapi.ofp_port_desc_prop_optical_tx_pwr_min_set)
    __swig_setmethods__["tx_pwr_max"] = _mul_nbapi.ofp_port_desc_prop_optical_tx_pwr_max_set
    __swig_getmethods__["tx_pwr_max"] = _mul_nbapi.ofp_port_desc_prop_optical_tx_pwr_max_get
    if _newclass:tx_pwr_max = _swig_property(_mul_nbapi.ofp_port_desc_prop_optical_tx_pwr_max_get, _mul_nbapi.ofp_port_desc_prop_optical_tx_pwr_max_set)
    def __init__(self): 
        this = _mul_nbapi.new_ofp_port_desc_prop_optical()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_ofp_port_desc_prop_optical
    __del__ = lambda self : None;
ofp_port_desc_prop_optical_swigregister = _mul_nbapi.ofp_port_desc_prop_optical_swigregister
ofp_port_desc_prop_optical_swigregister(ofp_port_desc_prop_optical)

class ofp140_port(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofp140_port, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofp140_port, name)
    __repr__ = _swig_repr
    __swig_setmethods__["port_no"] = _mul_nbapi.ofp140_port_port_no_set
    __swig_getmethods__["port_no"] = _mul_nbapi.ofp140_port_port_no_get
    if _newclass:port_no = _swig_property(_mul_nbapi.ofp140_port_port_no_get, _mul_nbapi.ofp140_port_port_no_set)
    __swig_setmethods__["length"] = _mul_nbapi.ofp140_port_length_set
    __swig_getmethods__["length"] = _mul_nbapi.ofp140_port_length_get
    if _newclass:length = _swig_property(_mul_nbapi.ofp140_port_length_get, _mul_nbapi.ofp140_port_length_set)
    __swig_setmethods__["pad"] = _mul_nbapi.ofp140_port_pad_set
    __swig_getmethods__["pad"] = _mul_nbapi.ofp140_port_pad_get
    if _newclass:pad = _swig_property(_mul_nbapi.ofp140_port_pad_get, _mul_nbapi.ofp140_port_pad_set)
    __swig_setmethods__["hw_addr"] = _mul_nbapi.ofp140_port_hw_addr_set
    __swig_getmethods__["hw_addr"] = _mul_nbapi.ofp140_port_hw_addr_get
    if _newclass:hw_addr = _swig_property(_mul_nbapi.ofp140_port_hw_addr_get, _mul_nbapi.ofp140_port_hw_addr_set)
    __swig_setmethods__["pad2"] = _mul_nbapi.ofp140_port_pad2_set
    __swig_getmethods__["pad2"] = _mul_nbapi.ofp140_port_pad2_get
    if _newclass:pad2 = _swig_property(_mul_nbapi.ofp140_port_pad2_get, _mul_nbapi.ofp140_port_pad2_set)
    __swig_setmethods__["name"] = _mul_nbapi.ofp140_port_name_set
    __swig_getmethods__["name"] = _mul_nbapi.ofp140_port_name_get
    if _newclass:name = _swig_property(_mul_nbapi.ofp140_port_name_get, _mul_nbapi.ofp140_port_name_set)
    __swig_setmethods__["config"] = _mul_nbapi.ofp140_port_config_set
    __swig_getmethods__["config"] = _mul_nbapi.ofp140_port_config_get
    if _newclass:config = _swig_property(_mul_nbapi.ofp140_port_config_get, _mul_nbapi.ofp140_port_config_set)
    __swig_setmethods__["state"] = _mul_nbapi.ofp140_port_state_set
    __swig_getmethods__["state"] = _mul_nbapi.ofp140_port_state_get
    if _newclass:state = _swig_property(_mul_nbapi.ofp140_port_state_get, _mul_nbapi.ofp140_port_state_set)
    __swig_setmethods__["properties"] = _mul_nbapi.ofp140_port_properties_set
    __swig_getmethods__["properties"] = _mul_nbapi.ofp140_port_properties_get
    if _newclass:properties = _swig_property(_mul_nbapi.ofp140_port_properties_get, _mul_nbapi.ofp140_port_properties_set)
    def __init__(self): 
        this = _mul_nbapi.new_ofp140_port()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_ofp140_port
    __del__ = lambda self : None;
ofp140_port_swigregister = _mul_nbapi.ofp140_port_swigregister
ofp140_port_swigregister(ofp140_port)

OFPPC140_PORT_DOWN = _mul_nbapi.OFPPC140_PORT_DOWN
OFPPC140_NO_RECV = _mul_nbapi.OFPPC140_NO_RECV
OFPPC140_NO_FWD = _mul_nbapi.OFPPC140_NO_FWD
OFPPC140_NO_PACKET_IN = _mul_nbapi.OFPPC140_NO_PACKET_IN
OFPPS140_LINK_DOWN = _mul_nbapi.OFPPS140_LINK_DOWN
OFPPS140_BLOCKED = _mul_nbapi.OFPPS140_BLOCKED
OFPPS140_LIVE = _mul_nbapi.OFPPS140_LIVE
OFPP140_MAX = _mul_nbapi.OFPP140_MAX
OFPP140_IN_PORT = _mul_nbapi.OFPP140_IN_PORT
OFPP140_TABLE = _mul_nbapi.OFPP140_TABLE
OFPP140_NORMAL = _mul_nbapi.OFPP140_NORMAL
OFPP140_FLOOD = _mul_nbapi.OFPP140_FLOOD
OFPP140_ALL = _mul_nbapi.OFPP140_ALL
OFPP140_CONTROLLER = _mul_nbapi.OFPP140_CONTROLLER
OFPP140_LOCAL = _mul_nbapi.OFPP140_LOCAL
OFPP140_ANY = _mul_nbapi.OFPP140_ANY
OFPPF140_10MB_HD = _mul_nbapi.OFPPF140_10MB_HD
OFPPF140_10MB_FD = _mul_nbapi.OFPPF140_10MB_FD
OFPPF140_100MB_HD = _mul_nbapi.OFPPF140_100MB_HD
OFPPF140_100MB_FD = _mul_nbapi.OFPPF140_100MB_FD
OFPPF140_1GB_HD = _mul_nbapi.OFPPF140_1GB_HD
OFPPF140_1GB_FD = _mul_nbapi.OFPPF140_1GB_FD
OFPPF140_10GB_FD = _mul_nbapi.OFPPF140_10GB_FD
OFPPF140_40GB_FD = _mul_nbapi.OFPPF140_40GB_FD
OFPPF140_100GB_FD = _mul_nbapi.OFPPF140_100GB_FD
OFPPF140_1TB_FD = _mul_nbapi.OFPPF140_1TB_FD
OFPPF140_OTHER = _mul_nbapi.OFPPF140_OTHER
OFPPF140_COPPER = _mul_nbapi.OFPPF140_COPPER
OFPPF140_FIBER = _mul_nbapi.OFPPF140_FIBER
OFPPF140_AUTONEG = _mul_nbapi.OFPPF140_AUTONEG
OFPPF140_PAUSE = _mul_nbapi.OFPPF140_PAUSE
OFPPF140_PAUSE_ASYM = _mul_nbapi.OFPPF140_PAUSE_ASYM
class ofp140_packet_queue(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofp140_packet_queue, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofp140_packet_queue, name)
    __repr__ = _swig_repr
    __swig_setmethods__["queue_id"] = _mul_nbapi.ofp140_packet_queue_queue_id_set
    __swig_getmethods__["queue_id"] = _mul_nbapi.ofp140_packet_queue_queue_id_get
    if _newclass:queue_id = _swig_property(_mul_nbapi.ofp140_packet_queue_queue_id_get, _mul_nbapi.ofp140_packet_queue_queue_id_set)
    __swig_setmethods__["port"] = _mul_nbapi.ofp140_packet_queue_port_set
    __swig_getmethods__["port"] = _mul_nbapi.ofp140_packet_queue_port_get
    if _newclass:port = _swig_property(_mul_nbapi.ofp140_packet_queue_port_get, _mul_nbapi.ofp140_packet_queue_port_set)
    __swig_setmethods__["len"] = _mul_nbapi.ofp140_packet_queue_len_set
    __swig_getmethods__["len"] = _mul_nbapi.ofp140_packet_queue_len_get
    if _newclass:len = _swig_property(_mul_nbapi.ofp140_packet_queue_len_get, _mul_nbapi.ofp140_packet_queue_len_set)
    __swig_setmethods__["pad"] = _mul_nbapi.ofp140_packet_queue_pad_set
    __swig_getmethods__["pad"] = _mul_nbapi.ofp140_packet_queue_pad_get
    if _newclass:pad = _swig_property(_mul_nbapi.ofp140_packet_queue_pad_get, _mul_nbapi.ofp140_packet_queue_pad_set)
    __swig_setmethods__["properties"] = _mul_nbapi.ofp140_packet_queue_properties_set
    __swig_getmethods__["properties"] = _mul_nbapi.ofp140_packet_queue_properties_get
    if _newclass:properties = _swig_property(_mul_nbapi.ofp140_packet_queue_properties_get, _mul_nbapi.ofp140_packet_queue_properties_set)
    def __init__(self): 
        this = _mul_nbapi.new_ofp140_packet_queue()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_ofp140_packet_queue
    __del__ = lambda self : None;
ofp140_packet_queue_swigregister = _mul_nbapi.ofp140_packet_queue_swigregister
ofp140_packet_queue_swigregister(ofp140_packet_queue)

class ofp140_queue_prop_experimenter(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofp140_queue_prop_experimenter, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofp140_queue_prop_experimenter, name)
    __repr__ = _swig_repr
    __swig_setmethods__["prop_header"] = _mul_nbapi.ofp140_queue_prop_experimenter_prop_header_set
    __swig_getmethods__["prop_header"] = _mul_nbapi.ofp140_queue_prop_experimenter_prop_header_get
    if _newclass:prop_header = _swig_property(_mul_nbapi.ofp140_queue_prop_experimenter_prop_header_get, _mul_nbapi.ofp140_queue_prop_experimenter_prop_header_set)
    __swig_setmethods__["experimenter"] = _mul_nbapi.ofp140_queue_prop_experimenter_experimenter_set
    __swig_getmethods__["experimenter"] = _mul_nbapi.ofp140_queue_prop_experimenter_experimenter_get
    if _newclass:experimenter = _swig_property(_mul_nbapi.ofp140_queue_prop_experimenter_experimenter_get, _mul_nbapi.ofp140_queue_prop_experimenter_experimenter_set)
    __swig_setmethods__["pad"] = _mul_nbapi.ofp140_queue_prop_experimenter_pad_set
    __swig_getmethods__["pad"] = _mul_nbapi.ofp140_queue_prop_experimenter_pad_get
    if _newclass:pad = _swig_property(_mul_nbapi.ofp140_queue_prop_experimenter_pad_get, _mul_nbapi.ofp140_queue_prop_experimenter_pad_set)
    __swig_setmethods__["data"] = _mul_nbapi.ofp140_queue_prop_experimenter_data_set
    __swig_getmethods__["data"] = _mul_nbapi.ofp140_queue_prop_experimenter_data_get
    if _newclass:data = _swig_property(_mul_nbapi.ofp140_queue_prop_experimenter_data_get, _mul_nbapi.ofp140_queue_prop_experimenter_data_set)
    def __init__(self): 
        this = _mul_nbapi.new_ofp140_queue_prop_experimenter()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_ofp140_queue_prop_experimenter
    __del__ = lambda self : None;
ofp140_queue_prop_experimenter_swigregister = _mul_nbapi.ofp140_queue_prop_experimenter_swigregister
ofp140_queue_prop_experimenter_swigregister(ofp140_queue_prop_experimenter)

class ofp140_oxm_experimenter_header(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofp140_oxm_experimenter_header, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofp140_oxm_experimenter_header, name)
    __repr__ = _swig_repr
    __swig_setmethods__["oxm_header"] = _mul_nbapi.ofp140_oxm_experimenter_header_oxm_header_set
    __swig_getmethods__["oxm_header"] = _mul_nbapi.ofp140_oxm_experimenter_header_oxm_header_get
    if _newclass:oxm_header = _swig_property(_mul_nbapi.ofp140_oxm_experimenter_header_oxm_header_get, _mul_nbapi.ofp140_oxm_experimenter_header_oxm_header_set)
    __swig_setmethods__["experimenter"] = _mul_nbapi.ofp140_oxm_experimenter_header_experimenter_set
    __swig_getmethods__["experimenter"] = _mul_nbapi.ofp140_oxm_experimenter_header_experimenter_get
    if _newclass:experimenter = _swig_property(_mul_nbapi.ofp140_oxm_experimenter_header_experimenter_get, _mul_nbapi.ofp140_oxm_experimenter_header_experimenter_set)
    def __init__(self): 
        this = _mul_nbapi.new_ofp140_oxm_experimenter_header()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_ofp140_oxm_experimenter_header
    __del__ = lambda self : None;
ofp140_oxm_experimenter_header_swigregister = _mul_nbapi.ofp140_oxm_experimenter_header_swigregister
ofp140_oxm_experimenter_header_swigregister(ofp140_oxm_experimenter_header)

OFPAT140_OUTPUT = _mul_nbapi.OFPAT140_OUTPUT
OFPAT140_COPY_TTL_OUT = _mul_nbapi.OFPAT140_COPY_TTL_OUT
OFPAT140_COPY_TTL_IN = _mul_nbapi.OFPAT140_COPY_TTL_IN
OFPAT140_MPLS_TTL = _mul_nbapi.OFPAT140_MPLS_TTL
OFPAT140_DEC_MPLS_TTL = _mul_nbapi.OFPAT140_DEC_MPLS_TTL
OFPAT140_PUSH_VLAN = _mul_nbapi.OFPAT140_PUSH_VLAN
OFPAT140_POP_VLAN = _mul_nbapi.OFPAT140_POP_VLAN
OFPAT140_PUSH_MPLS = _mul_nbapi.OFPAT140_PUSH_MPLS
OFPAT140_POP_MPLS = _mul_nbapi.OFPAT140_POP_MPLS
OFPAT140_SET_QUEUE = _mul_nbapi.OFPAT140_SET_QUEUE
OFPAT140_GROUP = _mul_nbapi.OFPAT140_GROUP
OFPAT140_SET_NW_TTL = _mul_nbapi.OFPAT140_SET_NW_TTL
OFPAT140_DEC_NW_TTL = _mul_nbapi.OFPAT140_DEC_NW_TTL
OFPAT140_SET_FIELD = _mul_nbapi.OFPAT140_SET_FIELD
OFPAT140_PUSH_PBB = _mul_nbapi.OFPAT140_PUSH_PBB
OFPAT140_POP_PBB = _mul_nbapi.OFPAT140_POP_PBB
OFPAT140_EXPERIMENTER = _mul_nbapi.OFPAT140_EXPERIMENTER
class ofp140_action_output(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofp140_action_output, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofp140_action_output, name)
    __repr__ = _swig_repr
    __swig_setmethods__["type"] = _mul_nbapi.ofp140_action_output_type_set
    __swig_getmethods__["type"] = _mul_nbapi.ofp140_action_output_type_get
    if _newclass:type = _swig_property(_mul_nbapi.ofp140_action_output_type_get, _mul_nbapi.ofp140_action_output_type_set)
    __swig_setmethods__["len"] = _mul_nbapi.ofp140_action_output_len_set
    __swig_getmethods__["len"] = _mul_nbapi.ofp140_action_output_len_get
    if _newclass:len = _swig_property(_mul_nbapi.ofp140_action_output_len_get, _mul_nbapi.ofp140_action_output_len_set)
    __swig_setmethods__["port"] = _mul_nbapi.ofp140_action_output_port_set
    __swig_getmethods__["port"] = _mul_nbapi.ofp140_action_output_port_get
    if _newclass:port = _swig_property(_mul_nbapi.ofp140_action_output_port_get, _mul_nbapi.ofp140_action_output_port_set)
    __swig_setmethods__["max_len"] = _mul_nbapi.ofp140_action_output_max_len_set
    __swig_getmethods__["max_len"] = _mul_nbapi.ofp140_action_output_max_len_get
    if _newclass:max_len = _swig_property(_mul_nbapi.ofp140_action_output_max_len_get, _mul_nbapi.ofp140_action_output_max_len_set)
    __swig_setmethods__["pad"] = _mul_nbapi.ofp140_action_output_pad_set
    __swig_getmethods__["pad"] = _mul_nbapi.ofp140_action_output_pad_get
    if _newclass:pad = _swig_property(_mul_nbapi.ofp140_action_output_pad_get, _mul_nbapi.ofp140_action_output_pad_set)
    def __init__(self): 
        this = _mul_nbapi.new_ofp140_action_output()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_ofp140_action_output
    __del__ = lambda self : None;
ofp140_action_output_swigregister = _mul_nbapi.ofp140_action_output_swigregister
ofp140_action_output_swigregister(ofp140_action_output)

class ofp140_action_set_queue(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofp140_action_set_queue, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofp140_action_set_queue, name)
    __repr__ = _swig_repr
    __swig_setmethods__["type"] = _mul_nbapi.ofp140_action_set_queue_type_set
    __swig_getmethods__["type"] = _mul_nbapi.ofp140_action_set_queue_type_get
    if _newclass:type = _swig_property(_mul_nbapi.ofp140_action_set_queue_type_get, _mul_nbapi.ofp140_action_set_queue_type_set)
    __swig_setmethods__["len"] = _mul_nbapi.ofp140_action_set_queue_len_set
    __swig_getmethods__["len"] = _mul_nbapi.ofp140_action_set_queue_len_get
    if _newclass:len = _swig_property(_mul_nbapi.ofp140_action_set_queue_len_get, _mul_nbapi.ofp140_action_set_queue_len_set)
    __swig_setmethods__["queue_id"] = _mul_nbapi.ofp140_action_set_queue_queue_id_set
    __swig_getmethods__["queue_id"] = _mul_nbapi.ofp140_action_set_queue_queue_id_get
    if _newclass:queue_id = _swig_property(_mul_nbapi.ofp140_action_set_queue_queue_id_get, _mul_nbapi.ofp140_action_set_queue_queue_id_set)
    def __init__(self): 
        this = _mul_nbapi.new_ofp140_action_set_queue()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_ofp140_action_set_queue
    __del__ = lambda self : None;
ofp140_action_set_queue_swigregister = _mul_nbapi.ofp140_action_set_queue_swigregister
ofp140_action_set_queue_swigregister(ofp140_action_set_queue)

class ofp140_switch_features(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofp140_switch_features, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofp140_switch_features, name)
    __repr__ = _swig_repr
    __swig_setmethods__["header"] = _mul_nbapi.ofp140_switch_features_header_set
    __swig_getmethods__["header"] = _mul_nbapi.ofp140_switch_features_header_get
    if _newclass:header = _swig_property(_mul_nbapi.ofp140_switch_features_header_get, _mul_nbapi.ofp140_switch_features_header_set)
    __swig_setmethods__["datapath_id"] = _mul_nbapi.ofp140_switch_features_datapath_id_set
    __swig_getmethods__["datapath_id"] = _mul_nbapi.ofp140_switch_features_datapath_id_get
    if _newclass:datapath_id = _swig_property(_mul_nbapi.ofp140_switch_features_datapath_id_get, _mul_nbapi.ofp140_switch_features_datapath_id_set)
    __swig_setmethods__["n_buffers"] = _mul_nbapi.ofp140_switch_features_n_buffers_set
    __swig_getmethods__["n_buffers"] = _mul_nbapi.ofp140_switch_features_n_buffers_get
    if _newclass:n_buffers = _swig_property(_mul_nbapi.ofp140_switch_features_n_buffers_get, _mul_nbapi.ofp140_switch_features_n_buffers_set)
    __swig_setmethods__["n_tables"] = _mul_nbapi.ofp140_switch_features_n_tables_set
    __swig_getmethods__["n_tables"] = _mul_nbapi.ofp140_switch_features_n_tables_get
    if _newclass:n_tables = _swig_property(_mul_nbapi.ofp140_switch_features_n_tables_get, _mul_nbapi.ofp140_switch_features_n_tables_set)
    __swig_setmethods__["auxiliary_id"] = _mul_nbapi.ofp140_switch_features_auxiliary_id_set
    __swig_getmethods__["auxiliary_id"] = _mul_nbapi.ofp140_switch_features_auxiliary_id_get
    if _newclass:auxiliary_id = _swig_property(_mul_nbapi.ofp140_switch_features_auxiliary_id_get, _mul_nbapi.ofp140_switch_features_auxiliary_id_set)
    __swig_setmethods__["pad"] = _mul_nbapi.ofp140_switch_features_pad_set
    __swig_getmethods__["pad"] = _mul_nbapi.ofp140_switch_features_pad_get
    if _newclass:pad = _swig_property(_mul_nbapi.ofp140_switch_features_pad_get, _mul_nbapi.ofp140_switch_features_pad_set)
    __swig_setmethods__["capabilities"] = _mul_nbapi.ofp140_switch_features_capabilities_set
    __swig_getmethods__["capabilities"] = _mul_nbapi.ofp140_switch_features_capabilities_get
    if _newclass:capabilities = _swig_property(_mul_nbapi.ofp140_switch_features_capabilities_get, _mul_nbapi.ofp140_switch_features_capabilities_set)
    __swig_setmethods__["reserved"] = _mul_nbapi.ofp140_switch_features_reserved_set
    __swig_getmethods__["reserved"] = _mul_nbapi.ofp140_switch_features_reserved_get
    if _newclass:reserved = _swig_property(_mul_nbapi.ofp140_switch_features_reserved_get, _mul_nbapi.ofp140_switch_features_reserved_set)
    def __init__(self): 
        this = _mul_nbapi.new_ofp140_switch_features()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_ofp140_switch_features
    __del__ = lambda self : None;
ofp140_switch_features_swigregister = _mul_nbapi.ofp140_switch_features_swigregister
ofp140_switch_features_swigregister(ofp140_switch_features)

OFPC140_FLOW_STATS = _mul_nbapi.OFPC140_FLOW_STATS
OFPC140_TABLE_STATS = _mul_nbapi.OFPC140_TABLE_STATS
OFPC140_PORT_STATS = _mul_nbapi.OFPC140_PORT_STATS
OFPC140_GROUP_STATS = _mul_nbapi.OFPC140_GROUP_STATS
OFPC140_IP_REASM = _mul_nbapi.OFPC140_IP_REASM
OFPC140_QUEUE_STATS = _mul_nbapi.OFPC140_QUEUE_STATS
OFPC140_PORT_BLOCKED = _mul_nbapi.OFPC140_PORT_BLOCKED
class ofp140_flow_mod(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofp140_flow_mod, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofp140_flow_mod, name)
    __repr__ = _swig_repr
    __swig_setmethods__["header"] = _mul_nbapi.ofp140_flow_mod_header_set
    __swig_getmethods__["header"] = _mul_nbapi.ofp140_flow_mod_header_get
    if _newclass:header = _swig_property(_mul_nbapi.ofp140_flow_mod_header_get, _mul_nbapi.ofp140_flow_mod_header_set)
    __swig_setmethods__["cookie"] = _mul_nbapi.ofp140_flow_mod_cookie_set
    __swig_getmethods__["cookie"] = _mul_nbapi.ofp140_flow_mod_cookie_get
    if _newclass:cookie = _swig_property(_mul_nbapi.ofp140_flow_mod_cookie_get, _mul_nbapi.ofp140_flow_mod_cookie_set)
    __swig_setmethods__["cookie_mask"] = _mul_nbapi.ofp140_flow_mod_cookie_mask_set
    __swig_getmethods__["cookie_mask"] = _mul_nbapi.ofp140_flow_mod_cookie_mask_get
    if _newclass:cookie_mask = _swig_property(_mul_nbapi.ofp140_flow_mod_cookie_mask_get, _mul_nbapi.ofp140_flow_mod_cookie_mask_set)
    __swig_setmethods__["table_id"] = _mul_nbapi.ofp140_flow_mod_table_id_set
    __swig_getmethods__["table_id"] = _mul_nbapi.ofp140_flow_mod_table_id_get
    if _newclass:table_id = _swig_property(_mul_nbapi.ofp140_flow_mod_table_id_get, _mul_nbapi.ofp140_flow_mod_table_id_set)
    __swig_setmethods__["command"] = _mul_nbapi.ofp140_flow_mod_command_set
    __swig_getmethods__["command"] = _mul_nbapi.ofp140_flow_mod_command_get
    if _newclass:command = _swig_property(_mul_nbapi.ofp140_flow_mod_command_get, _mul_nbapi.ofp140_flow_mod_command_set)
    __swig_setmethods__["idle_timeout"] = _mul_nbapi.ofp140_flow_mod_idle_timeout_set
    __swig_getmethods__["idle_timeout"] = _mul_nbapi.ofp140_flow_mod_idle_timeout_get
    if _newclass:idle_timeout = _swig_property(_mul_nbapi.ofp140_flow_mod_idle_timeout_get, _mul_nbapi.ofp140_flow_mod_idle_timeout_set)
    __swig_setmethods__["hard_timeout"] = _mul_nbapi.ofp140_flow_mod_hard_timeout_set
    __swig_getmethods__["hard_timeout"] = _mul_nbapi.ofp140_flow_mod_hard_timeout_get
    if _newclass:hard_timeout = _swig_property(_mul_nbapi.ofp140_flow_mod_hard_timeout_get, _mul_nbapi.ofp140_flow_mod_hard_timeout_set)
    __swig_setmethods__["priority"] = _mul_nbapi.ofp140_flow_mod_priority_set
    __swig_getmethods__["priority"] = _mul_nbapi.ofp140_flow_mod_priority_get
    if _newclass:priority = _swig_property(_mul_nbapi.ofp140_flow_mod_priority_get, _mul_nbapi.ofp140_flow_mod_priority_set)
    __swig_setmethods__["buffer_id"] = _mul_nbapi.ofp140_flow_mod_buffer_id_set
    __swig_getmethods__["buffer_id"] = _mul_nbapi.ofp140_flow_mod_buffer_id_get
    if _newclass:buffer_id = _swig_property(_mul_nbapi.ofp140_flow_mod_buffer_id_get, _mul_nbapi.ofp140_flow_mod_buffer_id_set)
    __swig_setmethods__["out_port"] = _mul_nbapi.ofp140_flow_mod_out_port_set
    __swig_getmethods__["out_port"] = _mul_nbapi.ofp140_flow_mod_out_port_get
    if _newclass:out_port = _swig_property(_mul_nbapi.ofp140_flow_mod_out_port_get, _mul_nbapi.ofp140_flow_mod_out_port_set)
    __swig_setmethods__["out_group"] = _mul_nbapi.ofp140_flow_mod_out_group_set
    __swig_getmethods__["out_group"] = _mul_nbapi.ofp140_flow_mod_out_group_get
    if _newclass:out_group = _swig_property(_mul_nbapi.ofp140_flow_mod_out_group_get, _mul_nbapi.ofp140_flow_mod_out_group_set)
    __swig_setmethods__["flags"] = _mul_nbapi.ofp140_flow_mod_flags_set
    __swig_getmethods__["flags"] = _mul_nbapi.ofp140_flow_mod_flags_get
    if _newclass:flags = _swig_property(_mul_nbapi.ofp140_flow_mod_flags_get, _mul_nbapi.ofp140_flow_mod_flags_set)
    __swig_setmethods__["pad"] = _mul_nbapi.ofp140_flow_mod_pad_set
    __swig_getmethods__["pad"] = _mul_nbapi.ofp140_flow_mod_pad_get
    if _newclass:pad = _swig_property(_mul_nbapi.ofp140_flow_mod_pad_get, _mul_nbapi.ofp140_flow_mod_pad_set)
    __swig_setmethods__["match"] = _mul_nbapi.ofp140_flow_mod_match_set
    __swig_getmethods__["match"] = _mul_nbapi.ofp140_flow_mod_match_get
    if _newclass:match = _swig_property(_mul_nbapi.ofp140_flow_mod_match_get, _mul_nbapi.ofp140_flow_mod_match_set)
    def __init__(self): 
        this = _mul_nbapi.new_ofp140_flow_mod()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_ofp140_flow_mod
    __del__ = lambda self : None;
ofp140_flow_mod_swigregister = _mul_nbapi.ofp140_flow_mod_swigregister
ofp140_flow_mod_swigregister(ofp140_flow_mod)

OFPFF140_SEND_FLOW_REM = _mul_nbapi.OFPFF140_SEND_FLOW_REM
OFPFF140_CHECK_OVERLAP = _mul_nbapi.OFPFF140_CHECK_OVERLAP
OFPFF140_RESET_COUNTS = _mul_nbapi.OFPFF140_RESET_COUNTS
OFPFF140_NO_PKT_COUNTS = _mul_nbapi.OFPFF140_NO_PKT_COUNTS
OFPFF140_NO_BYT_COUNTS = _mul_nbapi.OFPFF140_NO_BYT_COUNTS
OFPPMPT_ETHERNET = _mul_nbapi.OFPPMPT_ETHERNET
OFPPMPT_OPTICAL = _mul_nbapi.OFPPMPT_OPTICAL
OFPPMPT_EXPERIMENTER = _mul_nbapi.OFPPMPT_EXPERIMENTER
class ofp_port_mod_prop_header(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofp_port_mod_prop_header, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofp_port_mod_prop_header, name)
    __repr__ = _swig_repr
    __swig_setmethods__["type"] = _mul_nbapi.ofp_port_mod_prop_header_type_set
    __swig_getmethods__["type"] = _mul_nbapi.ofp_port_mod_prop_header_type_get
    if _newclass:type = _swig_property(_mul_nbapi.ofp_port_mod_prop_header_type_get, _mul_nbapi.ofp_port_mod_prop_header_type_set)
    __swig_setmethods__["length"] = _mul_nbapi.ofp_port_mod_prop_header_length_set
    __swig_getmethods__["length"] = _mul_nbapi.ofp_port_mod_prop_header_length_get
    if _newclass:length = _swig_property(_mul_nbapi.ofp_port_mod_prop_header_length_get, _mul_nbapi.ofp_port_mod_prop_header_length_set)
    def __init__(self): 
        this = _mul_nbapi.new_ofp_port_mod_prop_header()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_ofp_port_mod_prop_header
    __del__ = lambda self : None;
ofp_port_mod_prop_header_swigregister = _mul_nbapi.ofp_port_mod_prop_header_swigregister
ofp_port_mod_prop_header_swigregister(ofp_port_mod_prop_header)

class ofp_port_mod_prop_ethernet(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofp_port_mod_prop_ethernet, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofp_port_mod_prop_ethernet, name)
    __repr__ = _swig_repr
    __swig_setmethods__["type"] = _mul_nbapi.ofp_port_mod_prop_ethernet_type_set
    __swig_getmethods__["type"] = _mul_nbapi.ofp_port_mod_prop_ethernet_type_get
    if _newclass:type = _swig_property(_mul_nbapi.ofp_port_mod_prop_ethernet_type_get, _mul_nbapi.ofp_port_mod_prop_ethernet_type_set)
    __swig_setmethods__["length"] = _mul_nbapi.ofp_port_mod_prop_ethernet_length_set
    __swig_getmethods__["length"] = _mul_nbapi.ofp_port_mod_prop_ethernet_length_get
    if _newclass:length = _swig_property(_mul_nbapi.ofp_port_mod_prop_ethernet_length_get, _mul_nbapi.ofp_port_mod_prop_ethernet_length_set)
    __swig_setmethods__["advertise"] = _mul_nbapi.ofp_port_mod_prop_ethernet_advertise_set
    __swig_getmethods__["advertise"] = _mul_nbapi.ofp_port_mod_prop_ethernet_advertise_get
    if _newclass:advertise = _swig_property(_mul_nbapi.ofp_port_mod_prop_ethernet_advertise_get, _mul_nbapi.ofp_port_mod_prop_ethernet_advertise_set)
    def __init__(self): 
        this = _mul_nbapi.new_ofp_port_mod_prop_ethernet()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_ofp_port_mod_prop_ethernet
    __del__ = lambda self : None;
ofp_port_mod_prop_ethernet_swigregister = _mul_nbapi.ofp_port_mod_prop_ethernet_swigregister
ofp_port_mod_prop_ethernet_swigregister(ofp_port_mod_prop_ethernet)

class ofp_port_mod_prop_optical(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofp_port_mod_prop_optical, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofp_port_mod_prop_optical, name)
    __repr__ = _swig_repr
    __swig_setmethods__["type"] = _mul_nbapi.ofp_port_mod_prop_optical_type_set
    __swig_getmethods__["type"] = _mul_nbapi.ofp_port_mod_prop_optical_type_get
    if _newclass:type = _swig_property(_mul_nbapi.ofp_port_mod_prop_optical_type_get, _mul_nbapi.ofp_port_mod_prop_optical_type_set)
    __swig_setmethods__["length"] = _mul_nbapi.ofp_port_mod_prop_optical_length_set
    __swig_getmethods__["length"] = _mul_nbapi.ofp_port_mod_prop_optical_length_get
    if _newclass:length = _swig_property(_mul_nbapi.ofp_port_mod_prop_optical_length_get, _mul_nbapi.ofp_port_mod_prop_optical_length_set)
    __swig_setmethods__["configure"] = _mul_nbapi.ofp_port_mod_prop_optical_configure_set
    __swig_getmethods__["configure"] = _mul_nbapi.ofp_port_mod_prop_optical_configure_get
    if _newclass:configure = _swig_property(_mul_nbapi.ofp_port_mod_prop_optical_configure_get, _mul_nbapi.ofp_port_mod_prop_optical_configure_set)
    __swig_setmethods__["freq_lmda"] = _mul_nbapi.ofp_port_mod_prop_optical_freq_lmda_set
    __swig_getmethods__["freq_lmda"] = _mul_nbapi.ofp_port_mod_prop_optical_freq_lmda_get
    if _newclass:freq_lmda = _swig_property(_mul_nbapi.ofp_port_mod_prop_optical_freq_lmda_get, _mul_nbapi.ofp_port_mod_prop_optical_freq_lmda_set)
    __swig_setmethods__["fl_offset"] = _mul_nbapi.ofp_port_mod_prop_optical_fl_offset_set
    __swig_getmethods__["fl_offset"] = _mul_nbapi.ofp_port_mod_prop_optical_fl_offset_get
    if _newclass:fl_offset = _swig_property(_mul_nbapi.ofp_port_mod_prop_optical_fl_offset_get, _mul_nbapi.ofp_port_mod_prop_optical_fl_offset_set)
    __swig_setmethods__["grid_span"] = _mul_nbapi.ofp_port_mod_prop_optical_grid_span_set
    __swig_getmethods__["grid_span"] = _mul_nbapi.ofp_port_mod_prop_optical_grid_span_get
    if _newclass:grid_span = _swig_property(_mul_nbapi.ofp_port_mod_prop_optical_grid_span_get, _mul_nbapi.ofp_port_mod_prop_optical_grid_span_set)
    __swig_setmethods__["tx_pwr"] = _mul_nbapi.ofp_port_mod_prop_optical_tx_pwr_set
    __swig_getmethods__["tx_pwr"] = _mul_nbapi.ofp_port_mod_prop_optical_tx_pwr_get
    if _newclass:tx_pwr = _swig_property(_mul_nbapi.ofp_port_mod_prop_optical_tx_pwr_get, _mul_nbapi.ofp_port_mod_prop_optical_tx_pwr_set)
    def __init__(self): 
        this = _mul_nbapi.new_ofp_port_mod_prop_optical()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_ofp_port_mod_prop_optical
    __del__ = lambda self : None;
ofp_port_mod_prop_optical_swigregister = _mul_nbapi.ofp_port_mod_prop_optical_swigregister
ofp_port_mod_prop_optical_swigregister(ofp_port_mod_prop_optical)

class ofp_port_mod_prop_experimenter(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofp_port_mod_prop_experimenter, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofp_port_mod_prop_experimenter, name)
    __repr__ = _swig_repr
    __swig_setmethods__["type"] = _mul_nbapi.ofp_port_mod_prop_experimenter_type_set
    __swig_getmethods__["type"] = _mul_nbapi.ofp_port_mod_prop_experimenter_type_get
    if _newclass:type = _swig_property(_mul_nbapi.ofp_port_mod_prop_experimenter_type_get, _mul_nbapi.ofp_port_mod_prop_experimenter_type_set)
    __swig_setmethods__["length"] = _mul_nbapi.ofp_port_mod_prop_experimenter_length_set
    __swig_getmethods__["length"] = _mul_nbapi.ofp_port_mod_prop_experimenter_length_get
    if _newclass:length = _swig_property(_mul_nbapi.ofp_port_mod_prop_experimenter_length_get, _mul_nbapi.ofp_port_mod_prop_experimenter_length_set)
    __swig_setmethods__["experimenter"] = _mul_nbapi.ofp_port_mod_prop_experimenter_experimenter_set
    __swig_getmethods__["experimenter"] = _mul_nbapi.ofp_port_mod_prop_experimenter_experimenter_get
    if _newclass:experimenter = _swig_property(_mul_nbapi.ofp_port_mod_prop_experimenter_experimenter_get, _mul_nbapi.ofp_port_mod_prop_experimenter_experimenter_set)
    __swig_setmethods__["exp_type"] = _mul_nbapi.ofp_port_mod_prop_experimenter_exp_type_set
    __swig_getmethods__["exp_type"] = _mul_nbapi.ofp_port_mod_prop_experimenter_exp_type_get
    if _newclass:exp_type = _swig_property(_mul_nbapi.ofp_port_mod_prop_experimenter_exp_type_get, _mul_nbapi.ofp_port_mod_prop_experimenter_exp_type_set)
    __swig_setmethods__["experimenter_data"] = _mul_nbapi.ofp_port_mod_prop_experimenter_experimenter_data_set
    __swig_getmethods__["experimenter_data"] = _mul_nbapi.ofp_port_mod_prop_experimenter_experimenter_data_get
    if _newclass:experimenter_data = _swig_property(_mul_nbapi.ofp_port_mod_prop_experimenter_experimenter_data_get, _mul_nbapi.ofp_port_mod_prop_experimenter_experimenter_data_set)
    def __init__(self): 
        this = _mul_nbapi.new_ofp_port_mod_prop_experimenter()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_ofp_port_mod_prop_experimenter
    __del__ = lambda self : None;
ofp_port_mod_prop_experimenter_swigregister = _mul_nbapi.ofp_port_mod_prop_experimenter_swigregister
ofp_port_mod_prop_experimenter_swigregister(ofp_port_mod_prop_experimenter)

class ofp140_port_mod(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofp140_port_mod, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofp140_port_mod, name)
    __repr__ = _swig_repr
    __swig_setmethods__["header"] = _mul_nbapi.ofp140_port_mod_header_set
    __swig_getmethods__["header"] = _mul_nbapi.ofp140_port_mod_header_get
    if _newclass:header = _swig_property(_mul_nbapi.ofp140_port_mod_header_get, _mul_nbapi.ofp140_port_mod_header_set)
    __swig_setmethods__["port_no"] = _mul_nbapi.ofp140_port_mod_port_no_set
    __swig_getmethods__["port_no"] = _mul_nbapi.ofp140_port_mod_port_no_get
    if _newclass:port_no = _swig_property(_mul_nbapi.ofp140_port_mod_port_no_get, _mul_nbapi.ofp140_port_mod_port_no_set)
    __swig_setmethods__["pad"] = _mul_nbapi.ofp140_port_mod_pad_set
    __swig_getmethods__["pad"] = _mul_nbapi.ofp140_port_mod_pad_get
    if _newclass:pad = _swig_property(_mul_nbapi.ofp140_port_mod_pad_get, _mul_nbapi.ofp140_port_mod_pad_set)
    __swig_setmethods__["hw_addr"] = _mul_nbapi.ofp140_port_mod_hw_addr_set
    __swig_getmethods__["hw_addr"] = _mul_nbapi.ofp140_port_mod_hw_addr_get
    if _newclass:hw_addr = _swig_property(_mul_nbapi.ofp140_port_mod_hw_addr_get, _mul_nbapi.ofp140_port_mod_hw_addr_set)
    __swig_setmethods__["pad2"] = _mul_nbapi.ofp140_port_mod_pad2_set
    __swig_getmethods__["pad2"] = _mul_nbapi.ofp140_port_mod_pad2_get
    if _newclass:pad2 = _swig_property(_mul_nbapi.ofp140_port_mod_pad2_get, _mul_nbapi.ofp140_port_mod_pad2_set)
    __swig_setmethods__["config"] = _mul_nbapi.ofp140_port_mod_config_set
    __swig_getmethods__["config"] = _mul_nbapi.ofp140_port_mod_config_get
    if _newclass:config = _swig_property(_mul_nbapi.ofp140_port_mod_config_get, _mul_nbapi.ofp140_port_mod_config_set)
    __swig_setmethods__["mask"] = _mul_nbapi.ofp140_port_mod_mask_set
    __swig_getmethods__["mask"] = _mul_nbapi.ofp140_port_mod_mask_get
    if _newclass:mask = _swig_property(_mul_nbapi.ofp140_port_mod_mask_get, _mul_nbapi.ofp140_port_mod_mask_set)
    __swig_setmethods__["properties"] = _mul_nbapi.ofp140_port_mod_properties_set
    __swig_getmethods__["properties"] = _mul_nbapi.ofp140_port_mod_properties_get
    if _newclass:properties = _swig_property(_mul_nbapi.ofp140_port_mod_properties_get, _mul_nbapi.ofp140_port_mod_properties_set)
    def __init__(self): 
        this = _mul_nbapi.new_ofp140_port_mod()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_ofp140_port_mod
    __del__ = lambda self : None;
ofp140_port_mod_swigregister = _mul_nbapi.ofp140_port_mod_swigregister
ofp140_port_mod_swigregister(ofp140_port_mod)

class ofp140_flow_stats_request(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofp140_flow_stats_request, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofp140_flow_stats_request, name)
    __repr__ = _swig_repr
    __swig_setmethods__["table_id"] = _mul_nbapi.ofp140_flow_stats_request_table_id_set
    __swig_getmethods__["table_id"] = _mul_nbapi.ofp140_flow_stats_request_table_id_get
    if _newclass:table_id = _swig_property(_mul_nbapi.ofp140_flow_stats_request_table_id_get, _mul_nbapi.ofp140_flow_stats_request_table_id_set)
    __swig_setmethods__["pad"] = _mul_nbapi.ofp140_flow_stats_request_pad_set
    __swig_getmethods__["pad"] = _mul_nbapi.ofp140_flow_stats_request_pad_get
    if _newclass:pad = _swig_property(_mul_nbapi.ofp140_flow_stats_request_pad_get, _mul_nbapi.ofp140_flow_stats_request_pad_set)
    __swig_setmethods__["out_port"] = _mul_nbapi.ofp140_flow_stats_request_out_port_set
    __swig_getmethods__["out_port"] = _mul_nbapi.ofp140_flow_stats_request_out_port_get
    if _newclass:out_port = _swig_property(_mul_nbapi.ofp140_flow_stats_request_out_port_get, _mul_nbapi.ofp140_flow_stats_request_out_port_set)
    __swig_setmethods__["out_group"] = _mul_nbapi.ofp140_flow_stats_request_out_group_set
    __swig_getmethods__["out_group"] = _mul_nbapi.ofp140_flow_stats_request_out_group_get
    if _newclass:out_group = _swig_property(_mul_nbapi.ofp140_flow_stats_request_out_group_get, _mul_nbapi.ofp140_flow_stats_request_out_group_set)
    __swig_setmethods__["pad2"] = _mul_nbapi.ofp140_flow_stats_request_pad2_set
    __swig_getmethods__["pad2"] = _mul_nbapi.ofp140_flow_stats_request_pad2_get
    if _newclass:pad2 = _swig_property(_mul_nbapi.ofp140_flow_stats_request_pad2_get, _mul_nbapi.ofp140_flow_stats_request_pad2_set)
    __swig_setmethods__["cookie"] = _mul_nbapi.ofp140_flow_stats_request_cookie_set
    __swig_getmethods__["cookie"] = _mul_nbapi.ofp140_flow_stats_request_cookie_get
    if _newclass:cookie = _swig_property(_mul_nbapi.ofp140_flow_stats_request_cookie_get, _mul_nbapi.ofp140_flow_stats_request_cookie_set)
    __swig_setmethods__["cookie_mask"] = _mul_nbapi.ofp140_flow_stats_request_cookie_mask_set
    __swig_getmethods__["cookie_mask"] = _mul_nbapi.ofp140_flow_stats_request_cookie_mask_get
    if _newclass:cookie_mask = _swig_property(_mul_nbapi.ofp140_flow_stats_request_cookie_mask_get, _mul_nbapi.ofp140_flow_stats_request_cookie_mask_set)
    __swig_setmethods__["match"] = _mul_nbapi.ofp140_flow_stats_request_match_set
    __swig_getmethods__["match"] = _mul_nbapi.ofp140_flow_stats_request_match_get
    if _newclass:match = _swig_property(_mul_nbapi.ofp140_flow_stats_request_match_get, _mul_nbapi.ofp140_flow_stats_request_match_set)
    def __init__(self): 
        this = _mul_nbapi.new_ofp140_flow_stats_request()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_ofp140_flow_stats_request
    __del__ = lambda self : None;
ofp140_flow_stats_request_swigregister = _mul_nbapi.ofp140_flow_stats_request_swigregister
ofp140_flow_stats_request_swigregister(ofp140_flow_stats_request)

class ofp140_flow_stats(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofp140_flow_stats, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofp140_flow_stats, name)
    __repr__ = _swig_repr
    __swig_setmethods__["length"] = _mul_nbapi.ofp140_flow_stats_length_set
    __swig_getmethods__["length"] = _mul_nbapi.ofp140_flow_stats_length_get
    if _newclass:length = _swig_property(_mul_nbapi.ofp140_flow_stats_length_get, _mul_nbapi.ofp140_flow_stats_length_set)
    __swig_setmethods__["table_id"] = _mul_nbapi.ofp140_flow_stats_table_id_set
    __swig_getmethods__["table_id"] = _mul_nbapi.ofp140_flow_stats_table_id_get
    if _newclass:table_id = _swig_property(_mul_nbapi.ofp140_flow_stats_table_id_get, _mul_nbapi.ofp140_flow_stats_table_id_set)
    __swig_setmethods__["pad"] = _mul_nbapi.ofp140_flow_stats_pad_set
    __swig_getmethods__["pad"] = _mul_nbapi.ofp140_flow_stats_pad_get
    if _newclass:pad = _swig_property(_mul_nbapi.ofp140_flow_stats_pad_get, _mul_nbapi.ofp140_flow_stats_pad_set)
    __swig_setmethods__["duration_sec"] = _mul_nbapi.ofp140_flow_stats_duration_sec_set
    __swig_getmethods__["duration_sec"] = _mul_nbapi.ofp140_flow_stats_duration_sec_get
    if _newclass:duration_sec = _swig_property(_mul_nbapi.ofp140_flow_stats_duration_sec_get, _mul_nbapi.ofp140_flow_stats_duration_sec_set)
    __swig_setmethods__["duration_nsec"] = _mul_nbapi.ofp140_flow_stats_duration_nsec_set
    __swig_getmethods__["duration_nsec"] = _mul_nbapi.ofp140_flow_stats_duration_nsec_get
    if _newclass:duration_nsec = _swig_property(_mul_nbapi.ofp140_flow_stats_duration_nsec_get, _mul_nbapi.ofp140_flow_stats_duration_nsec_set)
    __swig_setmethods__["priority"] = _mul_nbapi.ofp140_flow_stats_priority_set
    __swig_getmethods__["priority"] = _mul_nbapi.ofp140_flow_stats_priority_get
    if _newclass:priority = _swig_property(_mul_nbapi.ofp140_flow_stats_priority_get, _mul_nbapi.ofp140_flow_stats_priority_set)
    __swig_setmethods__["idle_timeout"] = _mul_nbapi.ofp140_flow_stats_idle_timeout_set
    __swig_getmethods__["idle_timeout"] = _mul_nbapi.ofp140_flow_stats_idle_timeout_get
    if _newclass:idle_timeout = _swig_property(_mul_nbapi.ofp140_flow_stats_idle_timeout_get, _mul_nbapi.ofp140_flow_stats_idle_timeout_set)
    __swig_setmethods__["hard_timeout"] = _mul_nbapi.ofp140_flow_stats_hard_timeout_set
    __swig_getmethods__["hard_timeout"] = _mul_nbapi.ofp140_flow_stats_hard_timeout_get
    if _newclass:hard_timeout = _swig_property(_mul_nbapi.ofp140_flow_stats_hard_timeout_get, _mul_nbapi.ofp140_flow_stats_hard_timeout_set)
    __swig_setmethods__["flags"] = _mul_nbapi.ofp140_flow_stats_flags_set
    __swig_getmethods__["flags"] = _mul_nbapi.ofp140_flow_stats_flags_get
    if _newclass:flags = _swig_property(_mul_nbapi.ofp140_flow_stats_flags_get, _mul_nbapi.ofp140_flow_stats_flags_set)
    __swig_setmethods__["pad2"] = _mul_nbapi.ofp140_flow_stats_pad2_set
    __swig_getmethods__["pad2"] = _mul_nbapi.ofp140_flow_stats_pad2_get
    if _newclass:pad2 = _swig_property(_mul_nbapi.ofp140_flow_stats_pad2_get, _mul_nbapi.ofp140_flow_stats_pad2_set)
    __swig_setmethods__["cookie"] = _mul_nbapi.ofp140_flow_stats_cookie_set
    __swig_getmethods__["cookie"] = _mul_nbapi.ofp140_flow_stats_cookie_get
    if _newclass:cookie = _swig_property(_mul_nbapi.ofp140_flow_stats_cookie_get, _mul_nbapi.ofp140_flow_stats_cookie_set)
    __swig_setmethods__["packet_count"] = _mul_nbapi.ofp140_flow_stats_packet_count_set
    __swig_getmethods__["packet_count"] = _mul_nbapi.ofp140_flow_stats_packet_count_get
    if _newclass:packet_count = _swig_property(_mul_nbapi.ofp140_flow_stats_packet_count_get, _mul_nbapi.ofp140_flow_stats_packet_count_set)
    __swig_setmethods__["byte_count"] = _mul_nbapi.ofp140_flow_stats_byte_count_set
    __swig_getmethods__["byte_count"] = _mul_nbapi.ofp140_flow_stats_byte_count_get
    if _newclass:byte_count = _swig_property(_mul_nbapi.ofp140_flow_stats_byte_count_get, _mul_nbapi.ofp140_flow_stats_byte_count_set)
    __swig_setmethods__["match"] = _mul_nbapi.ofp140_flow_stats_match_set
    __swig_getmethods__["match"] = _mul_nbapi.ofp140_flow_stats_match_get
    if _newclass:match = _swig_property(_mul_nbapi.ofp140_flow_stats_match_get, _mul_nbapi.ofp140_flow_stats_match_set)
    def __init__(self): 
        this = _mul_nbapi.new_ofp140_flow_stats()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_ofp140_flow_stats
    __del__ = lambda self : None;
ofp140_flow_stats_swigregister = _mul_nbapi.ofp140_flow_stats_swigregister
ofp140_flow_stats_swigregister(ofp140_flow_stats)

class ofp140_aggregate_stats_request(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofp140_aggregate_stats_request, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofp140_aggregate_stats_request, name)
    __repr__ = _swig_repr
    __swig_setmethods__["table_id"] = _mul_nbapi.ofp140_aggregate_stats_request_table_id_set
    __swig_getmethods__["table_id"] = _mul_nbapi.ofp140_aggregate_stats_request_table_id_get
    if _newclass:table_id = _swig_property(_mul_nbapi.ofp140_aggregate_stats_request_table_id_get, _mul_nbapi.ofp140_aggregate_stats_request_table_id_set)
    __swig_setmethods__["pad"] = _mul_nbapi.ofp140_aggregate_stats_request_pad_set
    __swig_getmethods__["pad"] = _mul_nbapi.ofp140_aggregate_stats_request_pad_get
    if _newclass:pad = _swig_property(_mul_nbapi.ofp140_aggregate_stats_request_pad_get, _mul_nbapi.ofp140_aggregate_stats_request_pad_set)
    __swig_setmethods__["out_port"] = _mul_nbapi.ofp140_aggregate_stats_request_out_port_set
    __swig_getmethods__["out_port"] = _mul_nbapi.ofp140_aggregate_stats_request_out_port_get
    if _newclass:out_port = _swig_property(_mul_nbapi.ofp140_aggregate_stats_request_out_port_get, _mul_nbapi.ofp140_aggregate_stats_request_out_port_set)
    __swig_setmethods__["out_group"] = _mul_nbapi.ofp140_aggregate_stats_request_out_group_set
    __swig_getmethods__["out_group"] = _mul_nbapi.ofp140_aggregate_stats_request_out_group_get
    if _newclass:out_group = _swig_property(_mul_nbapi.ofp140_aggregate_stats_request_out_group_get, _mul_nbapi.ofp140_aggregate_stats_request_out_group_set)
    __swig_setmethods__["pad2"] = _mul_nbapi.ofp140_aggregate_stats_request_pad2_set
    __swig_getmethods__["pad2"] = _mul_nbapi.ofp140_aggregate_stats_request_pad2_get
    if _newclass:pad2 = _swig_property(_mul_nbapi.ofp140_aggregate_stats_request_pad2_get, _mul_nbapi.ofp140_aggregate_stats_request_pad2_set)
    __swig_setmethods__["cookie"] = _mul_nbapi.ofp140_aggregate_stats_request_cookie_set
    __swig_getmethods__["cookie"] = _mul_nbapi.ofp140_aggregate_stats_request_cookie_get
    if _newclass:cookie = _swig_property(_mul_nbapi.ofp140_aggregate_stats_request_cookie_get, _mul_nbapi.ofp140_aggregate_stats_request_cookie_set)
    __swig_setmethods__["cookie_mask"] = _mul_nbapi.ofp140_aggregate_stats_request_cookie_mask_set
    __swig_getmethods__["cookie_mask"] = _mul_nbapi.ofp140_aggregate_stats_request_cookie_mask_get
    if _newclass:cookie_mask = _swig_property(_mul_nbapi.ofp140_aggregate_stats_request_cookie_mask_get, _mul_nbapi.ofp140_aggregate_stats_request_cookie_mask_set)
    __swig_setmethods__["match"] = _mul_nbapi.ofp140_aggregate_stats_request_match_set
    __swig_getmethods__["match"] = _mul_nbapi.ofp140_aggregate_stats_request_match_get
    if _newclass:match = _swig_property(_mul_nbapi.ofp140_aggregate_stats_request_match_get, _mul_nbapi.ofp140_aggregate_stats_request_match_set)
    def __init__(self): 
        this = _mul_nbapi.new_ofp140_aggregate_stats_request()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_ofp140_aggregate_stats_request
    __del__ = lambda self : None;
ofp140_aggregate_stats_request_swigregister = _mul_nbapi.ofp140_aggregate_stats_request_swigregister
ofp140_aggregate_stats_request_swigregister(ofp140_aggregate_stats_request)

class ofp140_table_stats(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofp140_table_stats, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofp140_table_stats, name)
    __repr__ = _swig_repr
    __swig_setmethods__["table_id"] = _mul_nbapi.ofp140_table_stats_table_id_set
    __swig_getmethods__["table_id"] = _mul_nbapi.ofp140_table_stats_table_id_get
    if _newclass:table_id = _swig_property(_mul_nbapi.ofp140_table_stats_table_id_get, _mul_nbapi.ofp140_table_stats_table_id_set)
    __swig_setmethods__["pad"] = _mul_nbapi.ofp140_table_stats_pad_set
    __swig_getmethods__["pad"] = _mul_nbapi.ofp140_table_stats_pad_get
    if _newclass:pad = _swig_property(_mul_nbapi.ofp140_table_stats_pad_get, _mul_nbapi.ofp140_table_stats_pad_set)
    __swig_setmethods__["active_count"] = _mul_nbapi.ofp140_table_stats_active_count_set
    __swig_getmethods__["active_count"] = _mul_nbapi.ofp140_table_stats_active_count_get
    if _newclass:active_count = _swig_property(_mul_nbapi.ofp140_table_stats_active_count_get, _mul_nbapi.ofp140_table_stats_active_count_set)
    __swig_setmethods__["lookup_count"] = _mul_nbapi.ofp140_table_stats_lookup_count_set
    __swig_getmethods__["lookup_count"] = _mul_nbapi.ofp140_table_stats_lookup_count_get
    if _newclass:lookup_count = _swig_property(_mul_nbapi.ofp140_table_stats_lookup_count_get, _mul_nbapi.ofp140_table_stats_lookup_count_set)
    __swig_setmethods__["matched_count"] = _mul_nbapi.ofp140_table_stats_matched_count_set
    __swig_getmethods__["matched_count"] = _mul_nbapi.ofp140_table_stats_matched_count_get
    if _newclass:matched_count = _swig_property(_mul_nbapi.ofp140_table_stats_matched_count_get, _mul_nbapi.ofp140_table_stats_matched_count_set)
    def __init__(self): 
        this = _mul_nbapi.new_ofp140_table_stats()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_ofp140_table_stats
    __del__ = lambda self : None;
ofp140_table_stats_swigregister = _mul_nbapi.ofp140_table_stats_swigregister
ofp140_table_stats_swigregister(ofp140_table_stats)

OFPPSPT_ETHERNET = _mul_nbapi.OFPPSPT_ETHERNET
OFPPSPT_OPTICAL = _mul_nbapi.OFPPSPT_OPTICAL
OFPPSPT_EXPERIMENTER = _mul_nbapi.OFPPSPT_EXPERIMENTER
class ofp_port_stats_prop_header(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofp_port_stats_prop_header, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofp_port_stats_prop_header, name)
    __repr__ = _swig_repr
    __swig_setmethods__["type"] = _mul_nbapi.ofp_port_stats_prop_header_type_set
    __swig_getmethods__["type"] = _mul_nbapi.ofp_port_stats_prop_header_type_get
    if _newclass:type = _swig_property(_mul_nbapi.ofp_port_stats_prop_header_type_get, _mul_nbapi.ofp_port_stats_prop_header_type_set)
    __swig_setmethods__["length"] = _mul_nbapi.ofp_port_stats_prop_header_length_set
    __swig_getmethods__["length"] = _mul_nbapi.ofp_port_stats_prop_header_length_get
    if _newclass:length = _swig_property(_mul_nbapi.ofp_port_stats_prop_header_length_get, _mul_nbapi.ofp_port_stats_prop_header_length_set)
    def __init__(self): 
        this = _mul_nbapi.new_ofp_port_stats_prop_header()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_ofp_port_stats_prop_header
    __del__ = lambda self : None;
ofp_port_stats_prop_header_swigregister = _mul_nbapi.ofp_port_stats_prop_header_swigregister
ofp_port_stats_prop_header_swigregister(ofp_port_stats_prop_header)

class ofp_port_stats_prop_ethernet(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofp_port_stats_prop_ethernet, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofp_port_stats_prop_ethernet, name)
    __repr__ = _swig_repr
    __swig_setmethods__["type"] = _mul_nbapi.ofp_port_stats_prop_ethernet_type_set
    __swig_getmethods__["type"] = _mul_nbapi.ofp_port_stats_prop_ethernet_type_get
    if _newclass:type = _swig_property(_mul_nbapi.ofp_port_stats_prop_ethernet_type_get, _mul_nbapi.ofp_port_stats_prop_ethernet_type_set)
    __swig_setmethods__["length"] = _mul_nbapi.ofp_port_stats_prop_ethernet_length_set
    __swig_getmethods__["length"] = _mul_nbapi.ofp_port_stats_prop_ethernet_length_get
    if _newclass:length = _swig_property(_mul_nbapi.ofp_port_stats_prop_ethernet_length_get, _mul_nbapi.ofp_port_stats_prop_ethernet_length_set)
    __swig_setmethods__["pad"] = _mul_nbapi.ofp_port_stats_prop_ethernet_pad_set
    __swig_getmethods__["pad"] = _mul_nbapi.ofp_port_stats_prop_ethernet_pad_get
    if _newclass:pad = _swig_property(_mul_nbapi.ofp_port_stats_prop_ethernet_pad_get, _mul_nbapi.ofp_port_stats_prop_ethernet_pad_set)
    __swig_setmethods__["rx_frame_err"] = _mul_nbapi.ofp_port_stats_prop_ethernet_rx_frame_err_set
    __swig_getmethods__["rx_frame_err"] = _mul_nbapi.ofp_port_stats_prop_ethernet_rx_frame_err_get
    if _newclass:rx_frame_err = _swig_property(_mul_nbapi.ofp_port_stats_prop_ethernet_rx_frame_err_get, _mul_nbapi.ofp_port_stats_prop_ethernet_rx_frame_err_set)
    __swig_setmethods__["rx_over_err"] = _mul_nbapi.ofp_port_stats_prop_ethernet_rx_over_err_set
    __swig_getmethods__["rx_over_err"] = _mul_nbapi.ofp_port_stats_prop_ethernet_rx_over_err_get
    if _newclass:rx_over_err = _swig_property(_mul_nbapi.ofp_port_stats_prop_ethernet_rx_over_err_get, _mul_nbapi.ofp_port_stats_prop_ethernet_rx_over_err_set)
    __swig_setmethods__["rx_crc_err"] = _mul_nbapi.ofp_port_stats_prop_ethernet_rx_crc_err_set
    __swig_getmethods__["rx_crc_err"] = _mul_nbapi.ofp_port_stats_prop_ethernet_rx_crc_err_get
    if _newclass:rx_crc_err = _swig_property(_mul_nbapi.ofp_port_stats_prop_ethernet_rx_crc_err_get, _mul_nbapi.ofp_port_stats_prop_ethernet_rx_crc_err_set)
    __swig_setmethods__["collisions"] = _mul_nbapi.ofp_port_stats_prop_ethernet_collisions_set
    __swig_getmethods__["collisions"] = _mul_nbapi.ofp_port_stats_prop_ethernet_collisions_get
    if _newclass:collisions = _swig_property(_mul_nbapi.ofp_port_stats_prop_ethernet_collisions_get, _mul_nbapi.ofp_port_stats_prop_ethernet_collisions_set)
    def __init__(self): 
        this = _mul_nbapi.new_ofp_port_stats_prop_ethernet()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_ofp_port_stats_prop_ethernet
    __del__ = lambda self : None;
ofp_port_stats_prop_ethernet_swigregister = _mul_nbapi.ofp_port_stats_prop_ethernet_swigregister
ofp_port_stats_prop_ethernet_swigregister(ofp_port_stats_prop_ethernet)

class ofp_port_stats_prop_optical(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofp_port_stats_prop_optical, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofp_port_stats_prop_optical, name)
    __repr__ = _swig_repr
    __swig_setmethods__["type"] = _mul_nbapi.ofp_port_stats_prop_optical_type_set
    __swig_getmethods__["type"] = _mul_nbapi.ofp_port_stats_prop_optical_type_get
    if _newclass:type = _swig_property(_mul_nbapi.ofp_port_stats_prop_optical_type_get, _mul_nbapi.ofp_port_stats_prop_optical_type_set)
    __swig_setmethods__["length"] = _mul_nbapi.ofp_port_stats_prop_optical_length_set
    __swig_getmethods__["length"] = _mul_nbapi.ofp_port_stats_prop_optical_length_get
    if _newclass:length = _swig_property(_mul_nbapi.ofp_port_stats_prop_optical_length_get, _mul_nbapi.ofp_port_stats_prop_optical_length_set)
    __swig_setmethods__["pad"] = _mul_nbapi.ofp_port_stats_prop_optical_pad_set
    __swig_getmethods__["pad"] = _mul_nbapi.ofp_port_stats_prop_optical_pad_get
    if _newclass:pad = _swig_property(_mul_nbapi.ofp_port_stats_prop_optical_pad_get, _mul_nbapi.ofp_port_stats_prop_optical_pad_set)
    __swig_setmethods__["flags"] = _mul_nbapi.ofp_port_stats_prop_optical_flags_set
    __swig_getmethods__["flags"] = _mul_nbapi.ofp_port_stats_prop_optical_flags_get
    if _newclass:flags = _swig_property(_mul_nbapi.ofp_port_stats_prop_optical_flags_get, _mul_nbapi.ofp_port_stats_prop_optical_flags_set)
    __swig_setmethods__["tx_freq_lmda"] = _mul_nbapi.ofp_port_stats_prop_optical_tx_freq_lmda_set
    __swig_getmethods__["tx_freq_lmda"] = _mul_nbapi.ofp_port_stats_prop_optical_tx_freq_lmda_get
    if _newclass:tx_freq_lmda = _swig_property(_mul_nbapi.ofp_port_stats_prop_optical_tx_freq_lmda_get, _mul_nbapi.ofp_port_stats_prop_optical_tx_freq_lmda_set)
    __swig_setmethods__["tx_offset"] = _mul_nbapi.ofp_port_stats_prop_optical_tx_offset_set
    __swig_getmethods__["tx_offset"] = _mul_nbapi.ofp_port_stats_prop_optical_tx_offset_get
    if _newclass:tx_offset = _swig_property(_mul_nbapi.ofp_port_stats_prop_optical_tx_offset_get, _mul_nbapi.ofp_port_stats_prop_optical_tx_offset_set)
    __swig_setmethods__["tx_grid_span"] = _mul_nbapi.ofp_port_stats_prop_optical_tx_grid_span_set
    __swig_getmethods__["tx_grid_span"] = _mul_nbapi.ofp_port_stats_prop_optical_tx_grid_span_get
    if _newclass:tx_grid_span = _swig_property(_mul_nbapi.ofp_port_stats_prop_optical_tx_grid_span_get, _mul_nbapi.ofp_port_stats_prop_optical_tx_grid_span_set)
    __swig_setmethods__["rx_freq_lmda"] = _mul_nbapi.ofp_port_stats_prop_optical_rx_freq_lmda_set
    __swig_getmethods__["rx_freq_lmda"] = _mul_nbapi.ofp_port_stats_prop_optical_rx_freq_lmda_get
    if _newclass:rx_freq_lmda = _swig_property(_mul_nbapi.ofp_port_stats_prop_optical_rx_freq_lmda_get, _mul_nbapi.ofp_port_stats_prop_optical_rx_freq_lmda_set)
    __swig_setmethods__["rx_offset"] = _mul_nbapi.ofp_port_stats_prop_optical_rx_offset_set
    __swig_getmethods__["rx_offset"] = _mul_nbapi.ofp_port_stats_prop_optical_rx_offset_get
    if _newclass:rx_offset = _swig_property(_mul_nbapi.ofp_port_stats_prop_optical_rx_offset_get, _mul_nbapi.ofp_port_stats_prop_optical_rx_offset_set)
    __swig_setmethods__["rx_grid_span"] = _mul_nbapi.ofp_port_stats_prop_optical_rx_grid_span_set
    __swig_getmethods__["rx_grid_span"] = _mul_nbapi.ofp_port_stats_prop_optical_rx_grid_span_get
    if _newclass:rx_grid_span = _swig_property(_mul_nbapi.ofp_port_stats_prop_optical_rx_grid_span_get, _mul_nbapi.ofp_port_stats_prop_optical_rx_grid_span_set)
    __swig_setmethods__["tx_pwr"] = _mul_nbapi.ofp_port_stats_prop_optical_tx_pwr_set
    __swig_getmethods__["tx_pwr"] = _mul_nbapi.ofp_port_stats_prop_optical_tx_pwr_get
    if _newclass:tx_pwr = _swig_property(_mul_nbapi.ofp_port_stats_prop_optical_tx_pwr_get, _mul_nbapi.ofp_port_stats_prop_optical_tx_pwr_set)
    __swig_setmethods__["rx_pwr"] = _mul_nbapi.ofp_port_stats_prop_optical_rx_pwr_set
    __swig_getmethods__["rx_pwr"] = _mul_nbapi.ofp_port_stats_prop_optical_rx_pwr_get
    if _newclass:rx_pwr = _swig_property(_mul_nbapi.ofp_port_stats_prop_optical_rx_pwr_get, _mul_nbapi.ofp_port_stats_prop_optical_rx_pwr_set)
    __swig_setmethods__["bias_current"] = _mul_nbapi.ofp_port_stats_prop_optical_bias_current_set
    __swig_getmethods__["bias_current"] = _mul_nbapi.ofp_port_stats_prop_optical_bias_current_get
    if _newclass:bias_current = _swig_property(_mul_nbapi.ofp_port_stats_prop_optical_bias_current_get, _mul_nbapi.ofp_port_stats_prop_optical_bias_current_set)
    __swig_setmethods__["temperature"] = _mul_nbapi.ofp_port_stats_prop_optical_temperature_set
    __swig_getmethods__["temperature"] = _mul_nbapi.ofp_port_stats_prop_optical_temperature_get
    if _newclass:temperature = _swig_property(_mul_nbapi.ofp_port_stats_prop_optical_temperature_get, _mul_nbapi.ofp_port_stats_prop_optical_temperature_set)
    def __init__(self): 
        this = _mul_nbapi.new_ofp_port_stats_prop_optical()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_ofp_port_stats_prop_optical
    __del__ = lambda self : None;
ofp_port_stats_prop_optical_swigregister = _mul_nbapi.ofp_port_stats_prop_optical_swigregister
ofp_port_stats_prop_optical_swigregister(ofp_port_stats_prop_optical)

OFPOSF_RX_TUNE = _mul_nbapi.OFPOSF_RX_TUNE
OFPOSF_TX_TUNE = _mul_nbapi.OFPOSF_TX_TUNE
OFPOSF_TX_PWR = _mul_nbapi.OFPOSF_TX_PWR
OFPOSF_RX_PWR = _mul_nbapi.OFPOSF_RX_PWR
OFPOSF_TX_BIAS = _mul_nbapi.OFPOSF_TX_BIAS
OFPOSF_TX_TEMP = _mul_nbapi.OFPOSF_TX_TEMP
class ofp_port_stats_prop_experimenter(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofp_port_stats_prop_experimenter, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofp_port_stats_prop_experimenter, name)
    __repr__ = _swig_repr
    __swig_setmethods__["type"] = _mul_nbapi.ofp_port_stats_prop_experimenter_type_set
    __swig_getmethods__["type"] = _mul_nbapi.ofp_port_stats_prop_experimenter_type_get
    if _newclass:type = _swig_property(_mul_nbapi.ofp_port_stats_prop_experimenter_type_get, _mul_nbapi.ofp_port_stats_prop_experimenter_type_set)
    __swig_setmethods__["length"] = _mul_nbapi.ofp_port_stats_prop_experimenter_length_set
    __swig_getmethods__["length"] = _mul_nbapi.ofp_port_stats_prop_experimenter_length_get
    if _newclass:length = _swig_property(_mul_nbapi.ofp_port_stats_prop_experimenter_length_get, _mul_nbapi.ofp_port_stats_prop_experimenter_length_set)
    __swig_setmethods__["experimenter"] = _mul_nbapi.ofp_port_stats_prop_experimenter_experimenter_set
    __swig_getmethods__["experimenter"] = _mul_nbapi.ofp_port_stats_prop_experimenter_experimenter_get
    if _newclass:experimenter = _swig_property(_mul_nbapi.ofp_port_stats_prop_experimenter_experimenter_get, _mul_nbapi.ofp_port_stats_prop_experimenter_experimenter_set)
    __swig_setmethods__["exp_type"] = _mul_nbapi.ofp_port_stats_prop_experimenter_exp_type_set
    __swig_getmethods__["exp_type"] = _mul_nbapi.ofp_port_stats_prop_experimenter_exp_type_get
    if _newclass:exp_type = _swig_property(_mul_nbapi.ofp_port_stats_prop_experimenter_exp_type_get, _mul_nbapi.ofp_port_stats_prop_experimenter_exp_type_set)
    __swig_setmethods__["experimenter_data"] = _mul_nbapi.ofp_port_stats_prop_experimenter_experimenter_data_set
    __swig_getmethods__["experimenter_data"] = _mul_nbapi.ofp_port_stats_prop_experimenter_experimenter_data_get
    if _newclass:experimenter_data = _swig_property(_mul_nbapi.ofp_port_stats_prop_experimenter_experimenter_data_get, _mul_nbapi.ofp_port_stats_prop_experimenter_experimenter_data_set)
    def __init__(self): 
        this = _mul_nbapi.new_ofp_port_stats_prop_experimenter()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_ofp_port_stats_prop_experimenter
    __del__ = lambda self : None;
ofp_port_stats_prop_experimenter_swigregister = _mul_nbapi.ofp_port_stats_prop_experimenter_swigregister
ofp_port_stats_prop_experimenter_swigregister(ofp_port_stats_prop_experimenter)

class ofp140_port_stats_request(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofp140_port_stats_request, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofp140_port_stats_request, name)
    __repr__ = _swig_repr
    __swig_setmethods__["port_no"] = _mul_nbapi.ofp140_port_stats_request_port_no_set
    __swig_getmethods__["port_no"] = _mul_nbapi.ofp140_port_stats_request_port_no_get
    if _newclass:port_no = _swig_property(_mul_nbapi.ofp140_port_stats_request_port_no_get, _mul_nbapi.ofp140_port_stats_request_port_no_set)
    __swig_setmethods__["pad"] = _mul_nbapi.ofp140_port_stats_request_pad_set
    __swig_getmethods__["pad"] = _mul_nbapi.ofp140_port_stats_request_pad_get
    if _newclass:pad = _swig_property(_mul_nbapi.ofp140_port_stats_request_pad_get, _mul_nbapi.ofp140_port_stats_request_pad_set)
    def __init__(self): 
        this = _mul_nbapi.new_ofp140_port_stats_request()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_ofp140_port_stats_request
    __del__ = lambda self : None;
ofp140_port_stats_request_swigregister = _mul_nbapi.ofp140_port_stats_request_swigregister
ofp140_port_stats_request_swigregister(ofp140_port_stats_request)

class ofp140_port_stats(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofp140_port_stats, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofp140_port_stats, name)
    __repr__ = _swig_repr
    __swig_setmethods__["length"] = _mul_nbapi.ofp140_port_stats_length_set
    __swig_getmethods__["length"] = _mul_nbapi.ofp140_port_stats_length_get
    if _newclass:length = _swig_property(_mul_nbapi.ofp140_port_stats_length_get, _mul_nbapi.ofp140_port_stats_length_set)
    __swig_setmethods__["pad"] = _mul_nbapi.ofp140_port_stats_pad_set
    __swig_getmethods__["pad"] = _mul_nbapi.ofp140_port_stats_pad_get
    if _newclass:pad = _swig_property(_mul_nbapi.ofp140_port_stats_pad_get, _mul_nbapi.ofp140_port_stats_pad_set)
    __swig_setmethods__["port_no"] = _mul_nbapi.ofp140_port_stats_port_no_set
    __swig_getmethods__["port_no"] = _mul_nbapi.ofp140_port_stats_port_no_get
    if _newclass:port_no = _swig_property(_mul_nbapi.ofp140_port_stats_port_no_get, _mul_nbapi.ofp140_port_stats_port_no_set)
    __swig_setmethods__["duration_sec"] = _mul_nbapi.ofp140_port_stats_duration_sec_set
    __swig_getmethods__["duration_sec"] = _mul_nbapi.ofp140_port_stats_duration_sec_get
    if _newclass:duration_sec = _swig_property(_mul_nbapi.ofp140_port_stats_duration_sec_get, _mul_nbapi.ofp140_port_stats_duration_sec_set)
    __swig_setmethods__["duration_nsec"] = _mul_nbapi.ofp140_port_stats_duration_nsec_set
    __swig_getmethods__["duration_nsec"] = _mul_nbapi.ofp140_port_stats_duration_nsec_get
    if _newclass:duration_nsec = _swig_property(_mul_nbapi.ofp140_port_stats_duration_nsec_get, _mul_nbapi.ofp140_port_stats_duration_nsec_set)
    __swig_setmethods__["rx_packets"] = _mul_nbapi.ofp140_port_stats_rx_packets_set
    __swig_getmethods__["rx_packets"] = _mul_nbapi.ofp140_port_stats_rx_packets_get
    if _newclass:rx_packets = _swig_property(_mul_nbapi.ofp140_port_stats_rx_packets_get, _mul_nbapi.ofp140_port_stats_rx_packets_set)
    __swig_setmethods__["tx_packets"] = _mul_nbapi.ofp140_port_stats_tx_packets_set
    __swig_getmethods__["tx_packets"] = _mul_nbapi.ofp140_port_stats_tx_packets_get
    if _newclass:tx_packets = _swig_property(_mul_nbapi.ofp140_port_stats_tx_packets_get, _mul_nbapi.ofp140_port_stats_tx_packets_set)
    __swig_setmethods__["rx_bytes"] = _mul_nbapi.ofp140_port_stats_rx_bytes_set
    __swig_getmethods__["rx_bytes"] = _mul_nbapi.ofp140_port_stats_rx_bytes_get
    if _newclass:rx_bytes = _swig_property(_mul_nbapi.ofp140_port_stats_rx_bytes_get, _mul_nbapi.ofp140_port_stats_rx_bytes_set)
    __swig_setmethods__["tx_bytes"] = _mul_nbapi.ofp140_port_stats_tx_bytes_set
    __swig_getmethods__["tx_bytes"] = _mul_nbapi.ofp140_port_stats_tx_bytes_get
    if _newclass:tx_bytes = _swig_property(_mul_nbapi.ofp140_port_stats_tx_bytes_get, _mul_nbapi.ofp140_port_stats_tx_bytes_set)
    __swig_setmethods__["rx_dropped"] = _mul_nbapi.ofp140_port_stats_rx_dropped_set
    __swig_getmethods__["rx_dropped"] = _mul_nbapi.ofp140_port_stats_rx_dropped_get
    if _newclass:rx_dropped = _swig_property(_mul_nbapi.ofp140_port_stats_rx_dropped_get, _mul_nbapi.ofp140_port_stats_rx_dropped_set)
    __swig_setmethods__["tx_dropped"] = _mul_nbapi.ofp140_port_stats_tx_dropped_set
    __swig_getmethods__["tx_dropped"] = _mul_nbapi.ofp140_port_stats_tx_dropped_get
    if _newclass:tx_dropped = _swig_property(_mul_nbapi.ofp140_port_stats_tx_dropped_get, _mul_nbapi.ofp140_port_stats_tx_dropped_set)
    __swig_setmethods__["rx_errors"] = _mul_nbapi.ofp140_port_stats_rx_errors_set
    __swig_getmethods__["rx_errors"] = _mul_nbapi.ofp140_port_stats_rx_errors_get
    if _newclass:rx_errors = _swig_property(_mul_nbapi.ofp140_port_stats_rx_errors_get, _mul_nbapi.ofp140_port_stats_rx_errors_set)
    __swig_setmethods__["tx_errors"] = _mul_nbapi.ofp140_port_stats_tx_errors_set
    __swig_getmethods__["tx_errors"] = _mul_nbapi.ofp140_port_stats_tx_errors_get
    if _newclass:tx_errors = _swig_property(_mul_nbapi.ofp140_port_stats_tx_errors_get, _mul_nbapi.ofp140_port_stats_tx_errors_set)
    __swig_setmethods__["properties"] = _mul_nbapi.ofp140_port_stats_properties_set
    __swig_getmethods__["properties"] = _mul_nbapi.ofp140_port_stats_properties_get
    if _newclass:properties = _swig_property(_mul_nbapi.ofp140_port_stats_properties_get, _mul_nbapi.ofp140_port_stats_properties_set)
    def __init__(self): 
        this = _mul_nbapi.new_ofp140_port_stats()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_ofp140_port_stats
    __del__ = lambda self : None;
ofp140_port_stats_swigregister = _mul_nbapi.ofp140_port_stats_swigregister
ofp140_port_stats_swigregister(ofp140_port_stats)

class ofp140_queue_stats_request(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofp140_queue_stats_request, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofp140_queue_stats_request, name)
    __repr__ = _swig_repr
    __swig_setmethods__["port_no"] = _mul_nbapi.ofp140_queue_stats_request_port_no_set
    __swig_getmethods__["port_no"] = _mul_nbapi.ofp140_queue_stats_request_port_no_get
    if _newclass:port_no = _swig_property(_mul_nbapi.ofp140_queue_stats_request_port_no_get, _mul_nbapi.ofp140_queue_stats_request_port_no_set)
    __swig_setmethods__["queue_id"] = _mul_nbapi.ofp140_queue_stats_request_queue_id_set
    __swig_getmethods__["queue_id"] = _mul_nbapi.ofp140_queue_stats_request_queue_id_get
    if _newclass:queue_id = _swig_property(_mul_nbapi.ofp140_queue_stats_request_queue_id_get, _mul_nbapi.ofp140_queue_stats_request_queue_id_set)
    def __init__(self): 
        this = _mul_nbapi.new_ofp140_queue_stats_request()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_ofp140_queue_stats_request
    __del__ = lambda self : None;
ofp140_queue_stats_request_swigregister = _mul_nbapi.ofp140_queue_stats_request_swigregister
ofp140_queue_stats_request_swigregister(ofp140_queue_stats_request)

class ofp140_queue_stats(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofp140_queue_stats, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofp140_queue_stats, name)
    __repr__ = _swig_repr
    __swig_setmethods__["port_no"] = _mul_nbapi.ofp140_queue_stats_port_no_set
    __swig_getmethods__["port_no"] = _mul_nbapi.ofp140_queue_stats_port_no_get
    if _newclass:port_no = _swig_property(_mul_nbapi.ofp140_queue_stats_port_no_get, _mul_nbapi.ofp140_queue_stats_port_no_set)
    __swig_setmethods__["queue_id"] = _mul_nbapi.ofp140_queue_stats_queue_id_set
    __swig_getmethods__["queue_id"] = _mul_nbapi.ofp140_queue_stats_queue_id_get
    if _newclass:queue_id = _swig_property(_mul_nbapi.ofp140_queue_stats_queue_id_get, _mul_nbapi.ofp140_queue_stats_queue_id_set)
    __swig_setmethods__["tx_bytes"] = _mul_nbapi.ofp140_queue_stats_tx_bytes_set
    __swig_getmethods__["tx_bytes"] = _mul_nbapi.ofp140_queue_stats_tx_bytes_get
    if _newclass:tx_bytes = _swig_property(_mul_nbapi.ofp140_queue_stats_tx_bytes_get, _mul_nbapi.ofp140_queue_stats_tx_bytes_set)
    __swig_setmethods__["tx_packets"] = _mul_nbapi.ofp140_queue_stats_tx_packets_set
    __swig_getmethods__["tx_packets"] = _mul_nbapi.ofp140_queue_stats_tx_packets_get
    if _newclass:tx_packets = _swig_property(_mul_nbapi.ofp140_queue_stats_tx_packets_get, _mul_nbapi.ofp140_queue_stats_tx_packets_set)
    __swig_setmethods__["tx_errors"] = _mul_nbapi.ofp140_queue_stats_tx_errors_set
    __swig_getmethods__["tx_errors"] = _mul_nbapi.ofp140_queue_stats_tx_errors_get
    if _newclass:tx_errors = _swig_property(_mul_nbapi.ofp140_queue_stats_tx_errors_get, _mul_nbapi.ofp140_queue_stats_tx_errors_set)
    __swig_setmethods__["duration_sec"] = _mul_nbapi.ofp140_queue_stats_duration_sec_set
    __swig_getmethods__["duration_sec"] = _mul_nbapi.ofp140_queue_stats_duration_sec_get
    if _newclass:duration_sec = _swig_property(_mul_nbapi.ofp140_queue_stats_duration_sec_get, _mul_nbapi.ofp140_queue_stats_duration_sec_set)
    __swig_setmethods__["duration_nsec"] = _mul_nbapi.ofp140_queue_stats_duration_nsec_set
    __swig_getmethods__["duration_nsec"] = _mul_nbapi.ofp140_queue_stats_duration_nsec_get
    if _newclass:duration_nsec = _swig_property(_mul_nbapi.ofp140_queue_stats_duration_nsec_get, _mul_nbapi.ofp140_queue_stats_duration_nsec_set)
    def __init__(self): 
        this = _mul_nbapi.new_ofp140_queue_stats()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_ofp140_queue_stats
    __del__ = lambda self : None;
ofp140_queue_stats_swigregister = _mul_nbapi.ofp140_queue_stats_swigregister
ofp140_queue_stats_swigregister(ofp140_queue_stats)

class ofp140_packet_out(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofp140_packet_out, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofp140_packet_out, name)
    __repr__ = _swig_repr
    __swig_setmethods__["header"] = _mul_nbapi.ofp140_packet_out_header_set
    __swig_getmethods__["header"] = _mul_nbapi.ofp140_packet_out_header_get
    if _newclass:header = _swig_property(_mul_nbapi.ofp140_packet_out_header_get, _mul_nbapi.ofp140_packet_out_header_set)
    __swig_setmethods__["buffer_id"] = _mul_nbapi.ofp140_packet_out_buffer_id_set
    __swig_getmethods__["buffer_id"] = _mul_nbapi.ofp140_packet_out_buffer_id_get
    if _newclass:buffer_id = _swig_property(_mul_nbapi.ofp140_packet_out_buffer_id_get, _mul_nbapi.ofp140_packet_out_buffer_id_set)
    __swig_setmethods__["in_port"] = _mul_nbapi.ofp140_packet_out_in_port_set
    __swig_getmethods__["in_port"] = _mul_nbapi.ofp140_packet_out_in_port_get
    if _newclass:in_port = _swig_property(_mul_nbapi.ofp140_packet_out_in_port_get, _mul_nbapi.ofp140_packet_out_in_port_set)
    __swig_setmethods__["actions_len"] = _mul_nbapi.ofp140_packet_out_actions_len_set
    __swig_getmethods__["actions_len"] = _mul_nbapi.ofp140_packet_out_actions_len_get
    if _newclass:actions_len = _swig_property(_mul_nbapi.ofp140_packet_out_actions_len_get, _mul_nbapi.ofp140_packet_out_actions_len_set)
    __swig_setmethods__["pad"] = _mul_nbapi.ofp140_packet_out_pad_set
    __swig_getmethods__["pad"] = _mul_nbapi.ofp140_packet_out_pad_get
    if _newclass:pad = _swig_property(_mul_nbapi.ofp140_packet_out_pad_get, _mul_nbapi.ofp140_packet_out_pad_set)
    __swig_setmethods__["actions"] = _mul_nbapi.ofp140_packet_out_actions_set
    __swig_getmethods__["actions"] = _mul_nbapi.ofp140_packet_out_actions_get
    if _newclass:actions = _swig_property(_mul_nbapi.ofp140_packet_out_actions_get, _mul_nbapi.ofp140_packet_out_actions_set)
    def __init__(self): 
        this = _mul_nbapi.new_ofp140_packet_out()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_ofp140_packet_out
    __del__ = lambda self : None;
ofp140_packet_out_swigregister = _mul_nbapi.ofp140_packet_out_swigregister
ofp140_packet_out_swigregister(ofp140_packet_out)

class ofp140_packet_in(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofp140_packet_in, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofp140_packet_in, name)
    __repr__ = _swig_repr
    __swig_setmethods__["header"] = _mul_nbapi.ofp140_packet_in_header_set
    __swig_getmethods__["header"] = _mul_nbapi.ofp140_packet_in_header_get
    if _newclass:header = _swig_property(_mul_nbapi.ofp140_packet_in_header_get, _mul_nbapi.ofp140_packet_in_header_set)
    __swig_setmethods__["buffer_id"] = _mul_nbapi.ofp140_packet_in_buffer_id_set
    __swig_getmethods__["buffer_id"] = _mul_nbapi.ofp140_packet_in_buffer_id_get
    if _newclass:buffer_id = _swig_property(_mul_nbapi.ofp140_packet_in_buffer_id_get, _mul_nbapi.ofp140_packet_in_buffer_id_set)
    __swig_setmethods__["total_len"] = _mul_nbapi.ofp140_packet_in_total_len_set
    __swig_getmethods__["total_len"] = _mul_nbapi.ofp140_packet_in_total_len_get
    if _newclass:total_len = _swig_property(_mul_nbapi.ofp140_packet_in_total_len_get, _mul_nbapi.ofp140_packet_in_total_len_set)
    __swig_setmethods__["reason"] = _mul_nbapi.ofp140_packet_in_reason_set
    __swig_getmethods__["reason"] = _mul_nbapi.ofp140_packet_in_reason_get
    if _newclass:reason = _swig_property(_mul_nbapi.ofp140_packet_in_reason_get, _mul_nbapi.ofp140_packet_in_reason_set)
    __swig_setmethods__["table_id"] = _mul_nbapi.ofp140_packet_in_table_id_set
    __swig_getmethods__["table_id"] = _mul_nbapi.ofp140_packet_in_table_id_get
    if _newclass:table_id = _swig_property(_mul_nbapi.ofp140_packet_in_table_id_get, _mul_nbapi.ofp140_packet_in_table_id_set)
    __swig_setmethods__["cookie"] = _mul_nbapi.ofp140_packet_in_cookie_set
    __swig_getmethods__["cookie"] = _mul_nbapi.ofp140_packet_in_cookie_get
    if _newclass:cookie = _swig_property(_mul_nbapi.ofp140_packet_in_cookie_get, _mul_nbapi.ofp140_packet_in_cookie_set)
    __swig_setmethods__["match"] = _mul_nbapi.ofp140_packet_in_match_set
    __swig_getmethods__["match"] = _mul_nbapi.ofp140_packet_in_match_get
    if _newclass:match = _swig_property(_mul_nbapi.ofp140_packet_in_match_get, _mul_nbapi.ofp140_packet_in_match_set)
    def __init__(self): 
        this = _mul_nbapi.new_ofp140_packet_in()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_ofp140_packet_in
    __del__ = lambda self : None;
ofp140_packet_in_swigregister = _mul_nbapi.ofp140_packet_in_swigregister
ofp140_packet_in_swigregister(ofp140_packet_in)

class ofp140_flow_removed(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofp140_flow_removed, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofp140_flow_removed, name)
    __repr__ = _swig_repr
    __swig_setmethods__["header"] = _mul_nbapi.ofp140_flow_removed_header_set
    __swig_getmethods__["header"] = _mul_nbapi.ofp140_flow_removed_header_get
    if _newclass:header = _swig_property(_mul_nbapi.ofp140_flow_removed_header_get, _mul_nbapi.ofp140_flow_removed_header_set)
    __swig_setmethods__["cookie"] = _mul_nbapi.ofp140_flow_removed_cookie_set
    __swig_getmethods__["cookie"] = _mul_nbapi.ofp140_flow_removed_cookie_get
    if _newclass:cookie = _swig_property(_mul_nbapi.ofp140_flow_removed_cookie_get, _mul_nbapi.ofp140_flow_removed_cookie_set)
    __swig_setmethods__["priority"] = _mul_nbapi.ofp140_flow_removed_priority_set
    __swig_getmethods__["priority"] = _mul_nbapi.ofp140_flow_removed_priority_get
    if _newclass:priority = _swig_property(_mul_nbapi.ofp140_flow_removed_priority_get, _mul_nbapi.ofp140_flow_removed_priority_set)
    __swig_setmethods__["reason"] = _mul_nbapi.ofp140_flow_removed_reason_set
    __swig_getmethods__["reason"] = _mul_nbapi.ofp140_flow_removed_reason_get
    if _newclass:reason = _swig_property(_mul_nbapi.ofp140_flow_removed_reason_get, _mul_nbapi.ofp140_flow_removed_reason_set)
    __swig_setmethods__["table_id"] = _mul_nbapi.ofp140_flow_removed_table_id_set
    __swig_getmethods__["table_id"] = _mul_nbapi.ofp140_flow_removed_table_id_get
    if _newclass:table_id = _swig_property(_mul_nbapi.ofp140_flow_removed_table_id_get, _mul_nbapi.ofp140_flow_removed_table_id_set)
    __swig_setmethods__["duration_sec"] = _mul_nbapi.ofp140_flow_removed_duration_sec_set
    __swig_getmethods__["duration_sec"] = _mul_nbapi.ofp140_flow_removed_duration_sec_get
    if _newclass:duration_sec = _swig_property(_mul_nbapi.ofp140_flow_removed_duration_sec_get, _mul_nbapi.ofp140_flow_removed_duration_sec_set)
    __swig_setmethods__["duration_nsec"] = _mul_nbapi.ofp140_flow_removed_duration_nsec_set
    __swig_getmethods__["duration_nsec"] = _mul_nbapi.ofp140_flow_removed_duration_nsec_get
    if _newclass:duration_nsec = _swig_property(_mul_nbapi.ofp140_flow_removed_duration_nsec_get, _mul_nbapi.ofp140_flow_removed_duration_nsec_set)
    __swig_setmethods__["idle_timeout"] = _mul_nbapi.ofp140_flow_removed_idle_timeout_set
    __swig_getmethods__["idle_timeout"] = _mul_nbapi.ofp140_flow_removed_idle_timeout_get
    if _newclass:idle_timeout = _swig_property(_mul_nbapi.ofp140_flow_removed_idle_timeout_get, _mul_nbapi.ofp140_flow_removed_idle_timeout_set)
    __swig_setmethods__["hard_timeout"] = _mul_nbapi.ofp140_flow_removed_hard_timeout_set
    __swig_getmethods__["hard_timeout"] = _mul_nbapi.ofp140_flow_removed_hard_timeout_get
    if _newclass:hard_timeout = _swig_property(_mul_nbapi.ofp140_flow_removed_hard_timeout_get, _mul_nbapi.ofp140_flow_removed_hard_timeout_set)
    __swig_setmethods__["packet_count"] = _mul_nbapi.ofp140_flow_removed_packet_count_set
    __swig_getmethods__["packet_count"] = _mul_nbapi.ofp140_flow_removed_packet_count_get
    if _newclass:packet_count = _swig_property(_mul_nbapi.ofp140_flow_removed_packet_count_get, _mul_nbapi.ofp140_flow_removed_packet_count_set)
    __swig_setmethods__["byte_count"] = _mul_nbapi.ofp140_flow_removed_byte_count_set
    __swig_getmethods__["byte_count"] = _mul_nbapi.ofp140_flow_removed_byte_count_get
    if _newclass:byte_count = _swig_property(_mul_nbapi.ofp140_flow_removed_byte_count_get, _mul_nbapi.ofp140_flow_removed_byte_count_set)
    __swig_setmethods__["match"] = _mul_nbapi.ofp140_flow_removed_match_set
    __swig_getmethods__["match"] = _mul_nbapi.ofp140_flow_removed_match_get
    if _newclass:match = _swig_property(_mul_nbapi.ofp140_flow_removed_match_get, _mul_nbapi.ofp140_flow_removed_match_set)
    def __init__(self): 
        this = _mul_nbapi.new_ofp140_flow_removed()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_ofp140_flow_removed
    __del__ = lambda self : None;
ofp140_flow_removed_swigregister = _mul_nbapi.ofp140_flow_removed_swigregister
ofp140_flow_removed_swigregister(ofp140_flow_removed)

class ofp140_port_status(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofp140_port_status, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofp140_port_status, name)
    __repr__ = _swig_repr
    __swig_setmethods__["header"] = _mul_nbapi.ofp140_port_status_header_set
    __swig_getmethods__["header"] = _mul_nbapi.ofp140_port_status_header_get
    if _newclass:header = _swig_property(_mul_nbapi.ofp140_port_status_header_get, _mul_nbapi.ofp140_port_status_header_set)
    __swig_setmethods__["reason"] = _mul_nbapi.ofp140_port_status_reason_set
    __swig_getmethods__["reason"] = _mul_nbapi.ofp140_port_status_reason_get
    if _newclass:reason = _swig_property(_mul_nbapi.ofp140_port_status_reason_get, _mul_nbapi.ofp140_port_status_reason_set)
    __swig_setmethods__["pad"] = _mul_nbapi.ofp140_port_status_pad_set
    __swig_getmethods__["pad"] = _mul_nbapi.ofp140_port_status_pad_get
    if _newclass:pad = _swig_property(_mul_nbapi.ofp140_port_status_pad_get, _mul_nbapi.ofp140_port_status_pad_set)
    __swig_setmethods__["desc"] = _mul_nbapi.ofp140_port_status_desc_set
    __swig_getmethods__["desc"] = _mul_nbapi.ofp140_port_status_desc_get
    if _newclass:desc = _swig_property(_mul_nbapi.ofp140_port_status_desc_get, _mul_nbapi.ofp140_port_status_desc_set)
    def __init__(self): 
        this = _mul_nbapi.new_ofp140_port_status()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_ofp140_port_status
    __del__ = lambda self : None;
ofp140_port_status_swigregister = _mul_nbapi.ofp140_port_status_swigregister
ofp140_port_status_swigregister(ofp140_port_status)

class ofp140_queue_get_config_request(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofp140_queue_get_config_request, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofp140_queue_get_config_request, name)
    __repr__ = _swig_repr
    __swig_setmethods__["header"] = _mul_nbapi.ofp140_queue_get_config_request_header_set
    __swig_getmethods__["header"] = _mul_nbapi.ofp140_queue_get_config_request_header_get
    if _newclass:header = _swig_property(_mul_nbapi.ofp140_queue_get_config_request_header_get, _mul_nbapi.ofp140_queue_get_config_request_header_set)
    __swig_setmethods__["port"] = _mul_nbapi.ofp140_queue_get_config_request_port_set
    __swig_getmethods__["port"] = _mul_nbapi.ofp140_queue_get_config_request_port_get
    if _newclass:port = _swig_property(_mul_nbapi.ofp140_queue_get_config_request_port_get, _mul_nbapi.ofp140_queue_get_config_request_port_set)
    __swig_setmethods__["pad"] = _mul_nbapi.ofp140_queue_get_config_request_pad_set
    __swig_getmethods__["pad"] = _mul_nbapi.ofp140_queue_get_config_request_pad_get
    if _newclass:pad = _swig_property(_mul_nbapi.ofp140_queue_get_config_request_pad_get, _mul_nbapi.ofp140_queue_get_config_request_pad_set)
    def __init__(self): 
        this = _mul_nbapi.new_ofp140_queue_get_config_request()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_ofp140_queue_get_config_request
    __del__ = lambda self : None;
ofp140_queue_get_config_request_swigregister = _mul_nbapi.ofp140_queue_get_config_request_swigregister
ofp140_queue_get_config_request_swigregister(ofp140_queue_get_config_request)

class ofp140_queue_get_config_reply(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofp140_queue_get_config_reply, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofp140_queue_get_config_reply, name)
    __repr__ = _swig_repr
    __swig_setmethods__["header"] = _mul_nbapi.ofp140_queue_get_config_reply_header_set
    __swig_getmethods__["header"] = _mul_nbapi.ofp140_queue_get_config_reply_header_get
    if _newclass:header = _swig_property(_mul_nbapi.ofp140_queue_get_config_reply_header_get, _mul_nbapi.ofp140_queue_get_config_reply_header_set)
    __swig_setmethods__["port"] = _mul_nbapi.ofp140_queue_get_config_reply_port_set
    __swig_getmethods__["port"] = _mul_nbapi.ofp140_queue_get_config_reply_port_get
    if _newclass:port = _swig_property(_mul_nbapi.ofp140_queue_get_config_reply_port_get, _mul_nbapi.ofp140_queue_get_config_reply_port_set)
    __swig_setmethods__["pad"] = _mul_nbapi.ofp140_queue_get_config_reply_pad_set
    __swig_getmethods__["pad"] = _mul_nbapi.ofp140_queue_get_config_reply_pad_get
    if _newclass:pad = _swig_property(_mul_nbapi.ofp140_queue_get_config_reply_pad_get, _mul_nbapi.ofp140_queue_get_config_reply_pad_set)
    __swig_setmethods__["queues"] = _mul_nbapi.ofp140_queue_get_config_reply_queues_set
    __swig_getmethods__["queues"] = _mul_nbapi.ofp140_queue_get_config_reply_queues_get
    if _newclass:queues = _swig_property(_mul_nbapi.ofp140_queue_get_config_reply_queues_get, _mul_nbapi.ofp140_queue_get_config_reply_queues_set)
    def __init__(self): 
        this = _mul_nbapi.new_ofp140_queue_get_config_reply()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_ofp140_queue_get_config_reply
    __del__ = lambda self : None;
ofp140_queue_get_config_reply_swigregister = _mul_nbapi.ofp140_queue_get_config_reply_swigregister
ofp140_queue_get_config_reply_swigregister(ofp140_queue_get_config_reply)

OFPET140_HELLO_FAILED = _mul_nbapi.OFPET140_HELLO_FAILED
OFPET140_BAD_REQUEST = _mul_nbapi.OFPET140_BAD_REQUEST
OFPET140_BAD_ACTION = _mul_nbapi.OFPET140_BAD_ACTION
OFPET140_BAD_INSTRUCTION = _mul_nbapi.OFPET140_BAD_INSTRUCTION
OFPET140_BAD_MATCH = _mul_nbapi.OFPET140_BAD_MATCH
OFPET140_FLOW_MOD_FAILED = _mul_nbapi.OFPET140_FLOW_MOD_FAILED
OFPET140_GROUP_MOD_FAILED = _mul_nbapi.OFPET140_GROUP_MOD_FAILED
OFPET140_PORT_MOD_FAILED = _mul_nbapi.OFPET140_PORT_MOD_FAILED
OFPET140_TABLE_MOD_FAILED = _mul_nbapi.OFPET140_TABLE_MOD_FAILED
OFPET140_QUEUE_OP_FAILED = _mul_nbapi.OFPET140_QUEUE_OP_FAILED
OFPET140_SWITCH_CONFIG_FAILED = _mul_nbapi.OFPET140_SWITCH_CONFIG_FAILED
OFPET140_ROLE_REQUEST_FAILED = _mul_nbapi.OFPET140_ROLE_REQUEST_FAILED
OFPET140_METER_MOD_FAILED = _mul_nbapi.OFPET140_METER_MOD_FAILED
OFPET140_TABLE_FEATURES_FAILED = _mul_nbapi.OFPET140_TABLE_FEATURES_FAILED
OFPET140_EXPERIMENTER = _mul_nbapi.OFPET140_EXPERIMENTER
OFPBRC140_BAD_VERSION = _mul_nbapi.OFPBRC140_BAD_VERSION
OFPBRC140_BAD_TYPE = _mul_nbapi.OFPBRC140_BAD_TYPE
OFPBRC140_BAD_MULTIPART = _mul_nbapi.OFPBRC140_BAD_MULTIPART
OFPBRC140_BAD_EXPERIMENTER = _mul_nbapi.OFPBRC140_BAD_EXPERIMENTER
OFPBRC140_BAD_EXP_TYPE = _mul_nbapi.OFPBRC140_BAD_EXP_TYPE
OFPBRC140_EPERM = _mul_nbapi.OFPBRC140_EPERM
OFPBRC140_BAD_LEN = _mul_nbapi.OFPBRC140_BAD_LEN
OFPBRC140_BUFFER_EMPTY = _mul_nbapi.OFPBRC140_BUFFER_EMPTY
OFPBRC140_BUFFER_UNKNOWN = _mul_nbapi.OFPBRC140_BUFFER_UNKNOWN
OFPBRC140_BAD_TABLE_ID = _mul_nbapi.OFPBRC140_BAD_TABLE_ID
OFPBRC140_IS_SLAVE = _mul_nbapi.OFPBRC140_IS_SLAVE
OFPBRC140_BAD_PORT = _mul_nbapi.OFPBRC140_BAD_PORT
OFPBRC140_BAD_PACKET = _mul_nbapi.OFPBRC140_BAD_PACKET
OFPBRC140_MULTIPART_BUFFER_OVERFLOW = _mul_nbapi.OFPBRC140_MULTIPART_BUFFER_OVERFLOW
OFPBAC140_BAD_TYPE = _mul_nbapi.OFPBAC140_BAD_TYPE
OFPBAC140_BAD_LEN = _mul_nbapi.OFPBAC140_BAD_LEN
OFPBAC140_BAD_EXPERIMENTER = _mul_nbapi.OFPBAC140_BAD_EXPERIMENTER
OFPBAC140_BAD_EXP_TYPE = _mul_nbapi.OFPBAC140_BAD_EXP_TYPE
OFPBAC140_BAD_OUT_PORT = _mul_nbapi.OFPBAC140_BAD_OUT_PORT
OFPBAC140_BAD_ARGUMENT = _mul_nbapi.OFPBAC140_BAD_ARGUMENT
OFPBAC140_EPERM = _mul_nbapi.OFPBAC140_EPERM
OFPBAC140_TOO_MANY = _mul_nbapi.OFPBAC140_TOO_MANY
OFPBAC140_BAD_QUEUE = _mul_nbapi.OFPBAC140_BAD_QUEUE
OFPBAC140_BAD_OUT_GROUP = _mul_nbapi.OFPBAC140_BAD_OUT_GROUP
OFPBAC140_MATCH_INCONSISTENT = _mul_nbapi.OFPBAC140_MATCH_INCONSISTENT
OFPBAC140_UNSUPPORTED_ORDER = _mul_nbapi.OFPBAC140_UNSUPPORTED_ORDER
OFPBAC140_BAD_TAG = _mul_nbapi.OFPBAC140_BAD_TAG
OFPBAC140_BAD_SET_TYPE = _mul_nbapi.OFPBAC140_BAD_SET_TYPE
OFPBAC140_BAD_SET_LEN = _mul_nbapi.OFPBAC140_BAD_SET_LEN
OFPBAC140_BAD_SET_ARGUMENT = _mul_nbapi.OFPBAC140_BAD_SET_ARGUMENT
OFPBIC140_UNKNOWN_INST = _mul_nbapi.OFPBIC140_UNKNOWN_INST
OFPBIC140_UNSUP_INST = _mul_nbapi.OFPBIC140_UNSUP_INST
OFPBIC140_BAD_TABLE_ID = _mul_nbapi.OFPBIC140_BAD_TABLE_ID
OFPBIC140_UNSUP_METADATA = _mul_nbapi.OFPBIC140_UNSUP_METADATA
OFPBIC140_UNSUP_METADATA_MASK = _mul_nbapi.OFPBIC140_UNSUP_METADATA_MASK
OFPBIC140_BAD_EXPERIMENTER = _mul_nbapi.OFPBIC140_BAD_EXPERIMENTER
OFPBIC140_BAD_EXP_TYPE = _mul_nbapi.OFPBIC140_BAD_EXP_TYPE
OFPBIC140_BAD_LEN = _mul_nbapi.OFPBIC140_BAD_LEN
OFPBIC140_EPERM = _mul_nbapi.OFPBIC140_EPERM
OFPBMC140_BAD_TYPE = _mul_nbapi.OFPBMC140_BAD_TYPE
OFPBMC140_BAD_LEN = _mul_nbapi.OFPBMC140_BAD_LEN
OFPBMC140_BAD_TAG = _mul_nbapi.OFPBMC140_BAD_TAG
OFPBMC140_BAD_DL_ADDR_MASK = _mul_nbapi.OFPBMC140_BAD_DL_ADDR_MASK
OFPBMC140_BAD_NW_ADDR_MASK = _mul_nbapi.OFPBMC140_BAD_NW_ADDR_MASK
OFPBMC140_BAD_WILDCARDS = _mul_nbapi.OFPBMC140_BAD_WILDCARDS
OFPBMC140_BAD_FIELD = _mul_nbapi.OFPBMC140_BAD_FIELD
OFPBMC140_BAD_VALUE = _mul_nbapi.OFPBMC140_BAD_VALUE
OFPBMC140_BAD_MASK = _mul_nbapi.OFPBMC140_BAD_MASK
OFPBMC140_BAD_PREREQ = _mul_nbapi.OFPBMC140_BAD_PREREQ
OFPBMC140_DUP_FIELD = _mul_nbapi.OFPBMC140_DUP_FIELD
OFPBMC140_EPERM = _mul_nbapi.OFPBMC140_EPERM
OFPFMFC140_UNKNOWN = _mul_nbapi.OFPFMFC140_UNKNOWN
OFPFMFC140_TABLE_FULL = _mul_nbapi.OFPFMFC140_TABLE_FULL
OFPFMFC140_BAD_TABLE_ID = _mul_nbapi.OFPFMFC140_BAD_TABLE_ID
OFPFMFC140_OVERLAP = _mul_nbapi.OFPFMFC140_OVERLAP
OFPFMFC140_EPERM = _mul_nbapi.OFPFMFC140_EPERM
OFPFMFC140_BAD_TIMEOUT = _mul_nbapi.OFPFMFC140_BAD_TIMEOUT
OFPFMFC140_BAD_COMMAND = _mul_nbapi.OFPFMFC140_BAD_COMMAND
OFPFMFC140_BAD_FLAGS = _mul_nbapi.OFPFMFC140_BAD_FLAGS
OFPGMFC140_GROUP_EXISTS = _mul_nbapi.OFPGMFC140_GROUP_EXISTS
OFPGMFC140_INVALID_GROUP = _mul_nbapi.OFPGMFC140_INVALID_GROUP
OFPGMFC140_WEIGHT_UNSUPPORTED = _mul_nbapi.OFPGMFC140_WEIGHT_UNSUPPORTED
OFPGMFC140_OUT_OF_GROUPS = _mul_nbapi.OFPGMFC140_OUT_OF_GROUPS
OFPGMFC140_OUT_OF_BUCKETS = _mul_nbapi.OFPGMFC140_OUT_OF_BUCKETS
OFPGMFC140_CHAINING_UNSUPPORTED = _mul_nbapi.OFPGMFC140_CHAINING_UNSUPPORTED
OFPGMFC140_WATCH_UNSUPPORTED = _mul_nbapi.OFPGMFC140_WATCH_UNSUPPORTED
OFPGMFC140_LOOP = _mul_nbapi.OFPGMFC140_LOOP
OFPGMFC140_UNKNOWN_GROUP = _mul_nbapi.OFPGMFC140_UNKNOWN_GROUP
OFPGMFC140_CHAINED_GROUP = _mul_nbapi.OFPGMFC140_CHAINED_GROUP
OFPGMFC140_BAD_TYPE = _mul_nbapi.OFPGMFC140_BAD_TYPE
OFPGMFC140_BAD_COMMAND = _mul_nbapi.OFPGMFC140_BAD_COMMAND
OFPGMFC140_BAD_BUCKET = _mul_nbapi.OFPGMFC140_BAD_BUCKET
OFPGMFC140_BAD_WATCH = _mul_nbapi.OFPGMFC140_BAD_WATCH
OFPGMFC140_EPERM = _mul_nbapi.OFPGMFC140_EPERM
OFPPMFC140_BAD_PORT = _mul_nbapi.OFPPMFC140_BAD_PORT
OFPPMFC140_BAD_HW_ADDR = _mul_nbapi.OFPPMFC140_BAD_HW_ADDR
OFPPMFC140_BAD_CONFIG = _mul_nbapi.OFPPMFC140_BAD_CONFIG
OFPPMFC140_BAD_ADVERTISE = _mul_nbapi.OFPPMFC140_BAD_ADVERTISE
OFPPMFC140_EPERM = _mul_nbapi.OFPPMFC140_EPERM
OFPQOFC140_BAD_PORT = _mul_nbapi.OFPQOFC140_BAD_PORT
OFPQOFC140_BAD_QUEUE = _mul_nbapi.OFPQOFC140_BAD_QUEUE
OFPQOFC140_EPERM = _mul_nbapi.OFPQOFC140_EPERM
class ofp140_error_experimenter_msg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofp140_error_experimenter_msg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofp140_error_experimenter_msg, name)
    __repr__ = _swig_repr
    __swig_setmethods__["header"] = _mul_nbapi.ofp140_error_experimenter_msg_header_set
    __swig_getmethods__["header"] = _mul_nbapi.ofp140_error_experimenter_msg_header_get
    if _newclass:header = _swig_property(_mul_nbapi.ofp140_error_experimenter_msg_header_get, _mul_nbapi.ofp140_error_experimenter_msg_header_set)
    __swig_setmethods__["type"] = _mul_nbapi.ofp140_error_experimenter_msg_type_set
    __swig_getmethods__["type"] = _mul_nbapi.ofp140_error_experimenter_msg_type_get
    if _newclass:type = _swig_property(_mul_nbapi.ofp140_error_experimenter_msg_type_get, _mul_nbapi.ofp140_error_experimenter_msg_type_set)
    __swig_setmethods__["exp_type"] = _mul_nbapi.ofp140_error_experimenter_msg_exp_type_set
    __swig_getmethods__["exp_type"] = _mul_nbapi.ofp140_error_experimenter_msg_exp_type_get
    if _newclass:exp_type = _swig_property(_mul_nbapi.ofp140_error_experimenter_msg_exp_type_get, _mul_nbapi.ofp140_error_experimenter_msg_exp_type_set)
    __swig_setmethods__["experimenter"] = _mul_nbapi.ofp140_error_experimenter_msg_experimenter_set
    __swig_getmethods__["experimenter"] = _mul_nbapi.ofp140_error_experimenter_msg_experimenter_get
    if _newclass:experimenter = _swig_property(_mul_nbapi.ofp140_error_experimenter_msg_experimenter_get, _mul_nbapi.ofp140_error_experimenter_msg_experimenter_set)
    __swig_setmethods__["data"] = _mul_nbapi.ofp140_error_experimenter_msg_data_set
    __swig_getmethods__["data"] = _mul_nbapi.ofp140_error_experimenter_msg_data_get
    if _newclass:data = _swig_property(_mul_nbapi.ofp140_error_experimenter_msg_data_get, _mul_nbapi.ofp140_error_experimenter_msg_data_set)
    def __init__(self): 
        this = _mul_nbapi.new_ofp140_error_experimenter_msg()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_ofp140_error_experimenter_msg
    __del__ = lambda self : None;
ofp140_error_experimenter_msg_swigregister = _mul_nbapi.ofp140_error_experimenter_msg_swigregister
ofp140_error_experimenter_msg_swigregister(ofp140_error_experimenter_msg)

OF_DUMP_INST_SZ = _mul_nbapi.OF_DUMP_INST_SZ
OF_DUMP_ACT_SZ = _mul_nbapi.OF_DUMP_ACT_SZ
OF_DUMP_WC_SZ = _mul_nbapi.OF_DUMP_WC_SZ
FL_PBUF_SZ = _mul_nbapi.FL_PBUF_SZ
OF_DUMP_METER_FEAT_SZ = _mul_nbapi.OF_DUMP_METER_FEAT_SZ
OF_DUMP_PORT_STATS_SZ = _mul_nbapi.OF_DUMP_PORT_STATS_SZ
OF_DUMP_GRP_FEAT_SZ = _mul_nbapi.OF_DUMP_GRP_FEAT_SZ
OF_DUMP_TBL_FEAT_SZ = _mul_nbapi.OF_DUMP_TBL_FEAT_SZ
OF_DUMP_MSG_SZ = _mul_nbapi.OF_DUMP_MSG_SZ
OF_DUMP_PORT_DESC_SZ = _mul_nbapi.OF_DUMP_PORT_DESC_SZ
OF_MAX_MISS_SEND_LEN = _mul_nbapi.OF_MAX_MISS_SEND_LEN
OF_MAX_FLOW_MOD_BUF_SZ = _mul_nbapi.OF_MAX_FLOW_MOD_BUF_SZ
OF_ALL_TABLES = _mul_nbapi.OF_ALL_TABLES
OF_NO_PORT = _mul_nbapi.OF_NO_PORT
OF_FL_TBL_FEAT_INSTRUCTIONS = _mul_nbapi.OF_FL_TBL_FEAT_INSTRUCTIONS
OF_FL_TBL_FEAT_INSTRUCTIONS_MISS = _mul_nbapi.OF_FL_TBL_FEAT_INSTRUCTIONS_MISS
OF_FL_TBL_FEAT_ACTIONS = _mul_nbapi.OF_FL_TBL_FEAT_ACTIONS
OF_FL_TBL_FEAT_ACTIONS_MISS = _mul_nbapi.OF_FL_TBL_FEAT_ACTIONS_MISS
OF_FL_TBL_FEAT_NTABLE = _mul_nbapi.OF_FL_TBL_FEAT_NTABLE
OF_FL_TBL_FEAT_NTABLE_MISS = _mul_nbapi.OF_FL_TBL_FEAT_NTABLE_MISS
OF_FL_TBL_FEAT_WR_ACT = _mul_nbapi.OF_FL_TBL_FEAT_WR_ACT
OF_FL_TBL_FEAT_WR_ACT_MISS = _mul_nbapi.OF_FL_TBL_FEAT_WR_ACT_MISS
OF_FL_TBL_FEAT_APP_ACT = _mul_nbapi.OF_FL_TBL_FEAT_APP_ACT
OF_FL_TBL_FEAT_APP_ACT_MISS = _mul_nbapi.OF_FL_TBL_FEAT_APP_ACT_MISS
OF_FL_TBL_FEAT_WR_SETF = _mul_nbapi.OF_FL_TBL_FEAT_WR_SETF
OF_FL_TBL_FEAT_WR_SETF_MISS = _mul_nbapi.OF_FL_TBL_FEAT_WR_SETF_MISS
OF_FL_TBL_FEAT_APP_SETF = _mul_nbapi.OF_FL_TBL_FEAT_APP_SETF
OF_FL_TBL_FEAT_APP_SETF_MISS = _mul_nbapi.OF_FL_TBL_FEAT_APP_SETF_MISS
class of_flow_tbl_props(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, of_flow_tbl_props, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, of_flow_tbl_props, name)
    __repr__ = _swig_repr
    __swig_setmethods__["name"] = _mul_nbapi.of_flow_tbl_props_name_set
    __swig_getmethods__["name"] = _mul_nbapi.of_flow_tbl_props_name_get
    if _newclass:name = _swig_property(_mul_nbapi.of_flow_tbl_props_name_get, _mul_nbapi.of_flow_tbl_props_name_set)
    __swig_setmethods__["metadata_match"] = _mul_nbapi.of_flow_tbl_props_metadata_match_set
    __swig_getmethods__["metadata_match"] = _mul_nbapi.of_flow_tbl_props_metadata_match_get
    if _newclass:metadata_match = _swig_property(_mul_nbapi.of_flow_tbl_props_metadata_match_get, _mul_nbapi.of_flow_tbl_props_metadata_match_set)
    __swig_setmethods__["metadata_write"] = _mul_nbapi.of_flow_tbl_props_metadata_write_set
    __swig_getmethods__["metadata_write"] = _mul_nbapi.of_flow_tbl_props_metadata_write_get
    if _newclass:metadata_write = _swig_property(_mul_nbapi.of_flow_tbl_props_metadata_write_get, _mul_nbapi.of_flow_tbl_props_metadata_write_set)
    __swig_setmethods__["config"] = _mul_nbapi.of_flow_tbl_props_config_set
    __swig_getmethods__["config"] = _mul_nbapi.of_flow_tbl_props_config_get
    if _newclass:config = _swig_property(_mul_nbapi.of_flow_tbl_props_config_get, _mul_nbapi.of_flow_tbl_props_config_set)
    __swig_setmethods__["max_entries"] = _mul_nbapi.of_flow_tbl_props_max_entries_set
    __swig_getmethods__["max_entries"] = _mul_nbapi.of_flow_tbl_props_max_entries_get
    if _newclass:max_entries = _swig_property(_mul_nbapi.of_flow_tbl_props_max_entries_get, _mul_nbapi.of_flow_tbl_props_max_entries_set)
    __swig_setmethods__["bm_inst"] = _mul_nbapi.of_flow_tbl_props_bm_inst_set
    __swig_getmethods__["bm_inst"] = _mul_nbapi.of_flow_tbl_props_bm_inst_get
    if _newclass:bm_inst = _swig_property(_mul_nbapi.of_flow_tbl_props_bm_inst_get, _mul_nbapi.of_flow_tbl_props_bm_inst_set)
    __swig_setmethods__["bm_inst_miss"] = _mul_nbapi.of_flow_tbl_props_bm_inst_miss_set
    __swig_getmethods__["bm_inst_miss"] = _mul_nbapi.of_flow_tbl_props_bm_inst_miss_get
    if _newclass:bm_inst_miss = _swig_property(_mul_nbapi.of_flow_tbl_props_bm_inst_miss_get, _mul_nbapi.of_flow_tbl_props_bm_inst_miss_set)
    __swig_setmethods__["bm_wr_actions"] = _mul_nbapi.of_flow_tbl_props_bm_wr_actions_set
    __swig_getmethods__["bm_wr_actions"] = _mul_nbapi.of_flow_tbl_props_bm_wr_actions_get
    if _newclass:bm_wr_actions = _swig_property(_mul_nbapi.of_flow_tbl_props_bm_wr_actions_get, _mul_nbapi.of_flow_tbl_props_bm_wr_actions_set)
    __swig_setmethods__["bm_wr_actions_miss"] = _mul_nbapi.of_flow_tbl_props_bm_wr_actions_miss_set
    __swig_getmethods__["bm_wr_actions_miss"] = _mul_nbapi.of_flow_tbl_props_bm_wr_actions_miss_get
    if _newclass:bm_wr_actions_miss = _swig_property(_mul_nbapi.of_flow_tbl_props_bm_wr_actions_miss_get, _mul_nbapi.of_flow_tbl_props_bm_wr_actions_miss_set)
    __swig_setmethods__["bm_app_actions"] = _mul_nbapi.of_flow_tbl_props_bm_app_actions_set
    __swig_getmethods__["bm_app_actions"] = _mul_nbapi.of_flow_tbl_props_bm_app_actions_get
    if _newclass:bm_app_actions = _swig_property(_mul_nbapi.of_flow_tbl_props_bm_app_actions_get, _mul_nbapi.of_flow_tbl_props_bm_app_actions_set)
    __swig_setmethods__["bm_app_actions_miss"] = _mul_nbapi.of_flow_tbl_props_bm_app_actions_miss_set
    __swig_getmethods__["bm_app_actions_miss"] = _mul_nbapi.of_flow_tbl_props_bm_app_actions_miss_get
    if _newclass:bm_app_actions_miss = _swig_property(_mul_nbapi.of_flow_tbl_props_bm_app_actions_miss_get, _mul_nbapi.of_flow_tbl_props_bm_app_actions_miss_set)
    __swig_setmethods__["bm_next_tables"] = _mul_nbapi.of_flow_tbl_props_bm_next_tables_set
    __swig_getmethods__["bm_next_tables"] = _mul_nbapi.of_flow_tbl_props_bm_next_tables_get
    if _newclass:bm_next_tables = _swig_property(_mul_nbapi.of_flow_tbl_props_bm_next_tables_get, _mul_nbapi.of_flow_tbl_props_bm_next_tables_set)
    __swig_setmethods__["bm_next_tables_miss"] = _mul_nbapi.of_flow_tbl_props_bm_next_tables_miss_set
    __swig_getmethods__["bm_next_tables_miss"] = _mul_nbapi.of_flow_tbl_props_bm_next_tables_miss_get
    if _newclass:bm_next_tables_miss = _swig_property(_mul_nbapi.of_flow_tbl_props_bm_next_tables_miss_get, _mul_nbapi.of_flow_tbl_props_bm_next_tables_miss_set)
    __swig_setmethods__["bm_wr_set_field"] = _mul_nbapi.of_flow_tbl_props_bm_wr_set_field_set
    __swig_getmethods__["bm_wr_set_field"] = _mul_nbapi.of_flow_tbl_props_bm_wr_set_field_get
    if _newclass:bm_wr_set_field = _swig_property(_mul_nbapi.of_flow_tbl_props_bm_wr_set_field_get, _mul_nbapi.of_flow_tbl_props_bm_wr_set_field_set)
    __swig_setmethods__["bm_wr_set_field_miss"] = _mul_nbapi.of_flow_tbl_props_bm_wr_set_field_miss_set
    __swig_getmethods__["bm_wr_set_field_miss"] = _mul_nbapi.of_flow_tbl_props_bm_wr_set_field_miss_get
    if _newclass:bm_wr_set_field_miss = _swig_property(_mul_nbapi.of_flow_tbl_props_bm_wr_set_field_miss_get, _mul_nbapi.of_flow_tbl_props_bm_wr_set_field_miss_set)
    __swig_setmethods__["bm_app_set_field"] = _mul_nbapi.of_flow_tbl_props_bm_app_set_field_set
    __swig_getmethods__["bm_app_set_field"] = _mul_nbapi.of_flow_tbl_props_bm_app_set_field_get
    if _newclass:bm_app_set_field = _swig_property(_mul_nbapi.of_flow_tbl_props_bm_app_set_field_get, _mul_nbapi.of_flow_tbl_props_bm_app_set_field_set)
    __swig_setmethods__["bm_app_set_field_miss"] = _mul_nbapi.of_flow_tbl_props_bm_app_set_field_miss_set
    __swig_getmethods__["bm_app_set_field_miss"] = _mul_nbapi.of_flow_tbl_props_bm_app_set_field_miss_get
    if _newclass:bm_app_set_field_miss = _swig_property(_mul_nbapi.of_flow_tbl_props_bm_app_set_field_miss_get, _mul_nbapi.of_flow_tbl_props_bm_app_set_field_miss_set)
    def __init__(self): 
        this = _mul_nbapi.new_of_flow_tbl_props()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_of_flow_tbl_props
    __del__ = lambda self : None;
of_flow_tbl_props_swigregister = _mul_nbapi.of_flow_tbl_props_swigregister
of_flow_tbl_props_swigregister(of_flow_tbl_props)
OF_MAX_TABLE_BMASK_SZ = _mul_nbapi.OF_MAX_TABLE_BMASK_SZ
OF_MAX_SET_FIELD_BMASK_SZ = _mul_nbapi.OF_MAX_SET_FIELD_BMASK_SZ

class ofp_act_parsers(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofp_act_parsers, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofp_act_parsers, name)
    __repr__ = _swig_repr
    __swig_setmethods__["act_output"] = _mul_nbapi.ofp_act_parsers_act_output_set
    __swig_getmethods__["act_output"] = _mul_nbapi.ofp_act_parsers_act_output_get
    if _newclass:act_output = _swig_property(_mul_nbapi.ofp_act_parsers_act_output_get, _mul_nbapi.ofp_act_parsers_act_output_set)
    __swig_setmethods__["act_push"] = _mul_nbapi.ofp_act_parsers_act_push_set
    __swig_getmethods__["act_push"] = _mul_nbapi.ofp_act_parsers_act_push_get
    if _newclass:act_push = _swig_property(_mul_nbapi.ofp_act_parsers_act_push_get, _mul_nbapi.ofp_act_parsers_act_push_set)
    __swig_setmethods__["act_pop_vlan"] = _mul_nbapi.ofp_act_parsers_act_pop_vlan_set
    __swig_getmethods__["act_pop_vlan"] = _mul_nbapi.ofp_act_parsers_act_pop_vlan_get
    if _newclass:act_pop_vlan = _swig_property(_mul_nbapi.ofp_act_parsers_act_pop_vlan_get, _mul_nbapi.ofp_act_parsers_act_pop_vlan_set)
    __swig_setmethods__["act_pop_mpls"] = _mul_nbapi.ofp_act_parsers_act_pop_mpls_set
    __swig_getmethods__["act_pop_mpls"] = _mul_nbapi.ofp_act_parsers_act_pop_mpls_get
    if _newclass:act_pop_mpls = _swig_property(_mul_nbapi.ofp_act_parsers_act_pop_mpls_get, _mul_nbapi.ofp_act_parsers_act_pop_mpls_set)
    __swig_setmethods__["act_set_mpls_ttl"] = _mul_nbapi.ofp_act_parsers_act_set_mpls_ttl_set
    __swig_getmethods__["act_set_mpls_ttl"] = _mul_nbapi.ofp_act_parsers_act_set_mpls_ttl_get
    if _newclass:act_set_mpls_ttl = _swig_property(_mul_nbapi.ofp_act_parsers_act_set_mpls_ttl_get, _mul_nbapi.ofp_act_parsers_act_set_mpls_ttl_set)
    __swig_setmethods__["act_dec_mpls_ttl"] = _mul_nbapi.ofp_act_parsers_act_dec_mpls_ttl_set
    __swig_getmethods__["act_dec_mpls_ttl"] = _mul_nbapi.ofp_act_parsers_act_dec_mpls_ttl_get
    if _newclass:act_dec_mpls_ttl = _swig_property(_mul_nbapi.ofp_act_parsers_act_dec_mpls_ttl_get, _mul_nbapi.ofp_act_parsers_act_dec_mpls_ttl_set)
    __swig_setmethods__["act_pop_pbb"] = _mul_nbapi.ofp_act_parsers_act_pop_pbb_set
    __swig_getmethods__["act_pop_pbb"] = _mul_nbapi.ofp_act_parsers_act_pop_pbb_get
    if _newclass:act_pop_pbb = _swig_property(_mul_nbapi.ofp_act_parsers_act_pop_pbb_get, _mul_nbapi.ofp_act_parsers_act_pop_pbb_set)
    __swig_setmethods__["act_set_queue"] = _mul_nbapi.ofp_act_parsers_act_set_queue_set
    __swig_getmethods__["act_set_queue"] = _mul_nbapi.ofp_act_parsers_act_set_queue_get
    if _newclass:act_set_queue = _swig_property(_mul_nbapi.ofp_act_parsers_act_set_queue_get, _mul_nbapi.ofp_act_parsers_act_set_queue_set)
    __swig_setmethods__["act_set_grp"] = _mul_nbapi.ofp_act_parsers_act_set_grp_set
    __swig_getmethods__["act_set_grp"] = _mul_nbapi.ofp_act_parsers_act_set_grp_get
    if _newclass:act_set_grp = _swig_property(_mul_nbapi.ofp_act_parsers_act_set_grp_get, _mul_nbapi.ofp_act_parsers_act_set_grp_set)
    __swig_setmethods__["act_set_nw_ttl"] = _mul_nbapi.ofp_act_parsers_act_set_nw_ttl_set
    __swig_getmethods__["act_set_nw_ttl"] = _mul_nbapi.ofp_act_parsers_act_set_nw_ttl_get
    if _newclass:act_set_nw_ttl = _swig_property(_mul_nbapi.ofp_act_parsers_act_set_nw_ttl_get, _mul_nbapi.ofp_act_parsers_act_set_nw_ttl_set)
    __swig_setmethods__["act_dec_nw_ttl"] = _mul_nbapi.ofp_act_parsers_act_dec_nw_ttl_set
    __swig_getmethods__["act_dec_nw_ttl"] = _mul_nbapi.ofp_act_parsers_act_dec_nw_ttl_get
    if _newclass:act_dec_nw_ttl = _swig_property(_mul_nbapi.ofp_act_parsers_act_dec_nw_ttl_get, _mul_nbapi.ofp_act_parsers_act_dec_nw_ttl_set)
    __swig_setmethods__["act_set_vlan"] = _mul_nbapi.ofp_act_parsers_act_set_vlan_set
    __swig_getmethods__["act_set_vlan"] = _mul_nbapi.ofp_act_parsers_act_set_vlan_get
    if _newclass:act_set_vlan = _swig_property(_mul_nbapi.ofp_act_parsers_act_set_vlan_get, _mul_nbapi.ofp_act_parsers_act_set_vlan_set)
    __swig_setmethods__["act_set_vlan_pcp"] = _mul_nbapi.ofp_act_parsers_act_set_vlan_pcp_set
    __swig_getmethods__["act_set_vlan_pcp"] = _mul_nbapi.ofp_act_parsers_act_set_vlan_pcp_get
    if _newclass:act_set_vlan_pcp = _swig_property(_mul_nbapi.ofp_act_parsers_act_set_vlan_pcp_get, _mul_nbapi.ofp_act_parsers_act_set_vlan_pcp_set)
    __swig_setmethods__["act_set_dl_dst"] = _mul_nbapi.ofp_act_parsers_act_set_dl_dst_set
    __swig_getmethods__["act_set_dl_dst"] = _mul_nbapi.ofp_act_parsers_act_set_dl_dst_get
    if _newclass:act_set_dl_dst = _swig_property(_mul_nbapi.ofp_act_parsers_act_set_dl_dst_get, _mul_nbapi.ofp_act_parsers_act_set_dl_dst_set)
    __swig_setmethods__["act_set_dl_src"] = _mul_nbapi.ofp_act_parsers_act_set_dl_src_set
    __swig_getmethods__["act_set_dl_src"] = _mul_nbapi.ofp_act_parsers_act_set_dl_src_get
    if _newclass:act_set_dl_src = _swig_property(_mul_nbapi.ofp_act_parsers_act_set_dl_src_get, _mul_nbapi.ofp_act_parsers_act_set_dl_src_set)
    __swig_setmethods__["act_set_nw_src"] = _mul_nbapi.ofp_act_parsers_act_set_nw_src_set
    __swig_getmethods__["act_set_nw_src"] = _mul_nbapi.ofp_act_parsers_act_set_nw_src_get
    if _newclass:act_set_nw_src = _swig_property(_mul_nbapi.ofp_act_parsers_act_set_nw_src_get, _mul_nbapi.ofp_act_parsers_act_set_nw_src_set)
    __swig_setmethods__["act_set_nw_dst"] = _mul_nbapi.ofp_act_parsers_act_set_nw_dst_set
    __swig_getmethods__["act_set_nw_dst"] = _mul_nbapi.ofp_act_parsers_act_set_nw_dst_get
    if _newclass:act_set_nw_dst = _swig_property(_mul_nbapi.ofp_act_parsers_act_set_nw_dst_get, _mul_nbapi.ofp_act_parsers_act_set_nw_dst_set)
    __swig_setmethods__["act_set_nw_tos"] = _mul_nbapi.ofp_act_parsers_act_set_nw_tos_set
    __swig_getmethods__["act_set_nw_tos"] = _mul_nbapi.ofp_act_parsers_act_set_nw_tos_get
    if _newclass:act_set_nw_tos = _swig_property(_mul_nbapi.ofp_act_parsers_act_set_nw_tos_get, _mul_nbapi.ofp_act_parsers_act_set_nw_tos_set)
    __swig_setmethods__["act_set_field"] = _mul_nbapi.ofp_act_parsers_act_set_field_set
    __swig_getmethods__["act_set_field"] = _mul_nbapi.ofp_act_parsers_act_set_field_get
    if _newclass:act_set_field = _swig_property(_mul_nbapi.ofp_act_parsers_act_set_field_get, _mul_nbapi.ofp_act_parsers_act_set_field_set)
    __swig_setmethods__["act_setf_in_port"] = _mul_nbapi.ofp_act_parsers_act_setf_in_port_set
    __swig_getmethods__["act_setf_in_port"] = _mul_nbapi.ofp_act_parsers_act_setf_in_port_get
    if _newclass:act_setf_in_port = _swig_property(_mul_nbapi.ofp_act_parsers_act_setf_in_port_get, _mul_nbapi.ofp_act_parsers_act_setf_in_port_set)
    __swig_setmethods__["act_setf_dl_dst"] = _mul_nbapi.ofp_act_parsers_act_setf_dl_dst_set
    __swig_getmethods__["act_setf_dl_dst"] = _mul_nbapi.ofp_act_parsers_act_setf_dl_dst_get
    if _newclass:act_setf_dl_dst = _swig_property(_mul_nbapi.ofp_act_parsers_act_setf_dl_dst_get, _mul_nbapi.ofp_act_parsers_act_setf_dl_dst_set)
    __swig_setmethods__["act_setf_dl_src"] = _mul_nbapi.ofp_act_parsers_act_setf_dl_src_set
    __swig_getmethods__["act_setf_dl_src"] = _mul_nbapi.ofp_act_parsers_act_setf_dl_src_get
    if _newclass:act_setf_dl_src = _swig_property(_mul_nbapi.ofp_act_parsers_act_setf_dl_src_get, _mul_nbapi.ofp_act_parsers_act_setf_dl_src_set)
    __swig_setmethods__["act_setf_dl_type"] = _mul_nbapi.ofp_act_parsers_act_setf_dl_type_set
    __swig_getmethods__["act_setf_dl_type"] = _mul_nbapi.ofp_act_parsers_act_setf_dl_type_get
    if _newclass:act_setf_dl_type = _swig_property(_mul_nbapi.ofp_act_parsers_act_setf_dl_type_get, _mul_nbapi.ofp_act_parsers_act_setf_dl_type_set)
    __swig_setmethods__["act_setf_dl_vlan"] = _mul_nbapi.ofp_act_parsers_act_setf_dl_vlan_set
    __swig_getmethods__["act_setf_dl_vlan"] = _mul_nbapi.ofp_act_parsers_act_setf_dl_vlan_get
    if _newclass:act_setf_dl_vlan = _swig_property(_mul_nbapi.ofp_act_parsers_act_setf_dl_vlan_get, _mul_nbapi.ofp_act_parsers_act_setf_dl_vlan_set)
    __swig_setmethods__["act_setf_dl_vlan_pcp"] = _mul_nbapi.ofp_act_parsers_act_setf_dl_vlan_pcp_set
    __swig_getmethods__["act_setf_dl_vlan_pcp"] = _mul_nbapi.ofp_act_parsers_act_setf_dl_vlan_pcp_get
    if _newclass:act_setf_dl_vlan_pcp = _swig_property(_mul_nbapi.ofp_act_parsers_act_setf_dl_vlan_pcp_get, _mul_nbapi.ofp_act_parsers_act_setf_dl_vlan_pcp_set)
    __swig_setmethods__["act_setf_mpls_label"] = _mul_nbapi.ofp_act_parsers_act_setf_mpls_label_set
    __swig_getmethods__["act_setf_mpls_label"] = _mul_nbapi.ofp_act_parsers_act_setf_mpls_label_get
    if _newclass:act_setf_mpls_label = _swig_property(_mul_nbapi.ofp_act_parsers_act_setf_mpls_label_get, _mul_nbapi.ofp_act_parsers_act_setf_mpls_label_set)
    __swig_setmethods__["act_setf_mpls_tc"] = _mul_nbapi.ofp_act_parsers_act_setf_mpls_tc_set
    __swig_getmethods__["act_setf_mpls_tc"] = _mul_nbapi.ofp_act_parsers_act_setf_mpls_tc_get
    if _newclass:act_setf_mpls_tc = _swig_property(_mul_nbapi.ofp_act_parsers_act_setf_mpls_tc_get, _mul_nbapi.ofp_act_parsers_act_setf_mpls_tc_set)
    __swig_setmethods__["act_setf_mpls_bos"] = _mul_nbapi.ofp_act_parsers_act_setf_mpls_bos_set
    __swig_getmethods__["act_setf_mpls_bos"] = _mul_nbapi.ofp_act_parsers_act_setf_mpls_bos_get
    if _newclass:act_setf_mpls_bos = _swig_property(_mul_nbapi.ofp_act_parsers_act_setf_mpls_bos_get, _mul_nbapi.ofp_act_parsers_act_setf_mpls_bos_set)
    __swig_setmethods__["act_setf_ipv4_src"] = _mul_nbapi.ofp_act_parsers_act_setf_ipv4_src_set
    __swig_getmethods__["act_setf_ipv4_src"] = _mul_nbapi.ofp_act_parsers_act_setf_ipv4_src_get
    if _newclass:act_setf_ipv4_src = _swig_property(_mul_nbapi.ofp_act_parsers_act_setf_ipv4_src_get, _mul_nbapi.ofp_act_parsers_act_setf_ipv4_src_set)
    __swig_setmethods__["act_setf_ipv4_dst"] = _mul_nbapi.ofp_act_parsers_act_setf_ipv4_dst_set
    __swig_getmethods__["act_setf_ipv4_dst"] = _mul_nbapi.ofp_act_parsers_act_setf_ipv4_dst_get
    if _newclass:act_setf_ipv4_dst = _swig_property(_mul_nbapi.ofp_act_parsers_act_setf_ipv4_dst_get, _mul_nbapi.ofp_act_parsers_act_setf_ipv4_dst_set)
    __swig_setmethods__["act_setf_ipv6_src"] = _mul_nbapi.ofp_act_parsers_act_setf_ipv6_src_set
    __swig_getmethods__["act_setf_ipv6_src"] = _mul_nbapi.ofp_act_parsers_act_setf_ipv6_src_get
    if _newclass:act_setf_ipv6_src = _swig_property(_mul_nbapi.ofp_act_parsers_act_setf_ipv6_src_get, _mul_nbapi.ofp_act_parsers_act_setf_ipv6_src_set)
    __swig_setmethods__["act_setf_ipv6_dst"] = _mul_nbapi.ofp_act_parsers_act_setf_ipv6_dst_set
    __swig_getmethods__["act_setf_ipv6_dst"] = _mul_nbapi.ofp_act_parsers_act_setf_ipv6_dst_get
    if _newclass:act_setf_ipv6_dst = _swig_property(_mul_nbapi.ofp_act_parsers_act_setf_ipv6_dst_get, _mul_nbapi.ofp_act_parsers_act_setf_ipv6_dst_set)
    __swig_setmethods__["act_setf_ipv4_dscp"] = _mul_nbapi.ofp_act_parsers_act_setf_ipv4_dscp_set
    __swig_getmethods__["act_setf_ipv4_dscp"] = _mul_nbapi.ofp_act_parsers_act_setf_ipv4_dscp_get
    if _newclass:act_setf_ipv4_dscp = _swig_property(_mul_nbapi.ofp_act_parsers_act_setf_ipv4_dscp_get, _mul_nbapi.ofp_act_parsers_act_setf_ipv4_dscp_set)
    __swig_setmethods__["act_setf_tcp_src"] = _mul_nbapi.ofp_act_parsers_act_setf_tcp_src_set
    __swig_getmethods__["act_setf_tcp_src"] = _mul_nbapi.ofp_act_parsers_act_setf_tcp_src_get
    if _newclass:act_setf_tcp_src = _swig_property(_mul_nbapi.ofp_act_parsers_act_setf_tcp_src_get, _mul_nbapi.ofp_act_parsers_act_setf_tcp_src_set)
    __swig_setmethods__["act_setf_tcp_dst"] = _mul_nbapi.ofp_act_parsers_act_setf_tcp_dst_set
    __swig_getmethods__["act_setf_tcp_dst"] = _mul_nbapi.ofp_act_parsers_act_setf_tcp_dst_get
    if _newclass:act_setf_tcp_dst = _swig_property(_mul_nbapi.ofp_act_parsers_act_setf_tcp_dst_get, _mul_nbapi.ofp_act_parsers_act_setf_tcp_dst_set)
    __swig_setmethods__["act_setf_udp_dst"] = _mul_nbapi.ofp_act_parsers_act_setf_udp_dst_set
    __swig_getmethods__["act_setf_udp_dst"] = _mul_nbapi.ofp_act_parsers_act_setf_udp_dst_get
    if _newclass:act_setf_udp_dst = _swig_property(_mul_nbapi.ofp_act_parsers_act_setf_udp_dst_get, _mul_nbapi.ofp_act_parsers_act_setf_udp_dst_set)
    __swig_setmethods__["act_setf_udp_src"] = _mul_nbapi.ofp_act_parsers_act_setf_udp_src_set
    __swig_getmethods__["act_setf_udp_src"] = _mul_nbapi.ofp_act_parsers_act_setf_udp_src_get
    if _newclass:act_setf_udp_src = _swig_property(_mul_nbapi.ofp_act_parsers_act_setf_udp_src_get, _mul_nbapi.ofp_act_parsers_act_setf_udp_src_set)
    __swig_setmethods__["act_setf_tunnel"] = _mul_nbapi.ofp_act_parsers_act_setf_tunnel_set
    __swig_getmethods__["act_setf_tunnel"] = _mul_nbapi.ofp_act_parsers_act_setf_tunnel_get
    if _newclass:act_setf_tunnel = _swig_property(_mul_nbapi.ofp_act_parsers_act_setf_tunnel_get, _mul_nbapi.ofp_act_parsers_act_setf_tunnel_set)
    __swig_setmethods__["act_cp_ttl_out"] = _mul_nbapi.ofp_act_parsers_act_cp_ttl_out_set
    __swig_getmethods__["act_cp_ttl_out"] = _mul_nbapi.ofp_act_parsers_act_cp_ttl_out_get
    if _newclass:act_cp_ttl_out = _swig_property(_mul_nbapi.ofp_act_parsers_act_cp_ttl_out_get, _mul_nbapi.ofp_act_parsers_act_cp_ttl_out_set)
    __swig_setmethods__["act_cp_ttl_in"] = _mul_nbapi.ofp_act_parsers_act_cp_ttl_in_set
    __swig_getmethods__["act_cp_ttl_in"] = _mul_nbapi.ofp_act_parsers_act_cp_ttl_in_get
    if _newclass:act_cp_ttl_in = _swig_property(_mul_nbapi.ofp_act_parsers_act_cp_ttl_in_get, _mul_nbapi.ofp_act_parsers_act_cp_ttl_in_set)
    __swig_setmethods__["act_exp"] = _mul_nbapi.ofp_act_parsers_act_exp_set
    __swig_getmethods__["act_exp"] = _mul_nbapi.ofp_act_parsers_act_exp_get
    if _newclass:act_exp = _swig_property(_mul_nbapi.ofp_act_parsers_act_exp_get, _mul_nbapi.ofp_act_parsers_act_exp_set)
    def __init__(self): 
        this = _mul_nbapi.new_ofp_act_parsers()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_ofp_act_parsers
    __del__ = lambda self : None;
ofp_act_parsers_swigregister = _mul_nbapi.ofp_act_parsers_swigregister
ofp_act_parsers_swigregister(ofp_act_parsers)

class ofp_inst_parsers(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofp_inst_parsers, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofp_inst_parsers, name)
    __repr__ = _swig_repr
    __swig_setmethods__["prep_inst_parser"] = _mul_nbapi.ofp_inst_parsers_prep_inst_parser_set
    __swig_getmethods__["prep_inst_parser"] = _mul_nbapi.ofp_inst_parsers_prep_inst_parser_get
    if _newclass:prep_inst_parser = _swig_property(_mul_nbapi.ofp_inst_parsers_prep_inst_parser_get, _mul_nbapi.ofp_inst_parsers_prep_inst_parser_set)
    __swig_setmethods__["pre_proc"] = _mul_nbapi.ofp_inst_parsers_pre_proc_set
    __swig_getmethods__["pre_proc"] = _mul_nbapi.ofp_inst_parsers_pre_proc_get
    if _newclass:pre_proc = _swig_property(_mul_nbapi.ofp_inst_parsers_pre_proc_get, _mul_nbapi.ofp_inst_parsers_pre_proc_set)
    __swig_setmethods__["post_proc"] = _mul_nbapi.ofp_inst_parsers_post_proc_set
    __swig_getmethods__["post_proc"] = _mul_nbapi.ofp_inst_parsers_post_proc_get
    if _newclass:post_proc = _swig_property(_mul_nbapi.ofp_inst_parsers_post_proc_get, _mul_nbapi.ofp_inst_parsers_post_proc_set)
    __swig_setmethods__["no_inst"] = _mul_nbapi.ofp_inst_parsers_no_inst_set
    __swig_getmethods__["no_inst"] = _mul_nbapi.ofp_inst_parsers_no_inst_get
    if _newclass:no_inst = _swig_property(_mul_nbapi.ofp_inst_parsers_no_inst_get, _mul_nbapi.ofp_inst_parsers_no_inst_set)
    __swig_setmethods__["goto_inst"] = _mul_nbapi.ofp_inst_parsers_goto_inst_set
    __swig_getmethods__["goto_inst"] = _mul_nbapi.ofp_inst_parsers_goto_inst_get
    if _newclass:goto_inst = _swig_property(_mul_nbapi.ofp_inst_parsers_goto_inst_get, _mul_nbapi.ofp_inst_parsers_goto_inst_set)
    __swig_setmethods__["wr_meta_inst"] = _mul_nbapi.ofp_inst_parsers_wr_meta_inst_set
    __swig_getmethods__["wr_meta_inst"] = _mul_nbapi.ofp_inst_parsers_wr_meta_inst_get
    if _newclass:wr_meta_inst = _swig_property(_mul_nbapi.ofp_inst_parsers_wr_meta_inst_get, _mul_nbapi.ofp_inst_parsers_wr_meta_inst_set)
    __swig_setmethods__["wr_act_inst"] = _mul_nbapi.ofp_inst_parsers_wr_act_inst_set
    __swig_getmethods__["wr_act_inst"] = _mul_nbapi.ofp_inst_parsers_wr_act_inst_get
    if _newclass:wr_act_inst = _swig_property(_mul_nbapi.ofp_inst_parsers_wr_act_inst_get, _mul_nbapi.ofp_inst_parsers_wr_act_inst_set)
    __swig_setmethods__["apply_act_inst"] = _mul_nbapi.ofp_inst_parsers_apply_act_inst_set
    __swig_getmethods__["apply_act_inst"] = _mul_nbapi.ofp_inst_parsers_apply_act_inst_get
    if _newclass:apply_act_inst = _swig_property(_mul_nbapi.ofp_inst_parsers_apply_act_inst_get, _mul_nbapi.ofp_inst_parsers_apply_act_inst_set)
    __swig_setmethods__["clear_act_inst"] = _mul_nbapi.ofp_inst_parsers_clear_act_inst_set
    __swig_getmethods__["clear_act_inst"] = _mul_nbapi.ofp_inst_parsers_clear_act_inst_get
    if _newclass:clear_act_inst = _swig_property(_mul_nbapi.ofp_inst_parsers_clear_act_inst_get, _mul_nbapi.ofp_inst_parsers_clear_act_inst_set)
    __swig_setmethods__["meter_inst"] = _mul_nbapi.ofp_inst_parsers_meter_inst_set
    __swig_getmethods__["meter_inst"] = _mul_nbapi.ofp_inst_parsers_meter_inst_get
    if _newclass:meter_inst = _swig_property(_mul_nbapi.ofp_inst_parsers_meter_inst_get, _mul_nbapi.ofp_inst_parsers_meter_inst_set)
    __swig_setmethods__["exp_inst"] = _mul_nbapi.ofp_inst_parsers_exp_inst_set
    __swig_getmethods__["exp_inst"] = _mul_nbapi.ofp_inst_parsers_exp_inst_get
    if _newclass:exp_inst = _swig_property(_mul_nbapi.ofp_inst_parsers_exp_inst_get, _mul_nbapi.ofp_inst_parsers_exp_inst_set)
    __swig_setmethods__["fini_inst_parser"] = _mul_nbapi.ofp_inst_parsers_fini_inst_parser_set
    __swig_getmethods__["fini_inst_parser"] = _mul_nbapi.ofp_inst_parsers_fini_inst_parser_get
    if _newclass:fini_inst_parser = _swig_property(_mul_nbapi.ofp_inst_parsers_fini_inst_parser_get, _mul_nbapi.ofp_inst_parsers_fini_inst_parser_set)
    def __init__(self): 
        this = _mul_nbapi.new_ofp_inst_parsers()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_ofp_inst_parsers
    __del__ = lambda self : None;
ofp_inst_parsers_swigregister = _mul_nbapi.ofp_inst_parsers_swigregister
ofp_inst_parsers_swigregister(ofp_inst_parsers)

class ofp_inst_parser_arg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofp_inst_parser_arg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofp_inst_parser_arg, name)
    __repr__ = _swig_repr
    __swig_setmethods__["fl"] = _mul_nbapi.ofp_inst_parser_arg_fl_set
    __swig_getmethods__["fl"] = _mul_nbapi.ofp_inst_parser_arg_fl_get
    if _newclass:fl = _swig_property(_mul_nbapi.ofp_inst_parser_arg_fl_get, _mul_nbapi.ofp_inst_parser_arg_fl_set)
    __swig_setmethods__["mask"] = _mul_nbapi.ofp_inst_parser_arg_mask_set
    __swig_getmethods__["mask"] = _mul_nbapi.ofp_inst_parser_arg_mask_get
    if _newclass:mask = _swig_property(_mul_nbapi.ofp_inst_parser_arg_mask_get, _mul_nbapi.ofp_inst_parser_arg_mask_set)
    __swig_setmethods__["res"] = _mul_nbapi.ofp_inst_parser_arg_res_set
    __swig_getmethods__["res"] = _mul_nbapi.ofp_inst_parser_arg_res_get
    if _newclass:res = _swig_property(_mul_nbapi.ofp_inst_parser_arg_res_get, _mul_nbapi.ofp_inst_parser_arg_res_set)
    __swig_setmethods__["pbuf"] = _mul_nbapi.ofp_inst_parser_arg_pbuf_set
    __swig_getmethods__["pbuf"] = _mul_nbapi.ofp_inst_parser_arg_pbuf_get
    if _newclass:pbuf = _swig_property(_mul_nbapi.ofp_inst_parser_arg_pbuf_get, _mul_nbapi.ofp_inst_parser_arg_pbuf_set)
    __swig_setmethods__["len"] = _mul_nbapi.ofp_inst_parser_arg_len_set
    __swig_getmethods__["len"] = _mul_nbapi.ofp_inst_parser_arg_len_get
    if _newclass:len = _swig_property(_mul_nbapi.ofp_inst_parser_arg_len_get, _mul_nbapi.ofp_inst_parser_arg_len_set)
    __swig_setmethods__["u_arg"] = _mul_nbapi.ofp_inst_parser_arg_u_arg_set
    __swig_getmethods__["u_arg"] = _mul_nbapi.ofp_inst_parser_arg_u_arg_get
    if _newclass:u_arg = _swig_property(_mul_nbapi.ofp_inst_parser_arg_u_arg_get, _mul_nbapi.ofp_inst_parser_arg_u_arg_set)
    __swig_setmethods__["act_set"] = _mul_nbapi.ofp_inst_parser_arg_act_set_set
    __swig_getmethods__["act_set"] = _mul_nbapi.ofp_inst_parser_arg_act_set_get
    if _newclass:act_set = _swig_property(_mul_nbapi.ofp_inst_parser_arg_act_set_get, _mul_nbapi.ofp_inst_parser_arg_act_set_set)
    __swig_setmethods__["inst_wr"] = _mul_nbapi.ofp_inst_parser_arg_inst_wr_set
    __swig_getmethods__["inst_wr"] = _mul_nbapi.ofp_inst_parser_arg_inst_wr_get
    if _newclass:inst_wr = _swig_property(_mul_nbapi.ofp_inst_parser_arg_inst_wr_get, _mul_nbapi.ofp_inst_parser_arg_inst_wr_set)
    __swig_setmethods__["inst_app"] = _mul_nbapi.ofp_inst_parser_arg_inst_app_set
    __swig_getmethods__["inst_app"] = _mul_nbapi.ofp_inst_parser_arg_inst_app_get
    if _newclass:inst_app = _swig_property(_mul_nbapi.ofp_inst_parser_arg_inst_app_get, _mul_nbapi.ofp_inst_parser_arg_inst_app_set)
    __swig_setmethods__["inst_goto"] = _mul_nbapi.ofp_inst_parser_arg_inst_goto_set
    __swig_getmethods__["inst_goto"] = _mul_nbapi.ofp_inst_parser_arg_inst_goto_get
    if _newclass:inst_goto = _swig_property(_mul_nbapi.ofp_inst_parser_arg_inst_goto_get, _mul_nbapi.ofp_inst_parser_arg_inst_goto_set)
    __swig_setmethods__["inst_meter"] = _mul_nbapi.ofp_inst_parser_arg_inst_meter_set
    __swig_getmethods__["inst_meter"] = _mul_nbapi.ofp_inst_parser_arg_inst_meter_get
    if _newclass:inst_meter = _swig_property(_mul_nbapi.ofp_inst_parser_arg_inst_meter_get, _mul_nbapi.ofp_inst_parser_arg_inst_meter_set)
    __swig_setmethods__["inst_clear"] = _mul_nbapi.ofp_inst_parser_arg_inst_clear_set
    __swig_getmethods__["inst_clear"] = _mul_nbapi.ofp_inst_parser_arg_inst_clear_get
    if _newclass:inst_clear = _swig_property(_mul_nbapi.ofp_inst_parser_arg_inst_clear_get, _mul_nbapi.ofp_inst_parser_arg_inst_clear_set)
    __swig_setmethods__["inst_wr_meta"] = _mul_nbapi.ofp_inst_parser_arg_inst_wr_meta_set
    __swig_getmethods__["inst_wr_meta"] = _mul_nbapi.ofp_inst_parser_arg_inst_wr_meta_get
    if _newclass:inst_wr_meta = _swig_property(_mul_nbapi.ofp_inst_parser_arg_inst_wr_meta_get, _mul_nbapi.ofp_inst_parser_arg_inst_wr_meta_set)
    __swig_setmethods__["mod_fl_flag"] = _mul_nbapi.ofp_inst_parser_arg_mod_fl_flag_set
    __swig_getmethods__["mod_fl_flag"] = _mul_nbapi.ofp_inst_parser_arg_mod_fl_flag_get
    if _newclass:mod_fl_flag = _swig_property(_mul_nbapi.ofp_inst_parser_arg_mod_fl_flag_get, _mul_nbapi.ofp_inst_parser_arg_mod_fl_flag_set)
    __swig_setmethods__["push_mpls"] = _mul_nbapi.ofp_inst_parser_arg_push_mpls_set
    __swig_getmethods__["push_mpls"] = _mul_nbapi.ofp_inst_parser_arg_push_mpls_get
    if _newclass:push_mpls = _swig_property(_mul_nbapi.ofp_inst_parser_arg_push_mpls_get, _mul_nbapi.ofp_inst_parser_arg_push_mpls_set)
    __swig_setmethods__["push_vlan"] = _mul_nbapi.ofp_inst_parser_arg_push_vlan_set
    __swig_getmethods__["push_vlan"] = _mul_nbapi.ofp_inst_parser_arg_push_vlan_get
    if _newclass:push_vlan = _swig_property(_mul_nbapi.ofp_inst_parser_arg_push_vlan_get, _mul_nbapi.ofp_inst_parser_arg_push_vlan_set)
    __swig_setmethods__["push_pbb"] = _mul_nbapi.ofp_inst_parser_arg_push_pbb_set
    __swig_getmethods__["push_pbb"] = _mul_nbapi.ofp_inst_parser_arg_push_pbb_get
    if _newclass:push_pbb = _swig_property(_mul_nbapi.ofp_inst_parser_arg_push_pbb_get, _mul_nbapi.ofp_inst_parser_arg_push_pbb_set)
    __swig_setmethods__["parsers"] = _mul_nbapi.ofp_inst_parser_arg_parsers_set
    __swig_getmethods__["parsers"] = _mul_nbapi.ofp_inst_parser_arg_parsers_get
    if _newclass:parsers = _swig_property(_mul_nbapi.ofp_inst_parser_arg_parsers_get, _mul_nbapi.ofp_inst_parser_arg_parsers_set)
    __swig_setmethods__["act_parsers"] = _mul_nbapi.ofp_inst_parser_arg_act_parsers_set
    __swig_getmethods__["act_parsers"] = _mul_nbapi.ofp_inst_parser_arg_act_parsers_get
    if _newclass:act_parsers = _swig_property(_mul_nbapi.ofp_inst_parser_arg_act_parsers_get, _mul_nbapi.ofp_inst_parser_arg_act_parsers_set)
    def __init__(self): 
        this = _mul_nbapi.new_ofp_inst_parser_arg()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_ofp_inst_parser_arg
    __del__ = lambda self : None;
ofp_inst_parser_arg_swigregister = _mul_nbapi.ofp_inst_parser_arg_swigregister
ofp_inst_parser_arg_swigregister(ofp_inst_parser_arg)

class ofp_inst_check_args(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofp_inst_check_args, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofp_inst_check_args, name)
    __repr__ = _swig_repr
    __swig_setmethods__["fl"] = _mul_nbapi.ofp_inst_check_args_fl_set
    __swig_getmethods__["fl"] = _mul_nbapi.ofp_inst_check_args_fl_get
    if _newclass:fl = _swig_property(_mul_nbapi.ofp_inst_check_args_fl_get, _mul_nbapi.ofp_inst_check_args_fl_set)
    __swig_setmethods__["sw_ctx"] = _mul_nbapi.ofp_inst_check_args_sw_ctx_set
    __swig_getmethods__["sw_ctx"] = _mul_nbapi.ofp_inst_check_args_sw_ctx_get
    if _newclass:sw_ctx = _swig_property(_mul_nbapi.ofp_inst_check_args_sw_ctx_get, _mul_nbapi.ofp_inst_check_args_sw_ctx_set)
    __swig_setmethods__["group_act_check"] = _mul_nbapi.ofp_inst_check_args_group_act_check_set
    __swig_getmethods__["group_act_check"] = _mul_nbapi.ofp_inst_check_args_group_act_check_get
    if _newclass:group_act_check = _swig_property(_mul_nbapi.ofp_inst_check_args_group_act_check_get, _mul_nbapi.ofp_inst_check_args_group_act_check_set)
    __swig_setmethods__["tbl_prop"] = _mul_nbapi.ofp_inst_check_args_tbl_prop_set
    __swig_getmethods__["tbl_prop"] = _mul_nbapi.ofp_inst_check_args_tbl_prop_get
    if _newclass:tbl_prop = _swig_property(_mul_nbapi.ofp_inst_check_args_tbl_prop_get, _mul_nbapi.ofp_inst_check_args_tbl_prop_set)
    __swig_setmethods__["grp_prop"] = _mul_nbapi.ofp_inst_check_args_grp_prop_set
    __swig_getmethods__["grp_prop"] = _mul_nbapi.ofp_inst_check_args_grp_prop_get
    if _newclass:grp_prop = _swig_property(_mul_nbapi.ofp_inst_check_args_grp_prop_get, _mul_nbapi.ofp_inst_check_args_grp_prop_set)
    __swig_setmethods__["check_setf_supp"] = _mul_nbapi.ofp_inst_check_args_check_setf_supp_set
    __swig_getmethods__["check_setf_supp"] = _mul_nbapi.ofp_inst_check_args_check_setf_supp_get
    if _newclass:check_setf_supp = _swig_property(_mul_nbapi.ofp_inst_check_args_check_setf_supp_get, _mul_nbapi.ofp_inst_check_args_check_setf_supp_set)
    __swig_setmethods__["inst_local"] = _mul_nbapi.ofp_inst_check_args_inst_local_set
    __swig_getmethods__["inst_local"] = _mul_nbapi.ofp_inst_check_args_inst_local_get
    if _newclass:inst_local = _swig_property(_mul_nbapi.ofp_inst_check_args_inst_local_get, _mul_nbapi.ofp_inst_check_args_inst_local_set)
    __swig_setmethods__["grp_list"] = _mul_nbapi.ofp_inst_check_args_grp_list_set
    __swig_getmethods__["grp_list"] = _mul_nbapi.ofp_inst_check_args_grp_list_get
    if _newclass:grp_list = _swig_property(_mul_nbapi.ofp_inst_check_args_grp_list_get, _mul_nbapi.ofp_inst_check_args_grp_list_set)
    __swig_setmethods__["meter_list"] = _mul_nbapi.ofp_inst_check_args_meter_list_set
    __swig_getmethods__["meter_list"] = _mul_nbapi.ofp_inst_check_args_meter_list_get
    if _newclass:meter_list = _swig_property(_mul_nbapi.ofp_inst_check_args_meter_list_get, _mul_nbapi.ofp_inst_check_args_meter_list_set)
    __swig_setmethods__["out_port"] = _mul_nbapi.ofp_inst_check_args_out_port_set
    __swig_getmethods__["out_port"] = _mul_nbapi.ofp_inst_check_args_out_port_get
    if _newclass:out_port = _swig_property(_mul_nbapi.ofp_inst_check_args_out_port_get, _mul_nbapi.ofp_inst_check_args_out_port_set)
    __swig_setmethods__["group_id"] = _mul_nbapi.ofp_inst_check_args_group_id_set
    __swig_getmethods__["group_id"] = _mul_nbapi.ofp_inst_check_args_group_id_get
    if _newclass:group_id = _swig_property(_mul_nbapi.ofp_inst_check_args_group_id_get, _mul_nbapi.ofp_inst_check_args_group_id_set)
    __swig_setmethods__["check_port"] = _mul_nbapi.ofp_inst_check_args_check_port_set
    __swig_getmethods__["check_port"] = _mul_nbapi.ofp_inst_check_args_check_port_get
    if _newclass:check_port = _swig_property(_mul_nbapi.ofp_inst_check_args_check_port_get, _mul_nbapi.ofp_inst_check_args_check_port_set)
    __swig_setmethods__["check_add_meter"] = _mul_nbapi.ofp_inst_check_args_check_add_meter_set
    __swig_getmethods__["check_add_meter"] = _mul_nbapi.ofp_inst_check_args_check_add_meter_get
    if _newclass:check_add_meter = _swig_property(_mul_nbapi.ofp_inst_check_args_check_add_meter_get, _mul_nbapi.ofp_inst_check_args_check_add_meter_set)
    __swig_setmethods__["check_add_group"] = _mul_nbapi.ofp_inst_check_args_check_add_group_set
    __swig_getmethods__["check_add_group"] = _mul_nbapi.ofp_inst_check_args_check_add_group_get
    if _newclass:check_add_group = _swig_property(_mul_nbapi.ofp_inst_check_args_check_add_group_get, _mul_nbapi.ofp_inst_check_args_check_add_group_set)
    __swig_setmethods__["get_v2p_tbl"] = _mul_nbapi.ofp_inst_check_args_get_v2p_tbl_set
    __swig_getmethods__["get_v2p_tbl"] = _mul_nbapi.ofp_inst_check_args_get_v2p_tbl_get
    if _newclass:get_v2p_tbl = _swig_property(_mul_nbapi.ofp_inst_check_args_get_v2p_tbl_get, _mul_nbapi.ofp_inst_check_args_get_v2p_tbl_set)
    def __init__(self): 
        this = _mul_nbapi.new_ofp_inst_check_args()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_ofp_inst_check_args
    __del__ = lambda self : None;
ofp_inst_check_args_swigregister = _mul_nbapi.ofp_inst_check_args_swigregister
ofp_inst_check_args_swigregister(ofp_inst_check_args)

class ofpx_oxm_parser_arg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofpx_oxm_parser_arg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofpx_oxm_parser_arg, name)
    __repr__ = _swig_repr
    __swig_setmethods__["flow"] = _mul_nbapi.ofpx_oxm_parser_arg_flow_set
    __swig_getmethods__["flow"] = _mul_nbapi.ofpx_oxm_parser_arg_flow_get
    if _newclass:flow = _swig_property(_mul_nbapi.ofpx_oxm_parser_arg_flow_get, _mul_nbapi.ofpx_oxm_parser_arg_flow_set)
    __swig_setmethods__["mask"] = _mul_nbapi.ofpx_oxm_parser_arg_mask_set
    __swig_getmethods__["mask"] = _mul_nbapi.ofpx_oxm_parser_arg_mask_get
    if _newclass:mask = _swig_property(_mul_nbapi.ofpx_oxm_parser_arg_mask_get, _mul_nbapi.ofpx_oxm_parser_arg_mask_set)
    def __init__(self): 
        this = _mul_nbapi.new_ofpx_oxm_parser_arg()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_ofpx_oxm_parser_arg
    __del__ = lambda self : None;
ofpx_oxm_parser_arg_swigregister = _mul_nbapi.ofpx_oxm_parser_arg_swigregister
ofpx_oxm_parser_arg_swigregister(ofpx_oxm_parser_arg)

class of_act_vec_elem(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, of_act_vec_elem, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, of_act_vec_elem, name)
    __repr__ = _swig_repr
    __swig_setmethods__["weight"] = _mul_nbapi.of_act_vec_elem_weight_set
    __swig_getmethods__["weight"] = _mul_nbapi.of_act_vec_elem_weight_get
    if _newclass:weight = _swig_property(_mul_nbapi.of_act_vec_elem_weight_get, _mul_nbapi.of_act_vec_elem_weight_set)
    __swig_setmethods__["ff_port"] = _mul_nbapi.of_act_vec_elem_ff_port_set
    __swig_getmethods__["ff_port"] = _mul_nbapi.of_act_vec_elem_ff_port_get
    if _newclass:ff_port = _swig_property(_mul_nbapi.of_act_vec_elem_ff_port_get, _mul_nbapi.of_act_vec_elem_ff_port_set)
    __swig_setmethods__["ff_group"] = _mul_nbapi.of_act_vec_elem_ff_group_set
    __swig_getmethods__["ff_group"] = _mul_nbapi.of_act_vec_elem_ff_group_get
    if _newclass:ff_group = _swig_property(_mul_nbapi.of_act_vec_elem_ff_group_get, _mul_nbapi.of_act_vec_elem_ff_group_set)
    __swig_setmethods__["actions"] = _mul_nbapi.of_act_vec_elem_actions_set
    __swig_getmethods__["actions"] = _mul_nbapi.of_act_vec_elem_actions_get
    if _newclass:actions = _swig_property(_mul_nbapi.of_act_vec_elem_actions_get, _mul_nbapi.of_act_vec_elem_actions_set)
    __swig_setmethods__["action_len"] = _mul_nbapi.of_act_vec_elem_action_len_set
    __swig_getmethods__["action_len"] = _mul_nbapi.of_act_vec_elem_action_len_get
    if _newclass:action_len = _swig_property(_mul_nbapi.of_act_vec_elem_action_len_get, _mul_nbapi.of_act_vec_elem_action_len_set)
    def __init__(self): 
        this = _mul_nbapi.new_of_act_vec_elem()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_of_act_vec_elem
    __del__ = lambda self : None;
of_act_vec_elem_swigregister = _mul_nbapi.of_act_vec_elem_swigregister
of_act_vec_elem_swigregister(of_act_vec_elem)

class of_meter_band_elem(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, of_meter_band_elem, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, of_meter_band_elem, name)
    __repr__ = _swig_repr
    __swig_setmethods__["band"] = _mul_nbapi.of_meter_band_elem_band_set
    __swig_getmethods__["band"] = _mul_nbapi.of_meter_band_elem_band_get
    if _newclass:band = _swig_property(_mul_nbapi.of_meter_band_elem_band_get, _mul_nbapi.of_meter_band_elem_band_set)
    __swig_setmethods__["band_len"] = _mul_nbapi.of_meter_band_elem_band_len_set
    __swig_getmethods__["band_len"] = _mul_nbapi.of_meter_band_elem_band_len_get
    if _newclass:band_len = _swig_property(_mul_nbapi.of_meter_band_elem_band_len_get, _mul_nbapi.of_meter_band_elem_band_len_set)
    def __init__(self): 
        this = _mul_nbapi.new_of_meter_band_elem()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_of_meter_band_elem
    __del__ = lambda self : None;
of_meter_band_elem_swigregister = _mul_nbapi.of_meter_band_elem_swigregister
of_meter_band_elem_swigregister(of_meter_band_elem)

class of_meter_band_parms(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, of_meter_band_parms, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, of_meter_band_parms, name)
    __repr__ = _swig_repr
    __swig_setmethods__["rate"] = _mul_nbapi.of_meter_band_parms_rate_set
    __swig_getmethods__["rate"] = _mul_nbapi.of_meter_band_parms_rate_get
    if _newclass:rate = _swig_property(_mul_nbapi.of_meter_band_parms_rate_get, _mul_nbapi.of_meter_band_parms_rate_set)
    __swig_setmethods__["burst_size"] = _mul_nbapi.of_meter_band_parms_burst_size_set
    __swig_getmethods__["burst_size"] = _mul_nbapi.of_meter_band_parms_burst_size_get
    if _newclass:burst_size = _swig_property(_mul_nbapi.of_meter_band_parms_burst_size_get, _mul_nbapi.of_meter_band_parms_burst_size_set)
    __swig_setmethods__["prec_level"] = _mul_nbapi.of_meter_band_parms_prec_level_set
    __swig_getmethods__["prec_level"] = _mul_nbapi.of_meter_band_parms_prec_level_get
    if _newclass:prec_level = _swig_property(_mul_nbapi.of_meter_band_parms_prec_level_get, _mul_nbapi.of_meter_band_parms_prec_level_set)
    def __init__(self): 
        this = _mul_nbapi.new_of_meter_band_parms()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_of_meter_band_parms
    __del__ = lambda self : None;
of_meter_band_parms_swigregister = _mul_nbapi.of_meter_band_parms_swigregister
of_meter_band_parms_swigregister(of_meter_band_parms)

class mul_act_mdata(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, mul_act_mdata, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, mul_act_mdata, name)
    __repr__ = _swig_repr
    __swig_setmethods__["act_base"] = _mul_nbapi.mul_act_mdata_act_base_set
    __swig_getmethods__["act_base"] = _mul_nbapi.mul_act_mdata_act_base_get
    if _newclass:act_base = _swig_property(_mul_nbapi.mul_act_mdata_act_base_get, _mul_nbapi.mul_act_mdata_act_base_set)
    __swig_setmethods__["act_wr_ptr"] = _mul_nbapi.mul_act_mdata_act_wr_ptr_set
    __swig_getmethods__["act_wr_ptr"] = _mul_nbapi.mul_act_mdata_act_wr_ptr_get
    if _newclass:act_wr_ptr = _swig_property(_mul_nbapi.mul_act_mdata_act_wr_ptr_get, _mul_nbapi.mul_act_mdata_act_wr_ptr_set)
    __swig_setmethods__["act_inst_wr_ptr"] = _mul_nbapi.mul_act_mdata_act_inst_wr_ptr_set
    __swig_getmethods__["act_inst_wr_ptr"] = _mul_nbapi.mul_act_mdata_act_inst_wr_ptr_get
    if _newclass:act_inst_wr_ptr = _swig_property(_mul_nbapi.mul_act_mdata_act_inst_wr_ptr_get, _mul_nbapi.mul_act_mdata_act_inst_wr_ptr_set)
    __swig_setmethods__["act_inst_app_ptr"] = _mul_nbapi.mul_act_mdata_act_inst_app_ptr_set
    __swig_getmethods__["act_inst_app_ptr"] = _mul_nbapi.mul_act_mdata_act_inst_app_ptr_get
    if _newclass:act_inst_app_ptr = _swig_property(_mul_nbapi.mul_act_mdata_act_inst_app_ptr_get, _mul_nbapi.mul_act_mdata_act_inst_app_ptr_set)
    __swig_setmethods__["n_wracts"] = _mul_nbapi.mul_act_mdata_n_wracts_set
    __swig_getmethods__["n_wracts"] = _mul_nbapi.mul_act_mdata_n_wracts_get
    if _newclass:n_wracts = _swig_property(_mul_nbapi.mul_act_mdata_n_wracts_get, _mul_nbapi.mul_act_mdata_n_wracts_set)
    __swig_setmethods__["n_appacts"] = _mul_nbapi.mul_act_mdata_n_appacts_set
    __swig_getmethods__["n_appacts"] = _mul_nbapi.mul_act_mdata_n_appacts_get
    if _newclass:n_appacts = _swig_property(_mul_nbapi.mul_act_mdata_n_appacts_get, _mul_nbapi.mul_act_mdata_n_appacts_set)
    __swig_setmethods__["n_clracts"] = _mul_nbapi.mul_act_mdata_n_clracts_set
    __swig_getmethods__["n_clracts"] = _mul_nbapi.mul_act_mdata_n_clracts_get
    if _newclass:n_clracts = _swig_property(_mul_nbapi.mul_act_mdata_n_clracts_get, _mul_nbapi.mul_act_mdata_n_clracts_set)
    __swig_setmethods__["buf_len"] = _mul_nbapi.mul_act_mdata_buf_len_set
    __swig_getmethods__["buf_len"] = _mul_nbapi.mul_act_mdata_buf_len_get
    if _newclass:buf_len = _swig_property(_mul_nbapi.mul_act_mdata_buf_len_get, _mul_nbapi.mul_act_mdata_buf_len_set)
    __swig_setmethods__["only_acts"] = _mul_nbapi.mul_act_mdata_only_acts_set
    __swig_getmethods__["only_acts"] = _mul_nbapi.mul_act_mdata_only_acts_get
    if _newclass:only_acts = _swig_property(_mul_nbapi.mul_act_mdata_only_acts_get, _mul_nbapi.mul_act_mdata_only_acts_set)
    __swig_setmethods__["act_inst_type"] = _mul_nbapi.mul_act_mdata_act_inst_type_set
    __swig_getmethods__["act_inst_type"] = _mul_nbapi.mul_act_mdata_act_inst_type_get
    if _newclass:act_inst_type = _swig_property(_mul_nbapi.mul_act_mdata_act_inst_type_get, _mul_nbapi.mul_act_mdata_act_inst_type_set)
    __swig_setmethods__["inst_bm"] = _mul_nbapi.mul_act_mdata_inst_bm_set
    __swig_getmethods__["inst_bm"] = _mul_nbapi.mul_act_mdata_inst_bm_get
    if _newclass:inst_bm = _swig_property(_mul_nbapi.mul_act_mdata_inst_bm_get, _mul_nbapi.mul_act_mdata_inst_bm_set)
    __swig_setmethods__["act_bm"] = _mul_nbapi.mul_act_mdata_act_bm_set
    __swig_getmethods__["act_bm"] = _mul_nbapi.mul_act_mdata_act_bm_get
    if _newclass:act_bm = _swig_property(_mul_nbapi.mul_act_mdata_act_bm_get, _mul_nbapi.mul_act_mdata_act_bm_set)
    __swig_setmethods__["setf_bm"] = _mul_nbapi.mul_act_mdata_setf_bm_set
    __swig_getmethods__["setf_bm"] = _mul_nbapi.mul_act_mdata_setf_bm_get
    if _newclass:setf_bm = _swig_property(_mul_nbapi.mul_act_mdata_setf_bm_get, _mul_nbapi.mul_act_mdata_setf_bm_set)
    __swig_setmethods__["ofp_ctors"] = _mul_nbapi.mul_act_mdata_ofp_ctors_set
    __swig_getmethods__["ofp_ctors"] = _mul_nbapi.mul_act_mdata_ofp_ctors_get
    if _newclass:ofp_ctors = _swig_property(_mul_nbapi.mul_act_mdata_ofp_ctors_get, _mul_nbapi.mul_act_mdata_ofp_ctors_set)
    def __init__(self): 
        this = _mul_nbapi.new_mul_act_mdata()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_mul_act_mdata
    __del__ = lambda self : None;
mul_act_mdata_swigregister = _mul_nbapi.mul_act_mdata_swigregister
mul_act_mdata_swigregister(mul_act_mdata)
MUL_ACT_BUF_SZ = _mul_nbapi.MUL_ACT_BUF_SZ


def of_mact_mdata_reset(*args):
  return _mul_nbapi.of_mact_mdata_reset(*args)
of_mact_mdata_reset = _mul_nbapi.of_mact_mdata_reset

def of_mact_mdata_init(*args):
  return _mul_nbapi.of_mact_mdata_init(*args)
of_mact_mdata_init = _mul_nbapi.of_mact_mdata_init

def of_mact_mdata_reset_act_wr_inst(*args):
  return _mul_nbapi.of_mact_mdata_reset_act_wr_inst(*args)
of_mact_mdata_reset_act_wr_inst = _mul_nbapi.of_mact_mdata_reset_act_wr_inst

def of_mact_buf_room(*args):
  return _mul_nbapi.of_mact_buf_room(*args)
of_mact_buf_room = _mul_nbapi.of_mact_buf_room

def of_mact_len(*args):
  return _mul_nbapi.of_mact_len(*args)
of_mact_len = _mul_nbapi.of_mact_len

def of_mact_inst_act_len(*args):
  return _mul_nbapi.of_mact_inst_act_len(*args)
of_mact_inst_act_len = _mul_nbapi.of_mact_inst_act_len

def of_mask_is_dc_all(*args):
  return _mul_nbapi.of_mask_is_dc_all(*args)
of_mask_is_dc_all = _mul_nbapi.of_mask_is_dc_all

def of_mask_set_dc_all(*args):
  return _mul_nbapi.of_mask_set_dc_all(*args)
of_mask_set_dc_all = _mul_nbapi.of_mask_set_dc_all

def of_mask_set_no_dc(*args):
  return _mul_nbapi.of_mask_set_no_dc(*args)
of_mask_set_no_dc = _mul_nbapi.of_mask_set_no_dc

def of_mask_set_dl_dst(*args):
  return _mul_nbapi.of_mask_set_dl_dst(*args)
of_mask_set_dl_dst = _mul_nbapi.of_mask_set_dl_dst

def of_mask_clr_dl_dst(*args):
  return _mul_nbapi.of_mask_clr_dl_dst(*args)
of_mask_clr_dl_dst = _mul_nbapi.of_mask_clr_dl_dst

def of_mask_set_dl_src(*args):
  return _mul_nbapi.of_mask_set_dl_src(*args)
of_mask_set_dl_src = _mul_nbapi.of_mask_set_dl_src

def of_mask_set_dl_vlan_pcp(*args):
  return _mul_nbapi.of_mask_set_dl_vlan_pcp(*args)
of_mask_set_dl_vlan_pcp = _mul_nbapi.of_mask_set_dl_vlan_pcp

def of_mask_set_nw_tos(*args):
  return _mul_nbapi.of_mask_set_nw_tos(*args)
of_mask_set_nw_tos = _mul_nbapi.of_mask_set_nw_tos

def of_mask_clr_dl_src(*args):
  return _mul_nbapi.of_mask_clr_dl_src(*args)
of_mask_clr_dl_src = _mul_nbapi.of_mask_clr_dl_src

def of_mask_set_nw_src(*args):
  return _mul_nbapi.of_mask_set_nw_src(*args)
of_mask_set_nw_src = _mul_nbapi.of_mask_set_nw_src

def of_mask_clr_nw_src(*args):
  return _mul_nbapi.of_mask_clr_nw_src(*args)
of_mask_clr_nw_src = _mul_nbapi.of_mask_clr_nw_src

def of_mask_set_nw_dst(*args):
  return _mul_nbapi.of_mask_set_nw_dst(*args)
of_mask_set_nw_dst = _mul_nbapi.of_mask_set_nw_dst

def of_mask_set_tp_src(*args):
  return _mul_nbapi.of_mask_set_tp_src(*args)
of_mask_set_tp_src = _mul_nbapi.of_mask_set_tp_src

def of_mask_set_tp_dst(*args):
  return _mul_nbapi.of_mask_set_tp_dst(*args)
of_mask_set_tp_dst = _mul_nbapi.of_mask_set_tp_dst

def of_mask_clr_nw_dst(*args):
  return _mul_nbapi.of_mask_clr_nw_dst(*args)
of_mask_clr_nw_dst = _mul_nbapi.of_mask_clr_nw_dst

def of_mask_set_dl_type(*args):
  return _mul_nbapi.of_mask_set_dl_type(*args)
of_mask_set_dl_type = _mul_nbapi.of_mask_set_dl_type

def of_mask_clr_dl_type(*args):
  return _mul_nbapi.of_mask_clr_dl_type(*args)
of_mask_clr_dl_type = _mul_nbapi.of_mask_clr_dl_type

def of_mask_set_dl_vlan(*args):
  return _mul_nbapi.of_mask_set_dl_vlan(*args)
of_mask_set_dl_vlan = _mul_nbapi.of_mask_set_dl_vlan

def of_mask_set_dl_vlan_present(*args):
  return _mul_nbapi.of_mask_set_dl_vlan_present(*args)
of_mask_set_dl_vlan_present = _mul_nbapi.of_mask_set_dl_vlan_present

def of_mask_clr_dl_vlan(*args):
  return _mul_nbapi.of_mask_clr_dl_vlan(*args)
of_mask_clr_dl_vlan = _mul_nbapi.of_mask_clr_dl_vlan

def of_mask_has_in_port(*args):
  return _mul_nbapi.of_mask_has_in_port(*args)
of_mask_has_in_port = _mul_nbapi.of_mask_has_in_port

def of_mask_set_in_port(*args):
  return _mul_nbapi.of_mask_set_in_port(*args)
of_mask_set_in_port = _mul_nbapi.of_mask_set_in_port

def of_mask_clr_in_port(*args):
  return _mul_nbapi.of_mask_clr_in_port(*args)
of_mask_clr_in_port = _mul_nbapi.of_mask_clr_in_port

def of_mask_set_nw_proto(*args):
  return _mul_nbapi.of_mask_set_nw_proto(*args)
of_mask_set_nw_proto = _mul_nbapi.of_mask_set_nw_proto

def of_mask_clr_nw_proto(*args):
  return _mul_nbapi.of_mask_clr_nw_proto(*args)
of_mask_clr_nw_proto = _mul_nbapi.of_mask_clr_nw_proto

def of_mask_set_metadata(*args):
  return _mul_nbapi.of_mask_set_metadata(*args)
of_mask_set_metadata = _mul_nbapi.of_mask_set_metadata

def of_mask_clr_metadata(*args):
  return _mul_nbapi.of_mask_clr_metadata(*args)
of_mask_clr_metadata = _mul_nbapi.of_mask_clr_metadata

def of_mask_set_tunnel_id(*args):
  return _mul_nbapi.of_mask_set_tunnel_id(*args)
of_mask_set_tunnel_id = _mul_nbapi.of_mask_set_tunnel_id

def of_mask_clr_tunnel_id(*args):
  return _mul_nbapi.of_mask_clr_tunnel_id(*args)
of_mask_clr_tunnel_id = _mul_nbapi.of_mask_clr_tunnel_id

def of_mask_set_table_id(*args):
  return _mul_nbapi.of_mask_set_table_id(*args)
of_mask_set_table_id = _mul_nbapi.of_mask_set_table_id

def of_get_data_len(*args):
  return _mul_nbapi.of_get_data_len(*args)
of_get_data_len = _mul_nbapi.of_get_data_len

def __of_hdr_valid(*args):
  return _mul_nbapi.__of_hdr_valid(*args)
__of_hdr_valid = _mul_nbapi.__of_hdr_valid

def of_put_mpls_label_oxm(*args):
  return _mul_nbapi.of_put_mpls_label_oxm(*args)
of_put_mpls_label_oxm = _mul_nbapi.of_put_mpls_label_oxm

def of_get_mpls_label_oxm(*args):
  return _mul_nbapi.of_get_mpls_label_oxm(*args)
of_get_mpls_label_oxm = _mul_nbapi.of_get_mpls_label_oxm

def of_hdr_valid(*args):
  return _mul_nbapi.of_hdr_valid(*args)
of_hdr_valid = _mul_nbapi.of_hdr_valid
class of_flow_mod_params(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, of_flow_mod_params, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, of_flow_mod_params, name)
    __repr__ = _swig_repr
    __swig_setmethods__["app_owner"] = _mul_nbapi.of_flow_mod_params_app_owner_set
    __swig_getmethods__["app_owner"] = _mul_nbapi.of_flow_mod_params_app_owner_get
    if _newclass:app_owner = _swig_property(_mul_nbapi.of_flow_mod_params_app_owner_get, _mul_nbapi.of_flow_mod_params_app_owner_set)
    __swig_setmethods__["flow"] = _mul_nbapi.of_flow_mod_params_flow_set
    __swig_getmethods__["flow"] = _mul_nbapi.of_flow_mod_params_flow_get
    if _newclass:flow = _swig_property(_mul_nbapi.of_flow_mod_params_flow_get, _mul_nbapi.of_flow_mod_params_flow_set)
    __swig_setmethods__["mask"] = _mul_nbapi.of_flow_mod_params_mask_set
    __swig_getmethods__["mask"] = _mul_nbapi.of_flow_mod_params_mask_get
    if _newclass:mask = _swig_property(_mul_nbapi.of_flow_mod_params_mask_get, _mul_nbapi.of_flow_mod_params_mask_set)
    __swig_setmethods__["actions"] = _mul_nbapi.of_flow_mod_params_actions_set
    __swig_getmethods__["actions"] = _mul_nbapi.of_flow_mod_params_actions_get
    if _newclass:actions = _swig_property(_mul_nbapi.of_flow_mod_params_actions_get, _mul_nbapi.of_flow_mod_params_actions_set)
    __swig_setmethods__["action_len"] = _mul_nbapi.of_flow_mod_params_action_len_set
    __swig_getmethods__["action_len"] = _mul_nbapi.of_flow_mod_params_action_len_get
    if _newclass:action_len = _swig_property(_mul_nbapi.of_flow_mod_params_action_len_get, _mul_nbapi.of_flow_mod_params_action_len_set)
    __swig_setmethods__["wildcards"] = _mul_nbapi.of_flow_mod_params_wildcards_set
    __swig_getmethods__["wildcards"] = _mul_nbapi.of_flow_mod_params_wildcards_get
    if _newclass:wildcards = _swig_property(_mul_nbapi.of_flow_mod_params_wildcards_get, _mul_nbapi.of_flow_mod_params_wildcards_set)
    __swig_setmethods__["buffer_id"] = _mul_nbapi.of_flow_mod_params_buffer_id_set
    __swig_getmethods__["buffer_id"] = _mul_nbapi.of_flow_mod_params_buffer_id_get
    if _newclass:buffer_id = _swig_property(_mul_nbapi.of_flow_mod_params_buffer_id_get, _mul_nbapi.of_flow_mod_params_buffer_id_set)
    __swig_setmethods__["prio"] = _mul_nbapi.of_flow_mod_params_prio_set
    __swig_getmethods__["prio"] = _mul_nbapi.of_flow_mod_params_prio_get
    if _newclass:prio = _swig_property(_mul_nbapi.of_flow_mod_params_prio_get, _mul_nbapi.of_flow_mod_params_prio_set)
    __swig_setmethods__["itimeo"] = _mul_nbapi.of_flow_mod_params_itimeo_set
    __swig_getmethods__["itimeo"] = _mul_nbapi.of_flow_mod_params_itimeo_get
    if _newclass:itimeo = _swig_property(_mul_nbapi.of_flow_mod_params_itimeo_get, _mul_nbapi.of_flow_mod_params_itimeo_set)
    __swig_setmethods__["htimeo"] = _mul_nbapi.of_flow_mod_params_htimeo_set
    __swig_getmethods__["htimeo"] = _mul_nbapi.of_flow_mod_params_htimeo_get
    if _newclass:htimeo = _swig_property(_mul_nbapi.of_flow_mod_params_htimeo_get, _mul_nbapi.of_flow_mod_params_htimeo_set)
    __swig_setmethods__["oport"] = _mul_nbapi.of_flow_mod_params_oport_set
    __swig_getmethods__["oport"] = _mul_nbapi.of_flow_mod_params_oport_get
    if _newclass:oport = _swig_property(_mul_nbapi.of_flow_mod_params_oport_get, _mul_nbapi.of_flow_mod_params_oport_set)
    __swig_setmethods__["flags"] = _mul_nbapi.of_flow_mod_params_flags_set
    __swig_getmethods__["flags"] = _mul_nbapi.of_flow_mod_params_flags_get
    if _newclass:flags = _swig_property(_mul_nbapi.of_flow_mod_params_flags_get, _mul_nbapi.of_flow_mod_params_flags_set)
    __swig_setmethods__["reason"] = _mul_nbapi.of_flow_mod_params_reason_set
    __swig_getmethods__["reason"] = _mul_nbapi.of_flow_mod_params_reason_get
    if _newclass:reason = _swig_property(_mul_nbapi.of_flow_mod_params_reason_get, _mul_nbapi.of_flow_mod_params_reason_set)
    __swig_setmethods__["command"] = _mul_nbapi.of_flow_mod_params_command_set
    __swig_getmethods__["command"] = _mul_nbapi.of_flow_mod_params_command_get
    if _newclass:command = _swig_property(_mul_nbapi.of_flow_mod_params_command_get, _mul_nbapi.of_flow_mod_params_command_set)
    __swig_setmethods__["ogroup"] = _mul_nbapi.of_flow_mod_params_ogroup_set
    __swig_getmethods__["ogroup"] = _mul_nbapi.of_flow_mod_params_ogroup_get
    if _newclass:ogroup = _swig_property(_mul_nbapi.of_flow_mod_params_ogroup_get, _mul_nbapi.of_flow_mod_params_ogroup_set)
    __swig_setmethods__["cookie"] = _mul_nbapi.of_flow_mod_params_cookie_set
    __swig_getmethods__["cookie"] = _mul_nbapi.of_flow_mod_params_cookie_get
    if _newclass:cookie = _swig_property(_mul_nbapi.of_flow_mod_params_cookie_get, _mul_nbapi.of_flow_mod_params_cookie_set)
    __swig_setmethods__["seq_cookie"] = _mul_nbapi.of_flow_mod_params_seq_cookie_set
    __swig_getmethods__["seq_cookie"] = _mul_nbapi.of_flow_mod_params_seq_cookie_get
    if _newclass:seq_cookie = _swig_property(_mul_nbapi.of_flow_mod_params_seq_cookie_get, _mul_nbapi.of_flow_mod_params_seq_cookie_set)
    __swig_setmethods__["meter_dep"] = _mul_nbapi.of_flow_mod_params_meter_dep_set
    __swig_getmethods__["meter_dep"] = _mul_nbapi.of_flow_mod_params_meter_dep_get
    if _newclass:meter_dep = _swig_property(_mul_nbapi.of_flow_mod_params_meter_dep_get, _mul_nbapi.of_flow_mod_params_meter_dep_set)
    __swig_setmethods__["grp_dep"] = _mul_nbapi.of_flow_mod_params_grp_dep_set
    __swig_getmethods__["grp_dep"] = _mul_nbapi.of_flow_mod_params_grp_dep_get
    if _newclass:grp_dep = _swig_property(_mul_nbapi.of_flow_mod_params_grp_dep_get, _mul_nbapi.of_flow_mod_params_grp_dep_set)
    def __init__(self): 
        this = _mul_nbapi.new_of_flow_mod_params()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_of_flow_mod_params
    __del__ = lambda self : None;
of_flow_mod_params_swigregister = _mul_nbapi.of_flow_mod_params_swigregister
of_flow_mod_params_swigregister(of_flow_mod_params)

class of_group_mod_params(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, of_group_mod_params, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, of_group_mod_params, name)
    __repr__ = _swig_repr
    __swig_setmethods__["command"] = _mul_nbapi.of_group_mod_params_command_set
    __swig_getmethods__["command"] = _mul_nbapi.of_group_mod_params_command_get
    if _newclass:command = _swig_property(_mul_nbapi.of_group_mod_params_command_get, _mul_nbapi.of_group_mod_params_command_set)
    __swig_setmethods__["app_owner"] = _mul_nbapi.of_group_mod_params_app_owner_set
    __swig_getmethods__["app_owner"] = _mul_nbapi.of_group_mod_params_app_owner_get
    if _newclass:app_owner = _swig_property(_mul_nbapi.of_group_mod_params_app_owner_get, _mul_nbapi.of_group_mod_params_app_owner_set)
    __swig_setmethods__["group"] = _mul_nbapi.of_group_mod_params_group_set
    __swig_getmethods__["group"] = _mul_nbapi.of_group_mod_params_group_get
    if _newclass:group = _swig_property(_mul_nbapi.of_group_mod_params_group_get, _mul_nbapi.of_group_mod_params_group_set)
    __swig_setmethods__["type"] = _mul_nbapi.of_group_mod_params_type_set
    __swig_getmethods__["type"] = _mul_nbapi.of_group_mod_params_type_get
    if _newclass:type = _swig_property(_mul_nbapi.of_group_mod_params_type_get, _mul_nbapi.of_group_mod_params_type_set)
    __swig_setmethods__["flags"] = _mul_nbapi.of_group_mod_params_flags_set
    __swig_getmethods__["flags"] = _mul_nbapi.of_group_mod_params_flags_get
    if _newclass:flags = _swig_property(_mul_nbapi.of_group_mod_params_flags_get, _mul_nbapi.of_group_mod_params_flags_set)
    __swig_setmethods__["act_vectors"] = _mul_nbapi.of_group_mod_params_act_vectors_set
    __swig_getmethods__["act_vectors"] = _mul_nbapi.of_group_mod_params_act_vectors_get
    if _newclass:act_vectors = _swig_property(_mul_nbapi.of_group_mod_params_act_vectors_get, _mul_nbapi.of_group_mod_params_act_vectors_set)
    __swig_setmethods__["act_vec_len"] = _mul_nbapi.of_group_mod_params_act_vec_len_set
    __swig_getmethods__["act_vec_len"] = _mul_nbapi.of_group_mod_params_act_vec_len_get
    if _newclass:act_vec_len = _swig_property(_mul_nbapi.of_group_mod_params_act_vec_len_get, _mul_nbapi.of_group_mod_params_act_vec_len_set)
    def __init__(self): 
        this = _mul_nbapi.new_of_group_mod_params()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_of_group_mod_params
    __del__ = lambda self : None;
of_group_mod_params_swigregister = _mul_nbapi.of_group_mod_params_swigregister
of_group_mod_params_swigregister(of_group_mod_params)
OF_MAX_ACT_VECTORS = _mul_nbapi.OF_MAX_ACT_VECTORS

class of_meter_mod_params(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, of_meter_mod_params, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, of_meter_mod_params, name)
    __repr__ = _swig_repr
    __swig_setmethods__["command"] = _mul_nbapi.of_meter_mod_params_command_set
    __swig_getmethods__["command"] = _mul_nbapi.of_meter_mod_params_command_get
    if _newclass:command = _swig_property(_mul_nbapi.of_meter_mod_params_command_get, _mul_nbapi.of_meter_mod_params_command_set)
    __swig_setmethods__["app_owner"] = _mul_nbapi.of_meter_mod_params_app_owner_set
    __swig_getmethods__["app_owner"] = _mul_nbapi.of_meter_mod_params_app_owner_get
    if _newclass:app_owner = _swig_property(_mul_nbapi.of_meter_mod_params_app_owner_get, _mul_nbapi.of_meter_mod_params_app_owner_set)
    __swig_setmethods__["meter"] = _mul_nbapi.of_meter_mod_params_meter_set
    __swig_getmethods__["meter"] = _mul_nbapi.of_meter_mod_params_meter_get
    if _newclass:meter = _swig_property(_mul_nbapi.of_meter_mod_params_meter_get, _mul_nbapi.of_meter_mod_params_meter_set)
    __swig_setmethods__["flags"] = _mul_nbapi.of_meter_mod_params_flags_set
    __swig_getmethods__["flags"] = _mul_nbapi.of_meter_mod_params_flags_get
    if _newclass:flags = _swig_property(_mul_nbapi.of_meter_mod_params_flags_get, _mul_nbapi.of_meter_mod_params_flags_set)
    __swig_setmethods__["cflags"] = _mul_nbapi.of_meter_mod_params_cflags_set
    __swig_getmethods__["cflags"] = _mul_nbapi.of_meter_mod_params_cflags_get
    if _newclass:cflags = _swig_property(_mul_nbapi.of_meter_mod_params_cflags_get, _mul_nbapi.of_meter_mod_params_cflags_set)
    __swig_setmethods__["meter_bands"] = _mul_nbapi.of_meter_mod_params_meter_bands_set
    __swig_getmethods__["meter_bands"] = _mul_nbapi.of_meter_mod_params_meter_bands_get
    if _newclass:meter_bands = _swig_property(_mul_nbapi.of_meter_mod_params_meter_bands_get, _mul_nbapi.of_meter_mod_params_meter_bands_set)
    __swig_setmethods__["meter_nbands"] = _mul_nbapi.of_meter_mod_params_meter_nbands_set
    __swig_getmethods__["meter_nbands"] = _mul_nbapi.of_meter_mod_params_meter_nbands_get
    if _newclass:meter_nbands = _swig_property(_mul_nbapi.of_meter_mod_params_meter_nbands_get, _mul_nbapi.of_meter_mod_params_meter_nbands_set)
    def __init__(self): 
        this = _mul_nbapi.new_of_meter_mod_params()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_of_meter_mod_params
    __del__ = lambda self : None;
of_meter_mod_params_swigregister = _mul_nbapi.of_meter_mod_params_swigregister
of_meter_mod_params_swigregister(of_meter_mod_params)
OF_MAX_METER_VECTORS = _mul_nbapi.OF_MAX_METER_VECTORS

class ofp_port_mod_properties(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofp_port_mod_properties, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofp_port_mod_properties, name)
    __repr__ = _swig_repr
    __swig_setmethods__["advertise"] = _mul_nbapi.ofp_port_mod_properties_advertise_set
    __swig_getmethods__["advertise"] = _mul_nbapi.ofp_port_mod_properties_advertise_get
    if _newclass:advertise = _swig_property(_mul_nbapi.ofp_port_mod_properties_advertise_get, _mul_nbapi.ofp_port_mod_properties_advertise_set)
    __swig_setmethods__["configure"] = _mul_nbapi.ofp_port_mod_properties_configure_set
    __swig_getmethods__["configure"] = _mul_nbapi.ofp_port_mod_properties_configure_get
    if _newclass:configure = _swig_property(_mul_nbapi.ofp_port_mod_properties_configure_get, _mul_nbapi.ofp_port_mod_properties_configure_set)
    __swig_setmethods__["freq_lmda"] = _mul_nbapi.ofp_port_mod_properties_freq_lmda_set
    __swig_getmethods__["freq_lmda"] = _mul_nbapi.ofp_port_mod_properties_freq_lmda_get
    if _newclass:freq_lmda = _swig_property(_mul_nbapi.ofp_port_mod_properties_freq_lmda_get, _mul_nbapi.ofp_port_mod_properties_freq_lmda_set)
    __swig_setmethods__["fl_offset"] = _mul_nbapi.ofp_port_mod_properties_fl_offset_set
    __swig_getmethods__["fl_offset"] = _mul_nbapi.ofp_port_mod_properties_fl_offset_get
    if _newclass:fl_offset = _swig_property(_mul_nbapi.ofp_port_mod_properties_fl_offset_get, _mul_nbapi.ofp_port_mod_properties_fl_offset_set)
    __swig_setmethods__["grid_span"] = _mul_nbapi.ofp_port_mod_properties_grid_span_set
    __swig_getmethods__["grid_span"] = _mul_nbapi.ofp_port_mod_properties_grid_span_get
    if _newclass:grid_span = _swig_property(_mul_nbapi.ofp_port_mod_properties_grid_span_get, _mul_nbapi.ofp_port_mod_properties_grid_span_set)
    __swig_setmethods__["tx_pwr"] = _mul_nbapi.ofp_port_mod_properties_tx_pwr_set
    __swig_getmethods__["tx_pwr"] = _mul_nbapi.ofp_port_mod_properties_tx_pwr_get
    if _newclass:tx_pwr = _swig_property(_mul_nbapi.ofp_port_mod_properties_tx_pwr_get, _mul_nbapi.ofp_port_mod_properties_tx_pwr_set)
    def __init__(self): 
        this = _mul_nbapi.new_ofp_port_mod_properties()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_ofp_port_mod_properties
    __del__ = lambda self : None;
ofp_port_mod_properties_swigregister = _mul_nbapi.ofp_port_mod_properties_swigregister
ofp_port_mod_properties_swigregister(ofp_port_mod_properties)

class of_port_mod_params(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, of_port_mod_params, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, of_port_mod_params, name)
    __repr__ = _swig_repr
    __swig_setmethods__["type"] = _mul_nbapi.of_port_mod_params_type_set
    __swig_getmethods__["type"] = _mul_nbapi.of_port_mod_params_type_get
    if _newclass:type = _swig_property(_mul_nbapi.of_port_mod_params_type_get, _mul_nbapi.of_port_mod_params_type_set)
    __swig_setmethods__["port_no"] = _mul_nbapi.of_port_mod_params_port_no_set
    __swig_getmethods__["port_no"] = _mul_nbapi.of_port_mod_params_port_no_get
    if _newclass:port_no = _swig_property(_mul_nbapi.of_port_mod_params_port_no_get, _mul_nbapi.of_port_mod_params_port_no_set)
    __swig_setmethods__["config"] = _mul_nbapi.of_port_mod_params_config_set
    __swig_getmethods__["config"] = _mul_nbapi.of_port_mod_params_config_get
    if _newclass:config = _swig_property(_mul_nbapi.of_port_mod_params_config_get, _mul_nbapi.of_port_mod_params_config_set)
    __swig_setmethods__["mask"] = _mul_nbapi.of_port_mod_params_mask_set
    __swig_getmethods__["mask"] = _mul_nbapi.of_port_mod_params_mask_get
    if _newclass:mask = _swig_property(_mul_nbapi.of_port_mod_params_mask_get, _mul_nbapi.of_port_mod_params_mask_set)
    __swig_setmethods__["properties"] = _mul_nbapi.of_port_mod_params_properties_set
    __swig_getmethods__["properties"] = _mul_nbapi.of_port_mod_params_properties_get
    if _newclass:properties = _swig_property(_mul_nbapi.of_port_mod_params_properties_get, _mul_nbapi.of_port_mod_params_properties_set)
    def __init__(self): 
        this = _mul_nbapi.new_of_port_mod_params()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_of_port_mod_params
    __del__ = lambda self : None;
of_port_mod_params_swigregister = _mul_nbapi.of_port_mod_params_swigregister
of_port_mod_params_swigregister(of_port_mod_params)

class of_vendor_params(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, of_vendor_params, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, of_vendor_params, name)
    __repr__ = _swig_repr
    __swig_setmethods__["vendor"] = _mul_nbapi.of_vendor_params_vendor_set
    __swig_getmethods__["vendor"] = _mul_nbapi.of_vendor_params_vendor_get
    if _newclass:vendor = _swig_property(_mul_nbapi.of_vendor_params_vendor_get, _mul_nbapi.of_vendor_params_vendor_set)
    __swig_setmethods__["data_len"] = _mul_nbapi.of_vendor_params_data_len_set
    __swig_getmethods__["data_len"] = _mul_nbapi.of_vendor_params_data_len_get
    if _newclass:data_len = _swig_property(_mul_nbapi.of_vendor_params_data_len_get, _mul_nbapi.of_vendor_params_data_len_set)
    __swig_setmethods__["data"] = _mul_nbapi.of_vendor_params_data_set
    __swig_getmethods__["data"] = _mul_nbapi.of_vendor_params_data_get
    if _newclass:data = _swig_property(_mul_nbapi.of_vendor_params_data_get, _mul_nbapi.of_vendor_params_data_set)
    def __init__(self): 
        this = _mul_nbapi.new_of_vendor_params()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_of_vendor_params
    __del__ = lambda self : None;
of_vendor_params_swigregister = _mul_nbapi.of_vendor_params_swigregister
of_vendor_params_swigregister(of_vendor_params)

class of_async_config_params(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, of_async_config_params, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, of_async_config_params, name)
    __repr__ = _swig_repr
    __swig_setmethods__["packet_in_mask"] = _mul_nbapi.of_async_config_params_packet_in_mask_set
    __swig_getmethods__["packet_in_mask"] = _mul_nbapi.of_async_config_params_packet_in_mask_get
    if _newclass:packet_in_mask = _swig_property(_mul_nbapi.of_async_config_params_packet_in_mask_get, _mul_nbapi.of_async_config_params_packet_in_mask_set)
    __swig_setmethods__["port_status_mask"] = _mul_nbapi.of_async_config_params_port_status_mask_set
    __swig_getmethods__["port_status_mask"] = _mul_nbapi.of_async_config_params_port_status_mask_get
    if _newclass:port_status_mask = _swig_property(_mul_nbapi.of_async_config_params_port_status_mask_get, _mul_nbapi.of_async_config_params_port_status_mask_set)
    __swig_setmethods__["flow_removed_mask"] = _mul_nbapi.of_async_config_params_flow_removed_mask_set
    __swig_getmethods__["flow_removed_mask"] = _mul_nbapi.of_async_config_params_flow_removed_mask_get
    if _newclass:flow_removed_mask = _swig_property(_mul_nbapi.of_async_config_params_flow_removed_mask_get, _mul_nbapi.of_async_config_params_flow_removed_mask_set)
    def __init__(self): 
        this = _mul_nbapi.new_of_async_config_params()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_of_async_config_params
    __del__ = lambda self : None;
of_async_config_params_swigregister = _mul_nbapi.of_async_config_params_swigregister
of_async_config_params_swigregister(of_async_config_params)

class of_pkt_out_params(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, of_pkt_out_params, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, of_pkt_out_params, name)
    __repr__ = _swig_repr
    __swig_setmethods__["buffer_id"] = _mul_nbapi.of_pkt_out_params_buffer_id_set
    __swig_getmethods__["buffer_id"] = _mul_nbapi.of_pkt_out_params_buffer_id_get
    if _newclass:buffer_id = _swig_property(_mul_nbapi.of_pkt_out_params_buffer_id_get, _mul_nbapi.of_pkt_out_params_buffer_id_set)
    __swig_setmethods__["in_port"] = _mul_nbapi.of_pkt_out_params_in_port_set
    __swig_getmethods__["in_port"] = _mul_nbapi.of_pkt_out_params_in_port_get
    if _newclass:in_port = _swig_property(_mul_nbapi.of_pkt_out_params_in_port_get, _mul_nbapi.of_pkt_out_params_in_port_set)
    __swig_setmethods__["action_len"] = _mul_nbapi.of_pkt_out_params_action_len_set
    __swig_getmethods__["action_len"] = _mul_nbapi.of_pkt_out_params_action_len_get
    if _newclass:action_len = _swig_property(_mul_nbapi.of_pkt_out_params_action_len_get, _mul_nbapi.of_pkt_out_params_action_len_set)
    __swig_setmethods__["action_list"] = _mul_nbapi.of_pkt_out_params_action_list_set
    __swig_getmethods__["action_list"] = _mul_nbapi.of_pkt_out_params_action_list_get
    if _newclass:action_list = _swig_property(_mul_nbapi.of_pkt_out_params_action_list_get, _mul_nbapi.of_pkt_out_params_action_list_set)
    __swig_setmethods__["data"] = _mul_nbapi.of_pkt_out_params_data_set
    __swig_getmethods__["data"] = _mul_nbapi.of_pkt_out_params_data_get
    if _newclass:data = _swig_property(_mul_nbapi.of_pkt_out_params_data_get, _mul_nbapi.of_pkt_out_params_data_set)
    __swig_setmethods__["data_len"] = _mul_nbapi.of_pkt_out_params_data_len_set
    __swig_getmethods__["data_len"] = _mul_nbapi.of_pkt_out_params_data_len_get
    if _newclass:data_len = _swig_property(_mul_nbapi.of_pkt_out_params_data_len_get, _mul_nbapi.of_pkt_out_params_data_len_set)
    __swig_setmethods__["pad"] = _mul_nbapi.of_pkt_out_params_pad_set
    __swig_getmethods__["pad"] = _mul_nbapi.of_pkt_out_params_pad_get
    if _newclass:pad = _swig_property(_mul_nbapi.of_pkt_out_params_pad_get, _mul_nbapi.of_pkt_out_params_pad_set)
    def __init__(self): 
        this = _mul_nbapi.new_of_pkt_out_params()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_of_pkt_out_params
    __del__ = lambda self : None;
of_pkt_out_params_swigregister = _mul_nbapi.of_pkt_out_params_swigregister
of_pkt_out_params_swigregister(of_pkt_out_params)

class c_ofp_ctors(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, c_ofp_ctors, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, c_ofp_ctors, name)
    __repr__ = _swig_repr
    __swig_setmethods__["hello"] = _mul_nbapi.c_ofp_ctors_hello_set
    __swig_getmethods__["hello"] = _mul_nbapi.c_ofp_ctors_hello_get
    if _newclass:hello = _swig_property(_mul_nbapi.c_ofp_ctors_hello_get, _mul_nbapi.c_ofp_ctors_hello_set)
    __swig_setmethods__["echo_req"] = _mul_nbapi.c_ofp_ctors_echo_req_set
    __swig_getmethods__["echo_req"] = _mul_nbapi.c_ofp_ctors_echo_req_get
    if _newclass:echo_req = _swig_property(_mul_nbapi.c_ofp_ctors_echo_req_get, _mul_nbapi.c_ofp_ctors_echo_req_set)
    __swig_setmethods__["echo_rsp"] = _mul_nbapi.c_ofp_ctors_echo_rsp_set
    __swig_getmethods__["echo_rsp"] = _mul_nbapi.c_ofp_ctors_echo_rsp_get
    if _newclass:echo_rsp = _swig_property(_mul_nbapi.c_ofp_ctors_echo_rsp_get, _mul_nbapi.c_ofp_ctors_echo_rsp_set)
    __swig_setmethods__["set_config"] = _mul_nbapi.c_ofp_ctors_set_config_set
    __swig_getmethods__["set_config"] = _mul_nbapi.c_ofp_ctors_set_config_get
    if _newclass:set_config = _swig_property(_mul_nbapi.c_ofp_ctors_set_config_get, _mul_nbapi.c_ofp_ctors_set_config_set)
    __swig_setmethods__["role_request"] = _mul_nbapi.c_ofp_ctors_role_request_set
    __swig_getmethods__["role_request"] = _mul_nbapi.c_ofp_ctors_role_request_get
    if _newclass:role_request = _swig_property(_mul_nbapi.c_ofp_ctors_role_request_get, _mul_nbapi.c_ofp_ctors_role_request_set)
    __swig_setmethods__["features"] = _mul_nbapi.c_ofp_ctors_features_set
    __swig_getmethods__["features"] = _mul_nbapi.c_ofp_ctors_features_get
    if _newclass:features = _swig_property(_mul_nbapi.c_ofp_ctors_features_get, _mul_nbapi.c_ofp_ctors_features_set)
    __swig_setmethods__["pkt_out"] = _mul_nbapi.c_ofp_ctors_pkt_out_set
    __swig_getmethods__["pkt_out"] = _mul_nbapi.c_ofp_ctors_pkt_out_get
    if _newclass:pkt_out = _swig_property(_mul_nbapi.c_ofp_ctors_pkt_out_get, _mul_nbapi.c_ofp_ctors_pkt_out_set)
    __swig_setmethods__["pkt_out_fast"] = _mul_nbapi.c_ofp_ctors_pkt_out_fast_set
    __swig_getmethods__["pkt_out_fast"] = _mul_nbapi.c_ofp_ctors_pkt_out_fast_get
    if _newclass:pkt_out_fast = _swig_property(_mul_nbapi.c_ofp_ctors_pkt_out_fast_get, _mul_nbapi.c_ofp_ctors_pkt_out_fast_set)
    __swig_setmethods__["flow_add"] = _mul_nbapi.c_ofp_ctors_flow_add_set
    __swig_getmethods__["flow_add"] = _mul_nbapi.c_ofp_ctors_flow_add_get
    if _newclass:flow_add = _swig_property(_mul_nbapi.c_ofp_ctors_flow_add_get, _mul_nbapi.c_ofp_ctors_flow_add_set)
    __swig_setmethods__["flow_del"] = _mul_nbapi.c_ofp_ctors_flow_del_set
    __swig_getmethods__["flow_del"] = _mul_nbapi.c_ofp_ctors_flow_del_get
    if _newclass:flow_del = _swig_property(_mul_nbapi.c_ofp_ctors_flow_del_get, _mul_nbapi.c_ofp_ctors_flow_del_set)
    __swig_setmethods__["flow_stat_req"] = _mul_nbapi.c_ofp_ctors_flow_stat_req_set
    __swig_getmethods__["flow_stat_req"] = _mul_nbapi.c_ofp_ctors_flow_stat_req_get
    if _newclass:flow_stat_req = _swig_property(_mul_nbapi.c_ofp_ctors_flow_stat_req_get, _mul_nbapi.c_ofp_ctors_flow_stat_req_set)
    __swig_setmethods__["group_stat_req"] = _mul_nbapi.c_ofp_ctors_group_stat_req_set
    __swig_getmethods__["group_stat_req"] = _mul_nbapi.c_ofp_ctors_group_stat_req_get
    if _newclass:group_stat_req = _swig_property(_mul_nbapi.c_ofp_ctors_group_stat_req_get, _mul_nbapi.c_ofp_ctors_group_stat_req_set)
    __swig_setmethods__["meter_stat_req"] = _mul_nbapi.c_ofp_ctors_meter_stat_req_set
    __swig_getmethods__["meter_stat_req"] = _mul_nbapi.c_ofp_ctors_meter_stat_req_get
    if _newclass:meter_stat_req = _swig_property(_mul_nbapi.c_ofp_ctors_meter_stat_req_get, _mul_nbapi.c_ofp_ctors_meter_stat_req_set)
    __swig_setmethods__["meter_stat_cfg_req"] = _mul_nbapi.c_ofp_ctors_meter_stat_cfg_req_set
    __swig_getmethods__["meter_stat_cfg_req"] = _mul_nbapi.c_ofp_ctors_meter_stat_cfg_req_get
    if _newclass:meter_stat_cfg_req = _swig_property(_mul_nbapi.c_ofp_ctors_meter_stat_cfg_req_get, _mul_nbapi.c_ofp_ctors_meter_stat_cfg_req_set)
    __swig_setmethods__["port_stat_req"] = _mul_nbapi.c_ofp_ctors_port_stat_req_set
    __swig_getmethods__["port_stat_req"] = _mul_nbapi.c_ofp_ctors_port_stat_req_get
    if _newclass:port_stat_req = _swig_property(_mul_nbapi.c_ofp_ctors_port_stat_req_get, _mul_nbapi.c_ofp_ctors_port_stat_req_set)
    __swig_setmethods__["port_q_get_conf"] = _mul_nbapi.c_ofp_ctors_port_q_get_conf_set
    __swig_getmethods__["port_q_get_conf"] = _mul_nbapi.c_ofp_ctors_port_q_get_conf_get
    if _newclass:port_q_get_conf = _swig_property(_mul_nbapi.c_ofp_ctors_port_q_get_conf_get, _mul_nbapi.c_ofp_ctors_port_q_get_conf_set)
    __swig_setmethods__["port_q_stat_req"] = _mul_nbapi.c_ofp_ctors_port_q_stat_req_set
    __swig_getmethods__["port_q_stat_req"] = _mul_nbapi.c_ofp_ctors_port_q_stat_req_get
    if _newclass:port_q_stat_req = _swig_property(_mul_nbapi.c_ofp_ctors_port_q_stat_req_get, _mul_nbapi.c_ofp_ctors_port_q_stat_req_set)
    __swig_setmethods__["group_validate"] = _mul_nbapi.c_ofp_ctors_group_validate_set
    __swig_getmethods__["group_validate"] = _mul_nbapi.c_ofp_ctors_group_validate_get
    if _newclass:group_validate = _swig_property(_mul_nbapi.c_ofp_ctors_group_validate_get, _mul_nbapi.c_ofp_ctors_group_validate_set)
    __swig_setmethods__["group_add"] = _mul_nbapi.c_ofp_ctors_group_add_set
    __swig_getmethods__["group_add"] = _mul_nbapi.c_ofp_ctors_group_add_get
    if _newclass:group_add = _swig_property(_mul_nbapi.c_ofp_ctors_group_add_get, _mul_nbapi.c_ofp_ctors_group_add_set)
    __swig_setmethods__["group_del"] = _mul_nbapi.c_ofp_ctors_group_del_set
    __swig_getmethods__["group_del"] = _mul_nbapi.c_ofp_ctors_group_del_get
    if _newclass:group_del = _swig_property(_mul_nbapi.c_ofp_ctors_group_del_get, _mul_nbapi.c_ofp_ctors_group_del_set)
    __swig_setmethods__["tbl_mod"] = _mul_nbapi.c_ofp_ctors_tbl_mod_set
    __swig_getmethods__["tbl_mod"] = _mul_nbapi.c_ofp_ctors_tbl_mod_get
    if _newclass:tbl_mod = _swig_property(_mul_nbapi.c_ofp_ctors_tbl_mod_get, _mul_nbapi.c_ofp_ctors_tbl_mod_set)
    __swig_setmethods__["meter_add"] = _mul_nbapi.c_ofp_ctors_meter_add_set
    __swig_getmethods__["meter_add"] = _mul_nbapi.c_ofp_ctors_meter_add_get
    if _newclass:meter_add = _swig_property(_mul_nbapi.c_ofp_ctors_meter_add_get, _mul_nbapi.c_ofp_ctors_meter_add_set)
    __swig_setmethods__["meter_del"] = _mul_nbapi.c_ofp_ctors_meter_del_set
    __swig_getmethods__["meter_del"] = _mul_nbapi.c_ofp_ctors_meter_del_get
    if _newclass:meter_del = _swig_property(_mul_nbapi.c_ofp_ctors_meter_del_get, _mul_nbapi.c_ofp_ctors_meter_del_set)
    __swig_setmethods__["port_mod"] = _mul_nbapi.c_ofp_ctors_port_mod_set
    __swig_getmethods__["port_mod"] = _mul_nbapi.c_ofp_ctors_port_mod_get
    if _newclass:port_mod = _swig_property(_mul_nbapi.c_ofp_ctors_port_mod_get, _mul_nbapi.c_ofp_ctors_port_mod_set)
    __swig_setmethods__["async_config"] = _mul_nbapi.c_ofp_ctors_async_config_set
    __swig_getmethods__["async_config"] = _mul_nbapi.c_ofp_ctors_async_config_get
    if _newclass:async_config = _swig_property(_mul_nbapi.c_ofp_ctors_async_config_get, _mul_nbapi.c_ofp_ctors_async_config_set)
    __swig_setmethods__["prep_mpart_msg"] = _mul_nbapi.c_ofp_ctors_prep_mpart_msg_set
    __swig_getmethods__["prep_mpart_msg"] = _mul_nbapi.c_ofp_ctors_prep_mpart_msg_get
    if _newclass:prep_mpart_msg = _swig_property(_mul_nbapi.c_ofp_ctors_prep_mpart_msg_get, _mul_nbapi.c_ofp_ctors_prep_mpart_msg_set)
    __swig_setmethods__["prep_barrier_req"] = _mul_nbapi.c_ofp_ctors_prep_barrier_req_set
    __swig_getmethods__["prep_barrier_req"] = _mul_nbapi.c_ofp_ctors_prep_barrier_req_get
    if _newclass:prep_barrier_req = _swig_property(_mul_nbapi.c_ofp_ctors_prep_barrier_req_get, _mul_nbapi.c_ofp_ctors_prep_barrier_req_set)
    __swig_setmethods__["prep_vendor_msg"] = _mul_nbapi.c_ofp_ctors_prep_vendor_msg_set
    __swig_getmethods__["prep_vendor_msg"] = _mul_nbapi.c_ofp_ctors_prep_vendor_msg_get
    if _newclass:prep_vendor_msg = _swig_property(_mul_nbapi.c_ofp_ctors_prep_vendor_msg_get, _mul_nbapi.c_ofp_ctors_prep_vendor_msg_set)
    __swig_setmethods__["set_act_inst"] = _mul_nbapi.c_ofp_ctors_set_act_inst_set
    __swig_getmethods__["set_act_inst"] = _mul_nbapi.c_ofp_ctors_set_act_inst_get
    if _newclass:set_act_inst = _swig_property(_mul_nbapi.c_ofp_ctors_set_act_inst_get, _mul_nbapi.c_ofp_ctors_set_act_inst_set)
    __swig_setmethods__["inst_goto"] = _mul_nbapi.c_ofp_ctors_inst_goto_set
    __swig_getmethods__["inst_goto"] = _mul_nbapi.c_ofp_ctors_inst_goto_get
    if _newclass:inst_goto = _swig_property(_mul_nbapi.c_ofp_ctors_inst_goto_get, _mul_nbapi.c_ofp_ctors_inst_goto_set)
    __swig_setmethods__["inst_meter"] = _mul_nbapi.c_ofp_ctors_inst_meter_set
    __swig_getmethods__["inst_meter"] = _mul_nbapi.c_ofp_ctors_inst_meter_get
    if _newclass:inst_meter = _swig_property(_mul_nbapi.c_ofp_ctors_inst_meter_get, _mul_nbapi.c_ofp_ctors_inst_meter_set)
    __swig_setmethods__["inst_wr_meta"] = _mul_nbapi.c_ofp_ctors_inst_wr_meta_set
    __swig_getmethods__["inst_wr_meta"] = _mul_nbapi.c_ofp_ctors_inst_wr_meta_get
    if _newclass:inst_wr_meta = _swig_property(_mul_nbapi.c_ofp_ctors_inst_wr_meta_get, _mul_nbapi.c_ofp_ctors_inst_wr_meta_set)
    __swig_setmethods__["act_output"] = _mul_nbapi.c_ofp_ctors_act_output_set
    __swig_getmethods__["act_output"] = _mul_nbapi.c_ofp_ctors_act_output_get
    if _newclass:act_output = _swig_property(_mul_nbapi.c_ofp_ctors_act_output_get, _mul_nbapi.c_ofp_ctors_act_output_set)
    __swig_setmethods__["act_set_vid"] = _mul_nbapi.c_ofp_ctors_act_set_vid_set
    __swig_getmethods__["act_set_vid"] = _mul_nbapi.c_ofp_ctors_act_set_vid_get
    if _newclass:act_set_vid = _swig_property(_mul_nbapi.c_ofp_ctors_act_set_vid_get, _mul_nbapi.c_ofp_ctors_act_set_vid_set)
    __swig_setmethods__["act_strip_vid"] = _mul_nbapi.c_ofp_ctors_act_strip_vid_set
    __swig_getmethods__["act_strip_vid"] = _mul_nbapi.c_ofp_ctors_act_strip_vid_get
    if _newclass:act_strip_vid = _swig_property(_mul_nbapi.c_ofp_ctors_act_strip_vid_get, _mul_nbapi.c_ofp_ctors_act_strip_vid_set)
    __swig_setmethods__["act_push"] = _mul_nbapi.c_ofp_ctors_act_push_set
    __swig_getmethods__["act_push"] = _mul_nbapi.c_ofp_ctors_act_push_get
    if _newclass:act_push = _swig_property(_mul_nbapi.c_ofp_ctors_act_push_get, _mul_nbapi.c_ofp_ctors_act_push_set)
    __swig_setmethods__["act_strip_mpls"] = _mul_nbapi.c_ofp_ctors_act_strip_mpls_set
    __swig_getmethods__["act_strip_mpls"] = _mul_nbapi.c_ofp_ctors_act_strip_mpls_get
    if _newclass:act_strip_mpls = _swig_property(_mul_nbapi.c_ofp_ctors_act_strip_mpls_get, _mul_nbapi.c_ofp_ctors_act_strip_mpls_set)
    __swig_setmethods__["act_strip_pbb"] = _mul_nbapi.c_ofp_ctors_act_strip_pbb_set
    __swig_getmethods__["act_strip_pbb"] = _mul_nbapi.c_ofp_ctors_act_strip_pbb_get
    if _newclass:act_strip_pbb = _swig_property(_mul_nbapi.c_ofp_ctors_act_strip_pbb_get, _mul_nbapi.c_ofp_ctors_act_strip_pbb_set)
    __swig_setmethods__["act_set_mpls_ttl"] = _mul_nbapi.c_ofp_ctors_act_set_mpls_ttl_set
    __swig_getmethods__["act_set_mpls_ttl"] = _mul_nbapi.c_ofp_ctors_act_set_mpls_ttl_get
    if _newclass:act_set_mpls_ttl = _swig_property(_mul_nbapi.c_ofp_ctors_act_set_mpls_ttl_get, _mul_nbapi.c_ofp_ctors_act_set_mpls_ttl_set)
    __swig_setmethods__["act_dec_mpls_ttl"] = _mul_nbapi.c_ofp_ctors_act_dec_mpls_ttl_set
    __swig_getmethods__["act_dec_mpls_ttl"] = _mul_nbapi.c_ofp_ctors_act_dec_mpls_ttl_get
    if _newclass:act_dec_mpls_ttl = _swig_property(_mul_nbapi.c_ofp_ctors_act_dec_mpls_ttl_get, _mul_nbapi.c_ofp_ctors_act_dec_mpls_ttl_set)
    __swig_setmethods__["act_set_ip_ttl"] = _mul_nbapi.c_ofp_ctors_act_set_ip_ttl_set
    __swig_getmethods__["act_set_ip_ttl"] = _mul_nbapi.c_ofp_ctors_act_set_ip_ttl_get
    if _newclass:act_set_ip_ttl = _swig_property(_mul_nbapi.c_ofp_ctors_act_set_ip_ttl_get, _mul_nbapi.c_ofp_ctors_act_set_ip_ttl_set)
    __swig_setmethods__["act_dec_ip_ttl"] = _mul_nbapi.c_ofp_ctors_act_dec_ip_ttl_set
    __swig_getmethods__["act_dec_ip_ttl"] = _mul_nbapi.c_ofp_ctors_act_dec_ip_ttl_get
    if _newclass:act_dec_ip_ttl = _swig_property(_mul_nbapi.c_ofp_ctors_act_dec_ip_ttl_get, _mul_nbapi.c_ofp_ctors_act_dec_ip_ttl_set)
    __swig_setmethods__["act_cp_ttl"] = _mul_nbapi.c_ofp_ctors_act_cp_ttl_set
    __swig_getmethods__["act_cp_ttl"] = _mul_nbapi.c_ofp_ctors_act_cp_ttl_get
    if _newclass:act_cp_ttl = _swig_property(_mul_nbapi.c_ofp_ctors_act_cp_ttl_get, _mul_nbapi.c_ofp_ctors_act_cp_ttl_set)
    __swig_setmethods__["act_set_dmac"] = _mul_nbapi.c_ofp_ctors_act_set_dmac_set
    __swig_getmethods__["act_set_dmac"] = _mul_nbapi.c_ofp_ctors_act_set_dmac_get
    if _newclass:act_set_dmac = _swig_property(_mul_nbapi.c_ofp_ctors_act_set_dmac_get, _mul_nbapi.c_ofp_ctors_act_set_dmac_set)
    __swig_setmethods__["act_set_smac"] = _mul_nbapi.c_ofp_ctors_act_set_smac_set
    __swig_getmethods__["act_set_smac"] = _mul_nbapi.c_ofp_ctors_act_set_smac_get
    if _newclass:act_set_smac = _swig_property(_mul_nbapi.c_ofp_ctors_act_set_smac_get, _mul_nbapi.c_ofp_ctors_act_set_smac_set)
    __swig_setmethods__["act_set_eth_type"] = _mul_nbapi.c_ofp_ctors_act_set_eth_type_set
    __swig_getmethods__["act_set_eth_type"] = _mul_nbapi.c_ofp_ctors_act_set_eth_type_get
    if _newclass:act_set_eth_type = _swig_property(_mul_nbapi.c_ofp_ctors_act_set_eth_type_get, _mul_nbapi.c_ofp_ctors_act_set_eth_type_set)
    __swig_setmethods__["act_set_mpls_label"] = _mul_nbapi.c_ofp_ctors_act_set_mpls_label_set
    __swig_getmethods__["act_set_mpls_label"] = _mul_nbapi.c_ofp_ctors_act_set_mpls_label_get
    if _newclass:act_set_mpls_label = _swig_property(_mul_nbapi.c_ofp_ctors_act_set_mpls_label_get, _mul_nbapi.c_ofp_ctors_act_set_mpls_label_set)
    __swig_setmethods__["act_set_mpls_tc"] = _mul_nbapi.c_ofp_ctors_act_set_mpls_tc_set
    __swig_getmethods__["act_set_mpls_tc"] = _mul_nbapi.c_ofp_ctors_act_set_mpls_tc_get
    if _newclass:act_set_mpls_tc = _swig_property(_mul_nbapi.c_ofp_ctors_act_set_mpls_tc_get, _mul_nbapi.c_ofp_ctors_act_set_mpls_tc_set)
    __swig_setmethods__["act_set_mpls_bos"] = _mul_nbapi.c_ofp_ctors_act_set_mpls_bos_set
    __swig_getmethods__["act_set_mpls_bos"] = _mul_nbapi.c_ofp_ctors_act_set_mpls_bos_get
    if _newclass:act_set_mpls_bos = _swig_property(_mul_nbapi.c_ofp_ctors_act_set_mpls_bos_get, _mul_nbapi.c_ofp_ctors_act_set_mpls_bos_set)
    __swig_setmethods__["act_set_nw_saddr"] = _mul_nbapi.c_ofp_ctors_act_set_nw_saddr_set
    __swig_getmethods__["act_set_nw_saddr"] = _mul_nbapi.c_ofp_ctors_act_set_nw_saddr_get
    if _newclass:act_set_nw_saddr = _swig_property(_mul_nbapi.c_ofp_ctors_act_set_nw_saddr_get, _mul_nbapi.c_ofp_ctors_act_set_nw_saddr_set)
    __swig_setmethods__["act_set_nw_daddr"] = _mul_nbapi.c_ofp_ctors_act_set_nw_daddr_set
    __swig_getmethods__["act_set_nw_daddr"] = _mul_nbapi.c_ofp_ctors_act_set_nw_daddr_get
    if _newclass:act_set_nw_daddr = _swig_property(_mul_nbapi.c_ofp_ctors_act_set_nw_daddr_get, _mul_nbapi.c_ofp_ctors_act_set_nw_daddr_set)
    __swig_setmethods__["act_set_nw_saddr6"] = _mul_nbapi.c_ofp_ctors_act_set_nw_saddr6_set
    __swig_getmethods__["act_set_nw_saddr6"] = _mul_nbapi.c_ofp_ctors_act_set_nw_saddr6_get
    if _newclass:act_set_nw_saddr6 = _swig_property(_mul_nbapi.c_ofp_ctors_act_set_nw_saddr6_get, _mul_nbapi.c_ofp_ctors_act_set_nw_saddr6_set)
    __swig_setmethods__["act_set_nw_daddr6"] = _mul_nbapi.c_ofp_ctors_act_set_nw_daddr6_set
    __swig_getmethods__["act_set_nw_daddr6"] = _mul_nbapi.c_ofp_ctors_act_set_nw_daddr6_get
    if _newclass:act_set_nw_daddr6 = _swig_property(_mul_nbapi.c_ofp_ctors_act_set_nw_daddr6_get, _mul_nbapi.c_ofp_ctors_act_set_nw_daddr6_set)
    __swig_setmethods__["act_set_vlan_pcp"] = _mul_nbapi.c_ofp_ctors_act_set_vlan_pcp_set
    __swig_getmethods__["act_set_vlan_pcp"] = _mul_nbapi.c_ofp_ctors_act_set_vlan_pcp_get
    if _newclass:act_set_vlan_pcp = _swig_property(_mul_nbapi.c_ofp_ctors_act_set_vlan_pcp_get, _mul_nbapi.c_ofp_ctors_act_set_vlan_pcp_set)
    __swig_setmethods__["act_set_nw_tos"] = _mul_nbapi.c_ofp_ctors_act_set_nw_tos_set
    __swig_getmethods__["act_set_nw_tos"] = _mul_nbapi.c_ofp_ctors_act_set_nw_tos_get
    if _newclass:act_set_nw_tos = _swig_property(_mul_nbapi.c_ofp_ctors_act_set_nw_tos_get, _mul_nbapi.c_ofp_ctors_act_set_nw_tos_set)
    __swig_setmethods__["act_set_tp_udp_dport"] = _mul_nbapi.c_ofp_ctors_act_set_tp_udp_dport_set
    __swig_getmethods__["act_set_tp_udp_dport"] = _mul_nbapi.c_ofp_ctors_act_set_tp_udp_dport_get
    if _newclass:act_set_tp_udp_dport = _swig_property(_mul_nbapi.c_ofp_ctors_act_set_tp_udp_dport_get, _mul_nbapi.c_ofp_ctors_act_set_tp_udp_dport_set)
    __swig_setmethods__["act_set_tp_udp_sport"] = _mul_nbapi.c_ofp_ctors_act_set_tp_udp_sport_set
    __swig_getmethods__["act_set_tp_udp_sport"] = _mul_nbapi.c_ofp_ctors_act_set_tp_udp_sport_get
    if _newclass:act_set_tp_udp_sport = _swig_property(_mul_nbapi.c_ofp_ctors_act_set_tp_udp_sport_get, _mul_nbapi.c_ofp_ctors_act_set_tp_udp_sport_set)
    __swig_setmethods__["act_set_tp_tcp_dport"] = _mul_nbapi.c_ofp_ctors_act_set_tp_tcp_dport_set
    __swig_getmethods__["act_set_tp_tcp_dport"] = _mul_nbapi.c_ofp_ctors_act_set_tp_tcp_dport_get
    if _newclass:act_set_tp_tcp_dport = _swig_property(_mul_nbapi.c_ofp_ctors_act_set_tp_tcp_dport_get, _mul_nbapi.c_ofp_ctors_act_set_tp_tcp_dport_set)
    __swig_setmethods__["act_set_tp_tcp_sport"] = _mul_nbapi.c_ofp_ctors_act_set_tp_tcp_sport_set
    __swig_getmethods__["act_set_tp_tcp_sport"] = _mul_nbapi.c_ofp_ctors_act_set_tp_tcp_sport_get
    if _newclass:act_set_tp_tcp_sport = _swig_property(_mul_nbapi.c_ofp_ctors_act_set_tp_tcp_sport_get, _mul_nbapi.c_ofp_ctors_act_set_tp_tcp_sport_set)
    __swig_setmethods__["act_set_group"] = _mul_nbapi.c_ofp_ctors_act_set_group_set
    __swig_getmethods__["act_set_group"] = _mul_nbapi.c_ofp_ctors_act_set_group_get
    if _newclass:act_set_group = _swig_property(_mul_nbapi.c_ofp_ctors_act_set_group_get, _mul_nbapi.c_ofp_ctors_act_set_group_set)
    __swig_setmethods__["act_set_queue"] = _mul_nbapi.c_ofp_ctors_act_set_queue_set
    __swig_getmethods__["act_set_queue"] = _mul_nbapi.c_ofp_ctors_act_set_queue_get
    if _newclass:act_set_queue = _swig_property(_mul_nbapi.c_ofp_ctors_act_set_queue_get, _mul_nbapi.c_ofp_ctors_act_set_queue_set)
    __swig_setmethods__["act_set_tunnel"] = _mul_nbapi.c_ofp_ctors_act_set_tunnel_set
    __swig_getmethods__["act_set_tunnel"] = _mul_nbapi.c_ofp_ctors_act_set_tunnel_get
    if _newclass:act_set_tunnel = _swig_property(_mul_nbapi.c_ofp_ctors_act_set_tunnel_get, _mul_nbapi.c_ofp_ctors_act_set_tunnel_set)
    __swig_setmethods__["meter_drop"] = _mul_nbapi.c_ofp_ctors_meter_drop_set
    __swig_getmethods__["meter_drop"] = _mul_nbapi.c_ofp_ctors_meter_drop_get
    if _newclass:meter_drop = _swig_property(_mul_nbapi.c_ofp_ctors_meter_drop_get, _mul_nbapi.c_ofp_ctors_meter_drop_set)
    __swig_setmethods__["meter_mark_dscp"] = _mul_nbapi.c_ofp_ctors_meter_mark_dscp_set
    __swig_getmethods__["meter_mark_dscp"] = _mul_nbapi.c_ofp_ctors_meter_mark_dscp_get
    if _newclass:meter_mark_dscp = _swig_property(_mul_nbapi.c_ofp_ctors_meter_mark_dscp_get, _mul_nbapi.c_ofp_ctors_meter_mark_dscp_set)
    __swig_setmethods__["validate_acts"] = _mul_nbapi.c_ofp_ctors_validate_acts_set
    __swig_getmethods__["validate_acts"] = _mul_nbapi.c_ofp_ctors_validate_acts_get
    if _newclass:validate_acts = _swig_property(_mul_nbapi.c_ofp_ctors_validate_acts_get, _mul_nbapi.c_ofp_ctors_validate_acts_set)
    __swig_setmethods__["normalize_flow"] = _mul_nbapi.c_ofp_ctors_normalize_flow_set
    __swig_getmethods__["normalize_flow"] = _mul_nbapi.c_ofp_ctors_normalize_flow_get
    if _newclass:normalize_flow = _swig_property(_mul_nbapi.c_ofp_ctors_normalize_flow_get, _mul_nbapi.c_ofp_ctors_normalize_flow_set)
    __swig_setmethods__["group_validate_feat"] = _mul_nbapi.c_ofp_ctors_group_validate_feat_set
    __swig_getmethods__["group_validate_feat"] = _mul_nbapi.c_ofp_ctors_group_validate_feat_get
    if _newclass:group_validate_feat = _swig_property(_mul_nbapi.c_ofp_ctors_group_validate_feat_get, _mul_nbapi.c_ofp_ctors_group_validate_feat_set)
    __swig_setmethods__["meter_validate_feat"] = _mul_nbapi.c_ofp_ctors_meter_validate_feat_set
    __swig_getmethods__["meter_validate_feat"] = _mul_nbapi.c_ofp_ctors_meter_validate_feat_get
    if _newclass:meter_validate_feat = _swig_property(_mul_nbapi.c_ofp_ctors_meter_validate_feat_get, _mul_nbapi.c_ofp_ctors_meter_validate_feat_set)
    __swig_setmethods__["dump_flow"] = _mul_nbapi.c_ofp_ctors_dump_flow_set
    __swig_getmethods__["dump_flow"] = _mul_nbapi.c_ofp_ctors_dump_flow_get
    if _newclass:dump_flow = _swig_property(_mul_nbapi.c_ofp_ctors_dump_flow_get, _mul_nbapi.c_ofp_ctors_dump_flow_set)
    __swig_setmethods__["dump_acts"] = _mul_nbapi.c_ofp_ctors_dump_acts_set
    __swig_getmethods__["dump_acts"] = _mul_nbapi.c_ofp_ctors_dump_acts_get
    if _newclass:dump_acts = _swig_property(_mul_nbapi.c_ofp_ctors_dump_acts_get, _mul_nbapi.c_ofp_ctors_dump_acts_set)
    __swig_setmethods__["dump_of_msg"] = _mul_nbapi.c_ofp_ctors_dump_of_msg_set
    __swig_getmethods__["dump_of_msg"] = _mul_nbapi.c_ofp_ctors_dump_of_msg_get
    if _newclass:dump_of_msg = _swig_property(_mul_nbapi.c_ofp_ctors_dump_of_msg_get, _mul_nbapi.c_ofp_ctors_dump_of_msg_set)
    __swig_setmethods__["multi_table_support"] = _mul_nbapi.c_ofp_ctors_multi_table_support_set
    __swig_getmethods__["multi_table_support"] = _mul_nbapi.c_ofp_ctors_multi_table_support_get
    if _newclass:multi_table_support = _swig_property(_mul_nbapi.c_ofp_ctors_multi_table_support_get, _mul_nbapi.c_ofp_ctors_multi_table_support_set)
    __swig_setmethods__["flow_stats_support"] = _mul_nbapi.c_ofp_ctors_flow_stats_support_set
    __swig_getmethods__["flow_stats_support"] = _mul_nbapi.c_ofp_ctors_flow_stats_support_get
    if _newclass:flow_stats_support = _swig_property(_mul_nbapi.c_ofp_ctors_flow_stats_support_get, _mul_nbapi.c_ofp_ctors_flow_stats_support_set)
    __swig_setmethods__["group_stats_support"] = _mul_nbapi.c_ofp_ctors_group_stats_support_set
    __swig_getmethods__["group_stats_support"] = _mul_nbapi.c_ofp_ctors_group_stats_support_get
    if _newclass:group_stats_support = _swig_property(_mul_nbapi.c_ofp_ctors_group_stats_support_get, _mul_nbapi.c_ofp_ctors_group_stats_support_set)
    __swig_setmethods__["table_stats_support"] = _mul_nbapi.c_ofp_ctors_table_stats_support_set
    __swig_getmethods__["table_stats_support"] = _mul_nbapi.c_ofp_ctors_table_stats_support_get
    if _newclass:table_stats_support = _swig_property(_mul_nbapi.c_ofp_ctors_table_stats_support_get, _mul_nbapi.c_ofp_ctors_table_stats_support_set)
    __swig_setmethods__["act_modify_uflow"] = _mul_nbapi.c_ofp_ctors_act_modify_uflow_set
    __swig_getmethods__["act_modify_uflow"] = _mul_nbapi.c_ofp_ctors_act_modify_uflow_get
    if _newclass:act_modify_uflow = _swig_property(_mul_nbapi.c_ofp_ctors_act_modify_uflow_get, _mul_nbapi.c_ofp_ctors_act_modify_uflow_set)
    def __init__(self): 
        this = _mul_nbapi.new_c_ofp_ctors()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_c_ofp_ctors
    __del__ = lambda self : None;
c_ofp_ctors_swigregister = _mul_nbapi.c_ofp_ctors_swigregister
c_ofp_ctors_swigregister(c_ofp_ctors)


def of_switch_desc_dump(*args):
  return _mul_nbapi.of_switch_desc_dump(*args)
of_switch_desc_dump = _mul_nbapi.of_switch_desc_dump

def of_mact_alloc(*args):
  return _mul_nbapi.of_mact_alloc(*args)
of_mact_alloc = _mul_nbapi.of_mact_alloc

def of_mact_free(*args):
  return _mul_nbapi.of_mact_free(*args)
of_mact_free = _mul_nbapi.of_mact_free

def of_capabilities_tostr(*args):
  return _mul_nbapi.of_capabilities_tostr(*args)
of_capabilities_tostr = _mul_nbapi.of_capabilities_tostr

def of_switch_supports_flow_stats(*args):
  return _mul_nbapi.of_switch_supports_flow_stats(*args)
of_switch_supports_flow_stats = _mul_nbapi.of_switch_supports_flow_stats

def __of_match_flows(*args):
  return _mul_nbapi.__of_match_flows(*args)
__of_match_flows = _mul_nbapi.__of_match_flows

def of_match_flows_prio(*args):
  return _mul_nbapi.of_match_flows_prio(*args)
of_match_flows_prio = _mul_nbapi.of_match_flows_prio

def of_check_flow_wildcard_generic(*args):
  return _mul_nbapi.of_check_flow_wildcard_generic(*args)
of_check_flow_wildcard_generic = _mul_nbapi.of_check_flow_wildcard_generic

def of_dump_flow_generic_cmd(*args):
  return _mul_nbapi.of_dump_flow_generic_cmd(*args)
of_dump_flow_generic_cmd = _mul_nbapi.of_dump_flow_generic_cmd

def of_dump_flow_generic(*args):
  return _mul_nbapi.of_dump_flow_generic(*args)
of_dump_flow_generic = _mul_nbapi.of_dump_flow_generic

def of_dump_flow_all(*args):
  return _mul_nbapi.of_dump_flow_all(*args)
of_dump_flow_all = _mul_nbapi.of_dump_flow_all

def of_prep_msg_common(*args):
  return _mul_nbapi.of_prep_msg_common(*args)
of_prep_msg_common = _mul_nbapi.of_prep_msg_common

def of_role_to_str(*args):
  return _mul_nbapi.of_role_to_str(*args)
of_role_to_str = _mul_nbapi.of_role_to_str

def of_make_action_output(*args):
  return _mul_nbapi.of_make_action_output(*args)
of_make_action_output = _mul_nbapi.of_make_action_output

def of_make_action_set_vid(*args):
  return _mul_nbapi.of_make_action_set_vid(*args)
of_make_action_set_vid = _mul_nbapi.of_make_action_set_vid

def of_make_action_strip_vlan(*args):
  return _mul_nbapi.of_make_action_strip_vlan(*args)
of_make_action_strip_vlan = _mul_nbapi.of_make_action_strip_vlan

def of_make_action_set_dmac(*args):
  return _mul_nbapi.of_make_action_set_dmac(*args)
of_make_action_set_dmac = _mul_nbapi.of_make_action_set_dmac

def of_make_action_set_nw_saddr(*args):
  return _mul_nbapi.of_make_action_set_nw_saddr(*args)
of_make_action_set_nw_saddr = _mul_nbapi.of_make_action_set_nw_saddr

def of_make_action_set_nw_daddr(*args):
  return _mul_nbapi.of_make_action_set_nw_daddr(*args)
of_make_action_set_nw_daddr = _mul_nbapi.of_make_action_set_nw_daddr

def of_make_action_set_vlan_pcp(*args):
  return _mul_nbapi.of_make_action_set_vlan_pcp(*args)
of_make_action_set_vlan_pcp = _mul_nbapi.of_make_action_set_vlan_pcp

def of_make_action_set_smac(*args):
  return _mul_nbapi.of_make_action_set_smac(*args)
of_make_action_set_smac = _mul_nbapi.of_make_action_set_smac

def of_make_action_set_nw_tos(*args):
  return _mul_nbapi.of_make_action_set_nw_tos(*args)
of_make_action_set_nw_tos = _mul_nbapi.of_make_action_set_nw_tos

def of_make_action_set_tp_udp_sport(*args):
  return _mul_nbapi.of_make_action_set_tp_udp_sport(*args)
of_make_action_set_tp_udp_sport = _mul_nbapi.of_make_action_set_tp_udp_sport

def of_make_action_set_tp_udp_dport(*args):
  return _mul_nbapi.of_make_action_set_tp_udp_dport(*args)
of_make_action_set_tp_udp_dport = _mul_nbapi.of_make_action_set_tp_udp_dport

def of_make_action_set_tp_tcp_sport(*args):
  return _mul_nbapi.of_make_action_set_tp_tcp_sport(*args)
of_make_action_set_tp_tcp_sport = _mul_nbapi.of_make_action_set_tp_tcp_sport

def of_make_action_set_tp_tcp_dport(*args):
  return _mul_nbapi.of_make_action_set_tp_tcp_dport(*args)
of_make_action_set_tp_tcp_dport = _mul_nbapi.of_make_action_set_tp_tcp_dport

def of10_parse_actions(*args):
  return _mul_nbapi.of10_parse_actions(*args)
of10_parse_actions = _mul_nbapi.of10_parse_actions

def of10_dump_actions(*args):
  return _mul_nbapi.of10_dump_actions(*args)
of10_dump_actions = _mul_nbapi.of10_dump_actions

def of10_dump_actions_cmd(*args):
  return _mul_nbapi.of10_dump_actions_cmd(*args)
of10_dump_actions_cmd = _mul_nbapi.of10_dump_actions_cmd

def of_dump_flow(*args):
  return _mul_nbapi.of_dump_flow(*args)
of_dump_flow = _mul_nbapi.of_dump_flow

def of10_dump_flow(*args):
  return _mul_nbapi.of10_dump_flow(*args)
of10_dump_flow = _mul_nbapi.of10_dump_flow

def of10_flow_correction(*args):
  return _mul_nbapi.of10_flow_correction(*args)
of10_flow_correction = _mul_nbapi.of10_flow_correction

def of_validate_actions(*args):
  return _mul_nbapi.of_validate_actions(*args)
of_validate_actions = _mul_nbapi.of_validate_actions

def of_dump_wildcards(*args):
  return _mul_nbapi.of_dump_wildcards(*args)
of_dump_wildcards = _mul_nbapi.of_dump_wildcards

def of_prep_msg(*args):
  return _mul_nbapi.of_prep_msg(*args)
of_prep_msg = _mul_nbapi.of_prep_msg

def of_prep_hello():
  return _mul_nbapi.of_prep_hello()
of_prep_hello = _mul_nbapi.of_prep_hello

def of_prep_echo():
  return _mul_nbapi.of_prep_echo()
of_prep_echo = _mul_nbapi.of_prep_echo

def of_prep_echo_reply(*args):
  return _mul_nbapi.of_prep_echo_reply(*args)
of_prep_echo_reply = _mul_nbapi.of_prep_echo_reply

def of_prep_features_request():
  return _mul_nbapi.of_prep_features_request()
of_prep_features_request = _mul_nbapi.of_prep_features_request

def of_prep_set_config(*args):
  return _mul_nbapi.of_prep_set_config(*args)
of_prep_set_config = _mul_nbapi.of_prep_set_config

def of_prep_flow_mod(*args):
  return _mul_nbapi.of_prep_flow_mod(*args)
of_prep_flow_mod = _mul_nbapi.of_prep_flow_mod

def of_prep_flow_add_msg(*args):
  return _mul_nbapi.of_prep_flow_add_msg(*args)
of_prep_flow_add_msg = _mul_nbapi.of_prep_flow_add_msg

def of_prep_flow_del_msg(*args):
  return _mul_nbapi.of_prep_flow_del_msg(*args)
of_prep_flow_del_msg = _mul_nbapi.of_prep_flow_del_msg

def of_prep_pkt_out_msg(*args):
  return _mul_nbapi.of_prep_pkt_out_msg(*args)
of_prep_pkt_out_msg = _mul_nbapi.of_prep_pkt_out_msg

def of_prep_flow_stat_msg(*args):
  return _mul_nbapi.of_prep_flow_stat_msg(*args)
of_prep_flow_stat_msg = _mul_nbapi.of_prep_flow_stat_msg

def of_prep_port_stat_msg(*args):
  return _mul_nbapi.of_prep_port_stat_msg(*args)
of_prep_port_stat_msg = _mul_nbapi.of_prep_port_stat_msg

def of_prep_q_get_config(*args):
  return _mul_nbapi.of_prep_q_get_config(*args)
of_prep_q_get_config = _mul_nbapi.of_prep_q_get_config

def of_prep_vendor_msg(*args):
  return _mul_nbapi.of_prep_vendor_msg(*args)
of_prep_vendor_msg = _mul_nbapi.of_prep_vendor_msg

def of10_mask_to_wc(*args):
  return _mul_nbapi.of10_mask_to_wc(*args)
of10_mask_to_wc = _mul_nbapi.of10_mask_to_wc

def of10_wc_to_mask(*args):
  return _mul_nbapi.of10_wc_to_mask(*args)
of10_wc_to_mask = _mul_nbapi.of10_wc_to_mask

def of131_capabilities_tostr(*args):
  return _mul_nbapi.of131_capabilities_tostr(*args)
of131_capabilities_tostr = _mul_nbapi.of131_capabilities_tostr

def of131_prep_hello_msg():
  return _mul_nbapi.of131_prep_hello_msg()
of131_prep_hello_msg = _mul_nbapi.of131_prep_hello_msg

def of131_prep_echo_msg():
  return _mul_nbapi.of131_prep_echo_msg()
of131_prep_echo_msg = _mul_nbapi.of131_prep_echo_msg

def of131_prep_echo_reply_msg(*args):
  return _mul_nbapi.of131_prep_echo_reply_msg(*args)
of131_prep_echo_reply_msg = _mul_nbapi.of131_prep_echo_reply_msg

def of131_prep_features_request_msg():
  return _mul_nbapi.of131_prep_features_request_msg()
of131_prep_features_request_msg = _mul_nbapi.of131_prep_features_request_msg

def of131_prep_pkt_out_msg(*args):
  return _mul_nbapi.of131_prep_pkt_out_msg(*args)
of131_prep_pkt_out_msg = _mul_nbapi.of131_prep_pkt_out_msg

def of131_prep_flow_add_msg(*args):
  return _mul_nbapi.of131_prep_flow_add_msg(*args)
of131_prep_flow_add_msg = _mul_nbapi.of131_prep_flow_add_msg

def of131_prep_barrier_req():
  return _mul_nbapi.of131_prep_barrier_req()
of131_prep_barrier_req = _mul_nbapi.of131_prep_barrier_req

def of131_prep_flow_del_msg(*args):
  return _mul_nbapi.of131_prep_flow_del_msg(*args)
of131_prep_flow_del_msg = _mul_nbapi.of131_prep_flow_del_msg

def of131_prep_flow_stat_msg(*args):
  return _mul_nbapi.of131_prep_flow_stat_msg(*args)
of131_prep_flow_stat_msg = _mul_nbapi.of131_prep_flow_stat_msg

def of131_prep_queue_stat_msg(*args):
  return _mul_nbapi.of131_prep_queue_stat_msg(*args)
of131_prep_queue_stat_msg = _mul_nbapi.of131_prep_queue_stat_msg

def of131_prep_group_add_msg(*args):
  return _mul_nbapi.of131_prep_group_add_msg(*args)
of131_prep_group_add_msg = _mul_nbapi.of131_prep_group_add_msg

def of131_prep_group_del_msg(*args):
  return _mul_nbapi.of131_prep_group_del_msg(*args)
of131_prep_group_del_msg = _mul_nbapi.of131_prep_group_del_msg

def of131_prep_meter_add_msg(*args):
  return _mul_nbapi.of131_prep_meter_add_msg(*args)
of131_prep_meter_add_msg = _mul_nbapi.of131_prep_meter_add_msg

def of131_prep_meter_del_msg(*args):
  return _mul_nbapi.of131_prep_meter_del_msg(*args)
of131_prep_meter_del_msg = _mul_nbapi.of131_prep_meter_del_msg

def of131_prep_port_mod_msg(*args):
  return _mul_nbapi.of131_prep_port_mod_msg(*args)
of131_prep_port_mod_msg = _mul_nbapi.of131_prep_port_mod_msg

def of131_prep_async_config(*args):
  return _mul_nbapi.of131_prep_async_config(*args)
of131_prep_async_config = _mul_nbapi.of131_prep_async_config

def of131_prep_mpart_msg(*args):
  return _mul_nbapi.of131_prep_mpart_msg(*args)
of131_prep_mpart_msg = _mul_nbapi.of131_prep_mpart_msg

def of131_group_validate_parms(*args):
  return _mul_nbapi.of131_group_validate_parms(*args)
of131_group_validate_parms = _mul_nbapi.of131_group_validate_parms

def of131_ofpx_match_to_flow(*args):
  return _mul_nbapi.of131_ofpx_match_to_flow(*args)
of131_ofpx_match_to_flow = _mul_nbapi.of131_ofpx_match_to_flow

def of131_prep_set_config_msg(*args):
  return _mul_nbapi.of131_prep_set_config_msg(*args)
of131_prep_set_config_msg = _mul_nbapi.of131_prep_set_config_msg

def of131_prep_role_request_msg(*args):
  return _mul_nbapi.of131_prep_role_request_msg(*args)
of131_prep_role_request_msg = _mul_nbapi.of131_prep_role_request_msg

def of131_set_inst_action_type(*args):
  return _mul_nbapi.of131_set_inst_action_type(*args)
of131_set_inst_action_type = _mul_nbapi.of131_set_inst_action_type

def of131_make_inst_actions(*args):
  return _mul_nbapi.of131_make_inst_actions(*args)
of131_make_inst_actions = _mul_nbapi.of131_make_inst_actions

def of131_fini_inst_actions(*args):
  return _mul_nbapi.of131_fini_inst_actions(*args)
of131_fini_inst_actions = _mul_nbapi.of131_fini_inst_actions

def of131_make_inst_goto(*args):
  return _mul_nbapi.of131_make_inst_goto(*args)
of131_make_inst_goto = _mul_nbapi.of131_make_inst_goto

def of131_make_inst_meter(*args):
  return _mul_nbapi.of131_make_inst_meter(*args)
of131_make_inst_meter = _mul_nbapi.of131_make_inst_meter

def of131_make_inst_wr_meta(*args):
  return _mul_nbapi.of131_make_inst_wr_meta(*args)
of131_make_inst_wr_meta = _mul_nbapi.of131_make_inst_wr_meta

def of131_make_inst_clear_act(*args):
  return _mul_nbapi.of131_make_inst_clear_act(*args)
of131_make_inst_clear_act = _mul_nbapi.of131_make_inst_clear_act

def of131_make_action_output(*args):
  return _mul_nbapi.of131_make_action_output(*args)
of131_make_action_output = _mul_nbapi.of131_make_action_output

def of131_make_action_push(*args):
  return _mul_nbapi.of131_make_action_push(*args)
of131_make_action_push = _mul_nbapi.of131_make_action_push

def of131_make_action_strip_mpls(*args):
  return _mul_nbapi.of131_make_action_strip_mpls(*args)
of131_make_action_strip_mpls = _mul_nbapi.of131_make_action_strip_mpls

def of131_make_action_set_mpls_ttl(*args):
  return _mul_nbapi.of131_make_action_set_mpls_ttl(*args)
of131_make_action_set_mpls_ttl = _mul_nbapi.of131_make_action_set_mpls_ttl

def of131_make_action_dec_mpls_ttl(*args):
  return _mul_nbapi.of131_make_action_dec_mpls_ttl(*args)
of131_make_action_dec_mpls_ttl = _mul_nbapi.of131_make_action_dec_mpls_ttl

def of131_make_action_set_ip_ttl(*args):
  return _mul_nbapi.of131_make_action_set_ip_ttl(*args)
of131_make_action_set_ip_ttl = _mul_nbapi.of131_make_action_set_ip_ttl

def of131_make_action_dec_ip_ttl(*args):
  return _mul_nbapi.of131_make_action_dec_ip_ttl(*args)
of131_make_action_dec_ip_ttl = _mul_nbapi.of131_make_action_dec_ip_ttl

def of131_make_action_cp_ttl(*args):
  return _mul_nbapi.of131_make_action_cp_ttl(*args)
of131_make_action_cp_ttl = _mul_nbapi.of131_make_action_cp_ttl

def of131_make_action_strip_pbb(*args):
  return _mul_nbapi.of131_make_action_strip_pbb(*args)
of131_make_action_strip_pbb = _mul_nbapi.of131_make_action_strip_pbb

def of131_make_action_set_vid(*args):
  return _mul_nbapi.of131_make_action_set_vid(*args)
of131_make_action_set_vid = _mul_nbapi.of131_make_action_set_vid

def of131_make_action_strip_vlan(*args):
  return _mul_nbapi.of131_make_action_strip_vlan(*args)
of131_make_action_strip_vlan = _mul_nbapi.of131_make_action_strip_vlan

def of131_make_action_set_vlan_pcp(*args):
  return _mul_nbapi.of131_make_action_set_vlan_pcp(*args)
of131_make_action_set_vlan_pcp = _mul_nbapi.of131_make_action_set_vlan_pcp

def of131_make_action_set_mpls_label(*args):
  return _mul_nbapi.of131_make_action_set_mpls_label(*args)
of131_make_action_set_mpls_label = _mul_nbapi.of131_make_action_set_mpls_label

def of131_make_action_set_mpls_tc(*args):
  return _mul_nbapi.of131_make_action_set_mpls_tc(*args)
of131_make_action_set_mpls_tc = _mul_nbapi.of131_make_action_set_mpls_tc

def of131_make_action_set_mpls_bos(*args):
  return _mul_nbapi.of131_make_action_set_mpls_bos(*args)
of131_make_action_set_mpls_bos = _mul_nbapi.of131_make_action_set_mpls_bos

def of131_make_action_set_dmac(*args):
  return _mul_nbapi.of131_make_action_set_dmac(*args)
of131_make_action_set_dmac = _mul_nbapi.of131_make_action_set_dmac

def of131_make_action_set_smac(*args):
  return _mul_nbapi.of131_make_action_set_smac(*args)
of131_make_action_set_smac = _mul_nbapi.of131_make_action_set_smac

def of131_make_action_set_eth_type(*args):
  return _mul_nbapi.of131_make_action_set_eth_type(*args)
of131_make_action_set_eth_type = _mul_nbapi.of131_make_action_set_eth_type

def of131_make_action_set_ipv4_src(*args):
  return _mul_nbapi.of131_make_action_set_ipv4_src(*args)
of131_make_action_set_ipv4_src = _mul_nbapi.of131_make_action_set_ipv4_src

def of131_make_action_set_ipv4_dst(*args):
  return _mul_nbapi.of131_make_action_set_ipv4_dst(*args)
of131_make_action_set_ipv4_dst = _mul_nbapi.of131_make_action_set_ipv4_dst

def of131_make_action_set_ipv6_src(*args):
  return _mul_nbapi.of131_make_action_set_ipv6_src(*args)
of131_make_action_set_ipv6_src = _mul_nbapi.of131_make_action_set_ipv6_src

def of131_make_action_set_ipv6_dst(*args):
  return _mul_nbapi.of131_make_action_set_ipv6_dst(*args)
of131_make_action_set_ipv6_dst = _mul_nbapi.of131_make_action_set_ipv6_dst

def of131_make_action_set_nw_tos(*args):
  return _mul_nbapi.of131_make_action_set_nw_tos(*args)
of131_make_action_set_nw_tos = _mul_nbapi.of131_make_action_set_nw_tos

def of131_make_action_set_tp_udp_sport(*args):
  return _mul_nbapi.of131_make_action_set_tp_udp_sport(*args)
of131_make_action_set_tp_udp_sport = _mul_nbapi.of131_make_action_set_tp_udp_sport

def of131_make_action_set_tp_udp_dport(*args):
  return _mul_nbapi.of131_make_action_set_tp_udp_dport(*args)
of131_make_action_set_tp_udp_dport = _mul_nbapi.of131_make_action_set_tp_udp_dport

def of131_make_action_set_tp_tcp_sport(*args):
  return _mul_nbapi.of131_make_action_set_tp_tcp_sport(*args)
of131_make_action_set_tp_tcp_sport = _mul_nbapi.of131_make_action_set_tp_tcp_sport

def of131_make_action_set_tp_tcp_dport(*args):
  return _mul_nbapi.of131_make_action_set_tp_tcp_dport(*args)
of131_make_action_set_tp_tcp_dport = _mul_nbapi.of131_make_action_set_tp_tcp_dport

def of131_make_action_group(*args):
  return _mul_nbapi.of131_make_action_group(*args)
of131_make_action_group = _mul_nbapi.of131_make_action_group

def of131_make_action_set_queue(*args):
  return _mul_nbapi.of131_make_action_set_queue(*args)
of131_make_action_set_queue = _mul_nbapi.of131_make_action_set_queue

def of131_make_action_set_tunnel_id(*args):
  return _mul_nbapi.of131_make_action_set_tunnel_id(*args)
of131_make_action_set_tunnel_id = _mul_nbapi.of131_make_action_set_tunnel_id

def of131_make_meter_band_drop(*args):
  return _mul_nbapi.of131_make_meter_band_drop(*args)
of131_make_meter_band_drop = _mul_nbapi.of131_make_meter_band_drop

def of131_make_meter_band_mark_dscp(*args):
  return _mul_nbapi.of131_make_meter_band_mark_dscp(*args)
of131_make_meter_band_mark_dscp = _mul_nbapi.of131_make_meter_band_mark_dscp

def of131_parse_actions(*args):
  return _mul_nbapi.of131_parse_actions(*args)
of131_parse_actions = _mul_nbapi.of131_parse_actions

def of131_parse_act_set_field_tlv(*args):
  return _mul_nbapi.of131_parse_act_set_field_tlv(*args)
of131_parse_act_set_field_tlv = _mul_nbapi.of131_parse_act_set_field_tlv

def of131_parse_instructions(*args):
  return _mul_nbapi.of131_parse_instructions(*args)
of131_parse_instructions = _mul_nbapi.of131_parse_instructions

def of131_validate_actions(*args):
  return _mul_nbapi.of131_validate_actions(*args)
of131_validate_actions = _mul_nbapi.of131_validate_actions

def of131_dump_actions(*args):
  return _mul_nbapi.of131_dump_actions(*args)
of131_dump_actions = _mul_nbapi.of131_dump_actions

def of131_dump_actions_cmd(*args):
  return _mul_nbapi.of131_dump_actions_cmd(*args)
of131_dump_actions_cmd = _mul_nbapi.of131_dump_actions_cmd

def of131_dump_queue_stats(*args):
  return _mul_nbapi.of131_dump_queue_stats(*args)
of131_dump_queue_stats = _mul_nbapi.of131_dump_queue_stats

def of131_supports_multi_tables(*args):
  return _mul_nbapi.of131_supports_multi_tables(*args)
of131_supports_multi_tables = _mul_nbapi.of131_supports_multi_tables

def of131_flow_normalize(*args):
  return _mul_nbapi.of131_flow_normalize(*args)
of131_flow_normalize = _mul_nbapi.of131_flow_normalize

def of131_group_features_dump(*args):
  return _mul_nbapi.of131_group_features_dump(*args)
of131_group_features_dump = _mul_nbapi.of131_group_features_dump

def of131_meter_features_dump(*args):
  return _mul_nbapi.of131_meter_features_dump(*args)
of131_meter_features_dump = _mul_nbapi.of131_meter_features_dump

def of131_group_validate_feat(*args):
  return _mul_nbapi.of131_group_validate_feat(*args)
of131_group_validate_feat = _mul_nbapi.of131_group_validate_feat

def of131_meter_validate_feat(*args):
  return _mul_nbapi.of131_meter_validate_feat(*args)
of131_meter_validate_feat = _mul_nbapi.of131_meter_validate_feat

def of131_table_features_dump(*args):
  return _mul_nbapi.of131_table_features_dump(*args)
of131_table_features_dump = _mul_nbapi.of131_table_features_dump

def of131_switch_supports_group_stats(*args):
  return _mul_nbapi.of131_switch_supports_group_stats(*args)
of131_switch_supports_group_stats = _mul_nbapi.of131_switch_supports_group_stats

def of131_switch_supports_flow_stats(*args):
  return _mul_nbapi.of131_switch_supports_flow_stats(*args)
of131_switch_supports_flow_stats = _mul_nbapi.of131_switch_supports_flow_stats

def of131_switch_supports_table_stats(*args):
  return _mul_nbapi.of131_switch_supports_table_stats(*args)
of131_switch_supports_table_stats = _mul_nbapi.of131_switch_supports_table_stats

def of131_prep_group_stat_req(*args):
  return _mul_nbapi.of131_prep_group_stat_req(*args)
of131_prep_group_stat_req = _mul_nbapi.of131_prep_group_stat_req

def of131_prep_meter_stat_req(*args):
  return _mul_nbapi.of131_prep_meter_stat_req(*args)
of131_prep_meter_stat_req = _mul_nbapi.of131_prep_meter_stat_req

def of131_prep_meter_config_req(*args):
  return _mul_nbapi.of131_prep_meter_config_req(*args)
of131_prep_meter_config_req = _mul_nbapi.of131_prep_meter_config_req

def of131_prep_port_stat_req(*args):
  return _mul_nbapi.of131_prep_port_stat_req(*args)
of131_prep_port_stat_req = _mul_nbapi.of131_prep_port_stat_req

def of131_prep_q_get_config(*args):
  return _mul_nbapi.of131_prep_q_get_config(*args)
of131_prep_q_get_config = _mul_nbapi.of131_prep_q_get_config

def of131_dump_msg(*args):
  return _mul_nbapi.of131_dump_msg(*args)
of131_dump_msg = _mul_nbapi.of131_dump_msg

def of131_port_stats_dump(*args):
  return _mul_nbapi.of131_port_stats_dump(*args)
of131_port_stats_dump = _mul_nbapi.of131_port_stats_dump

def of_port_stats_dump(*args):
  return _mul_nbapi.of_port_stats_dump(*args)
of_port_stats_dump = _mul_nbapi.of_port_stats_dump

def ofp131_dump_port_details(*args):
  return _mul_nbapi.ofp131_dump_port_details(*args)
ofp131_dump_port_details = _mul_nbapi.ofp131_dump_port_details

def of131_modify_uflow(*args):
  return _mul_nbapi.of131_modify_uflow(*args)
of131_modify_uflow = _mul_nbapi.of131_modify_uflow

def ofp_dump_port_details(*args):
  return _mul_nbapi.ofp_dump_port_details(*args)
ofp_dump_port_details = _mul_nbapi.ofp_dump_port_details

def ofp_convert_flow_endian_hton(*args):
  return _mul_nbapi.ofp_convert_flow_endian_hton(*args)
ofp_convert_flow_endian_hton = _mul_nbapi.ofp_convert_flow_endian_hton

def of_prep_port_mod_msg(*args):
  return _mul_nbapi.of_prep_port_mod_msg(*args)
of_prep_port_mod_msg = _mul_nbapi.of_prep_port_mod_msg

def of140_prep_hello_msg():
  return _mul_nbapi.of140_prep_hello_msg()
of140_prep_hello_msg = _mul_nbapi.of140_prep_hello_msg

def of140_prep_echo_msg():
  return _mul_nbapi.of140_prep_echo_msg()
of140_prep_echo_msg = _mul_nbapi.of140_prep_echo_msg

def of140_prep_echo_reply_msg(*args):
  return _mul_nbapi.of140_prep_echo_reply_msg(*args)
of140_prep_echo_reply_msg = _mul_nbapi.of140_prep_echo_reply_msg

def of140_prep_features_request_msg():
  return _mul_nbapi.of140_prep_features_request_msg()
of140_prep_features_request_msg = _mul_nbapi.of140_prep_features_request_msg

def of140_prep_mpart_msg(*args):
  return _mul_nbapi.of140_prep_mpart_msg(*args)
of140_prep_mpart_msg = _mul_nbapi.of140_prep_mpart_msg

def of140_prep_role_request_msg(*args):
  return _mul_nbapi.of140_prep_role_request_msg(*args)
of140_prep_role_request_msg = _mul_nbapi.of140_prep_role_request_msg

def ofp_dump_port_type(*args):
  return _mul_nbapi.ofp_dump_port_type(*args)
ofp_dump_port_type = _mul_nbapi.ofp_dump_port_type

def ofp_dump_port_speed(*args):
  return _mul_nbapi.ofp_dump_port_speed(*args)
ofp_dump_port_speed = _mul_nbapi.ofp_dump_port_speed

def of140_prep_flow_add_msg(*args):
  return _mul_nbapi.of140_prep_flow_add_msg(*args)
of140_prep_flow_add_msg = _mul_nbapi.of140_prep_flow_add_msg

def of140_prep_flow_del_msg(*args):
  return _mul_nbapi.of140_prep_flow_del_msg(*args)
of140_prep_flow_del_msg = _mul_nbapi.of140_prep_flow_del_msg

def of140_prep_flow_stat_msg(*args):
  return _mul_nbapi.of140_prep_flow_stat_msg(*args)
of140_prep_flow_stat_msg = _mul_nbapi.of140_prep_flow_stat_msg

def of140_prep_queue_stat_msg(*args):
  return _mul_nbapi.of140_prep_queue_stat_msg(*args)
of140_prep_queue_stat_msg = _mul_nbapi.of140_prep_queue_stat_msg

def of140_prep_group_stat_req(*args):
  return _mul_nbapi.of140_prep_group_stat_req(*args)
of140_prep_group_stat_req = _mul_nbapi.of140_prep_group_stat_req

def of140_prep_meter_stat_req(*args):
  return _mul_nbapi.of140_prep_meter_stat_req(*args)
of140_prep_meter_stat_req = _mul_nbapi.of140_prep_meter_stat_req

def of140_prep_meter_config_req(*args):
  return _mul_nbapi.of140_prep_meter_config_req(*args)
of140_prep_meter_config_req = _mul_nbapi.of140_prep_meter_config_req

def of140_prep_port_stat_req(*args):
  return _mul_nbapi.of140_prep_port_stat_req(*args)
of140_prep_port_stat_req = _mul_nbapi.of140_prep_port_stat_req

def of140_prep_group_add_msg(*args):
  return _mul_nbapi.of140_prep_group_add_msg(*args)
of140_prep_group_add_msg = _mul_nbapi.of140_prep_group_add_msg

def of140_prep_group_del_msg(*args):
  return _mul_nbapi.of140_prep_group_del_msg(*args)
of140_prep_group_del_msg = _mul_nbapi.of140_prep_group_del_msg

def of140_prep_meter_add_msg(*args):
  return _mul_nbapi.of140_prep_meter_add_msg(*args)
of140_prep_meter_add_msg = _mul_nbapi.of140_prep_meter_add_msg

def of140_prep_meter_del_msg(*args):
  return _mul_nbapi.of140_prep_meter_del_msg(*args)
of140_prep_meter_del_msg = _mul_nbapi.of140_prep_meter_del_msg

def of140_prep_port_mod_msg(*args):
  return _mul_nbapi.of140_prep_port_mod_msg(*args)
of140_prep_port_mod_msg = _mul_nbapi.of140_prep_port_mod_msg

def of140_port_stats_dump(*args):
  return _mul_nbapi.of140_port_stats_dump(*args)
of140_port_stats_dump = _mul_nbapi.of140_port_stats_dump

def of140_prep_pkt_out_msg(*args):
  return _mul_nbapi.of140_prep_pkt_out_msg(*args)
of140_prep_pkt_out_msg = _mul_nbapi.of140_prep_pkt_out_msg

def of140_prep_barrier_req():
  return _mul_nbapi.of140_prep_barrier_req()
of140_prep_barrier_req = _mul_nbapi.of140_prep_barrier_req

def of140_prep_q_get_config(*args):
  return _mul_nbapi.of140_prep_q_get_config(*args)
of140_prep_q_get_config = _mul_nbapi.of140_prep_q_get_config

def of140_prep_set_config_msg(*args):
  return _mul_nbapi.of140_prep_set_config_msg(*args)
of140_prep_set_config_msg = _mul_nbapi.of140_prep_set_config_msg
HELLO_APP_NAME = _mul_nbapi.HELLO_APP_NAME
MY_CONTROLLER_APP_NAME = _mul_nbapi.MY_CONTROLLER_APP_NAME
FAB_APP_NAME = _mul_nbapi.FAB_APP_NAME
CLI_APP_NAME = _mul_nbapi.CLI_APP_NAME
L2SW_APP_NAME = _mul_nbapi.L2SW_APP_NAME
TR_APP_NAME = _mul_nbapi.TR_APP_NAME
MAKDI_APP_NAME = _mul_nbapi.MAKDI_APP_NAME
FEMTO_APP_NAME = _mul_nbapi.FEMTO_APP_NAME
PRISM_APP_NAME = _mul_nbapi.PRISM_APP_NAME
CONX_APP_NAME = _mul_nbapi.CONX_APP_NAME
DRONE_APP_NAME = _mul_nbapi.DRONE_APP_NAME
FAB_APP_COOKIE = _mul_nbapi.FAB_APP_COOKIE
CLI_APP_COOKIE = _mul_nbapi.CLI_APP_COOKIE
L2SW_APP_COOKIE = _mul_nbapi.L2SW_APP_COOKIE
TR_APP_COOKIE = _mul_nbapi.TR_APP_COOKIE
MAKDI_APP_COOKIE = _mul_nbapi.MAKDI_APP_COOKIE
FEMTO_APP_COOKIE = _mul_nbapi.FEMTO_APP_COOKIE
PRISM_APP_COOKIE = _mul_nbapi.PRISM_APP_COOKIE
CONX_APP_COOKIE = _mul_nbapi.CONX_APP_COOKIE
MUL_MAX_SERVICE_NUM = _mul_nbapi.MUL_MAX_SERVICE_NUM
C_DP_REG = _mul_nbapi.C_DP_REG
C_DP_UNREG = _mul_nbapi.C_DP_UNREG
C_PACKET_IN = _mul_nbapi.C_PACKET_IN
C_PORT_CHANGE = _mul_nbapi.C_PORT_CHANGE
C_FLOW_REMOVED = _mul_nbapi.C_FLOW_REMOVED
C_FLOW_MOD_FAILED = _mul_nbapi.C_FLOW_MOD_FAILED
C_HA_STATE = _mul_nbapi.C_HA_STATE
C_VENDOR_MSG = _mul_nbapi.C_VENDOR_MSG
C_TR_STATUS = _mul_nbapi.C_TR_STATUS
C_GROUP_MOD_FAILED = _mul_nbapi.C_GROUP_MOD_FAILED
C_METER_MOD_FAILED = _mul_nbapi.C_METER_MOD_FAILED
C_EVENT_MAX = _mul_nbapi.C_EVENT_MAX
C_OFP_VERSION = _mul_nbapi.C_OFP_VERSION
C_OFPT_BASE = _mul_nbapi.C_OFPT_BASE
C_OFPT_SWITCH_DELETE = _mul_nbapi.C_OFPT_SWITCH_DELETE
C_OFPT_REG_APP = _mul_nbapi.C_OFPT_REG_APP
C_OFPT_UNREG_APP = _mul_nbapi.C_OFPT_UNREG_APP
C_OFPT_RECONN_APP = _mul_nbapi.C_OFPT_RECONN_APP
C_OFPT_NOCONN_APP = _mul_nbapi.C_OFPT_NOCONN_APP
C_OFPT_SET_FPOPS = _mul_nbapi.C_OFPT_SET_FPOPS
C_OFPT_GROUP_MOD = _mul_nbapi.C_OFPT_GROUP_MOD
C_OFPT_METER_MOD = _mul_nbapi.C_OFPT_METER_MOD
C_OFPT_AUX_CMD = _mul_nbapi.C_OFPT_AUX_CMD
C_OFPT_PORT_MOD = _mul_nbapi.C_OFPT_PORT_MOD
class c_ofp_switch_delete(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, c_ofp_switch_delete, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, c_ofp_switch_delete, name)
    __repr__ = _swig_repr
    __swig_setmethods__["header"] = _mul_nbapi.c_ofp_switch_delete_header_set
    __swig_getmethods__["header"] = _mul_nbapi.c_ofp_switch_delete_header_get
    if _newclass:header = _swig_property(_mul_nbapi.c_ofp_switch_delete_header_get, _mul_nbapi.c_ofp_switch_delete_header_set)
    __swig_setmethods__["datapath_id"] = _mul_nbapi.c_ofp_switch_delete_datapath_id_set
    __swig_getmethods__["datapath_id"] = _mul_nbapi.c_ofp_switch_delete_datapath_id_get
    if _newclass:datapath_id = _swig_property(_mul_nbapi.c_ofp_switch_delete_datapath_id_get, _mul_nbapi.c_ofp_switch_delete_datapath_id_set)
    __swig_setmethods__["sw_alias"] = _mul_nbapi.c_ofp_switch_delete_sw_alias_set
    __swig_getmethods__["sw_alias"] = _mul_nbapi.c_ofp_switch_delete_sw_alias_get
    if _newclass:sw_alias = _swig_property(_mul_nbapi.c_ofp_switch_delete_sw_alias_get, _mul_nbapi.c_ofp_switch_delete_sw_alias_set)
    __swig_setmethods__["pad"] = _mul_nbapi.c_ofp_switch_delete_pad_set
    __swig_getmethods__["pad"] = _mul_nbapi.c_ofp_switch_delete_pad_get
    if _newclass:pad = _swig_property(_mul_nbapi.c_ofp_switch_delete_pad_get, _mul_nbapi.c_ofp_switch_delete_pad_set)
    def __init__(self): 
        this = _mul_nbapi.new_c_ofp_switch_delete()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_c_ofp_switch_delete
    __del__ = lambda self : None;
c_ofp_switch_delete_swigregister = _mul_nbapi.c_ofp_switch_delete_swigregister
c_ofp_switch_delete_swigregister(c_ofp_switch_delete)
cvar = _mul_nbapi.cvar

class c_ofp_vendor_message(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, c_ofp_vendor_message, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, c_ofp_vendor_message, name)
    __repr__ = _swig_repr
    __swig_setmethods__["header"] = _mul_nbapi.c_ofp_vendor_message_header_set
    __swig_getmethods__["header"] = _mul_nbapi.c_ofp_vendor_message_header_get
    if _newclass:header = _swig_property(_mul_nbapi.c_ofp_vendor_message_header_get, _mul_nbapi.c_ofp_vendor_message_header_set)
    __swig_setmethods__["datapath_id"] = _mul_nbapi.c_ofp_vendor_message_datapath_id_set
    __swig_getmethods__["datapath_id"] = _mul_nbapi.c_ofp_vendor_message_datapath_id_get
    if _newclass:datapath_id = _swig_property(_mul_nbapi.c_ofp_vendor_message_datapath_id_get, _mul_nbapi.c_ofp_vendor_message_datapath_id_set)
    __swig_setmethods__["sw_alias"] = _mul_nbapi.c_ofp_vendor_message_sw_alias_set
    __swig_getmethods__["sw_alias"] = _mul_nbapi.c_ofp_vendor_message_sw_alias_get
    if _newclass:sw_alias = _swig_property(_mul_nbapi.c_ofp_vendor_message_sw_alias_get, _mul_nbapi.c_ofp_vendor_message_sw_alias_set)
    __swig_setmethods__["pad"] = _mul_nbapi.c_ofp_vendor_message_pad_set
    __swig_getmethods__["pad"] = _mul_nbapi.c_ofp_vendor_message_pad_get
    if _newclass:pad = _swig_property(_mul_nbapi.c_ofp_vendor_message_pad_get, _mul_nbapi.c_ofp_vendor_message_pad_set)
    __swig_setmethods__["data"] = _mul_nbapi.c_ofp_vendor_message_data_set
    __swig_getmethods__["data"] = _mul_nbapi.c_ofp_vendor_message_data_get
    if _newclass:data = _swig_property(_mul_nbapi.c_ofp_vendor_message_data_get, _mul_nbapi.c_ofp_vendor_message_data_set)
    def __init__(self): 
        this = _mul_nbapi.new_c_ofp_vendor_message()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_c_ofp_vendor_message
    __del__ = lambda self : None;
c_ofp_vendor_message_swigregister = _mul_nbapi.c_ofp_vendor_message_swigregister
c_ofp_vendor_message_swigregister(c_ofp_vendor_message)

class c_ofp_send_vendor_message(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, c_ofp_send_vendor_message, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, c_ofp_send_vendor_message, name)
    __repr__ = _swig_repr
    __swig_setmethods__["header"] = _mul_nbapi.c_ofp_send_vendor_message_header_set
    __swig_getmethods__["header"] = _mul_nbapi.c_ofp_send_vendor_message_header_get
    if _newclass:header = _swig_property(_mul_nbapi.c_ofp_send_vendor_message_header_get, _mul_nbapi.c_ofp_send_vendor_message_header_set)
    __swig_setmethods__["datapath_id"] = _mul_nbapi.c_ofp_send_vendor_message_datapath_id_set
    __swig_getmethods__["datapath_id"] = _mul_nbapi.c_ofp_send_vendor_message_datapath_id_get
    if _newclass:datapath_id = _swig_property(_mul_nbapi.c_ofp_send_vendor_message_datapath_id_get, _mul_nbapi.c_ofp_send_vendor_message_datapath_id_set)
    __swig_setmethods__["vendor_id"] = _mul_nbapi.c_ofp_send_vendor_message_vendor_id_set
    __swig_getmethods__["vendor_id"] = _mul_nbapi.c_ofp_send_vendor_message_vendor_id_get
    if _newclass:vendor_id = _swig_property(_mul_nbapi.c_ofp_send_vendor_message_vendor_id_get, _mul_nbapi.c_ofp_send_vendor_message_vendor_id_set)
    __swig_setmethods__["pad"] = _mul_nbapi.c_ofp_send_vendor_message_pad_set
    __swig_getmethods__["pad"] = _mul_nbapi.c_ofp_send_vendor_message_pad_get
    if _newclass:pad = _swig_property(_mul_nbapi.c_ofp_send_vendor_message_pad_get, _mul_nbapi.c_ofp_send_vendor_message_pad_set)
    __swig_setmethods__["data"] = _mul_nbapi.c_ofp_send_vendor_message_data_set
    __swig_getmethods__["data"] = _mul_nbapi.c_ofp_send_vendor_message_data_get
    if _newclass:data = _swig_property(_mul_nbapi.c_ofp_send_vendor_message_data_get, _mul_nbapi.c_ofp_send_vendor_message_data_set)
    def __init__(self): 
        this = _mul_nbapi.new_c_ofp_send_vendor_message()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_c_ofp_send_vendor_message
    __del__ = lambda self : None;
c_ofp_send_vendor_message_swigregister = _mul_nbapi.c_ofp_send_vendor_message_swigregister
c_ofp_send_vendor_message_swigregister(c_ofp_send_vendor_message)

class c_sw_port(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, c_sw_port, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, c_sw_port, name)
    __repr__ = _swig_repr
    __swig_setmethods__["port_no"] = _mul_nbapi.c_sw_port_port_no_set
    __swig_getmethods__["port_no"] = _mul_nbapi.c_sw_port_port_no_get
    if _newclass:port_no = _swig_property(_mul_nbapi.c_sw_port_port_no_get, _mul_nbapi.c_sw_port_port_no_set)
    __swig_setmethods__["hw_addr"] = _mul_nbapi.c_sw_port_hw_addr_set
    __swig_getmethods__["hw_addr"] = _mul_nbapi.c_sw_port_hw_addr_get
    if _newclass:hw_addr = _swig_property(_mul_nbapi.c_sw_port_hw_addr_get, _mul_nbapi.c_sw_port_hw_addr_set)
    __swig_setmethods__["name"] = _mul_nbapi.c_sw_port_name_set
    __swig_getmethods__["name"] = _mul_nbapi.c_sw_port_name_get
    if _newclass:name = _swig_property(_mul_nbapi.c_sw_port_name_get, _mul_nbapi.c_sw_port_name_set)
    __swig_setmethods__["type"] = _mul_nbapi.c_sw_port_type_set
    __swig_getmethods__["type"] = _mul_nbapi.c_sw_port_type_get
    if _newclass:type = _swig_property(_mul_nbapi.c_sw_port_type_get, _mul_nbapi.c_sw_port_type_set)
    __swig_setmethods__["pad"] = _mul_nbapi.c_sw_port_pad_set
    __swig_getmethods__["pad"] = _mul_nbapi.c_sw_port_pad_get
    if _newclass:pad = _swig_property(_mul_nbapi.c_sw_port_pad_get, _mul_nbapi.c_sw_port_pad_set)
    __swig_setmethods__["config"] = _mul_nbapi.c_sw_port_config_set
    __swig_getmethods__["config"] = _mul_nbapi.c_sw_port_config_get
    if _newclass:config = _swig_property(_mul_nbapi.c_sw_port_config_get, _mul_nbapi.c_sw_port_config_set)
    __swig_setmethods__["state"] = _mul_nbapi.c_sw_port_state_set
    __swig_getmethods__["state"] = _mul_nbapi.c_sw_port_state_get
    if _newclass:state = _swig_property(_mul_nbapi.c_sw_port_state_get, _mul_nbapi.c_sw_port_state_set)
    __swig_setmethods__["of_config"] = _mul_nbapi.c_sw_port_of_config_set
    __swig_getmethods__["of_config"] = _mul_nbapi.c_sw_port_of_config_get
    if _newclass:of_config = _swig_property(_mul_nbapi.c_sw_port_of_config_get, _mul_nbapi.c_sw_port_of_config_set)
    __swig_setmethods__["of_state"] = _mul_nbapi.c_sw_port_of_state_set
    __swig_getmethods__["of_state"] = _mul_nbapi.c_sw_port_of_state_get
    if _newclass:of_state = _swig_property(_mul_nbapi.c_sw_port_of_state_get, _mul_nbapi.c_sw_port_of_state_set)
    __swig_setmethods__["curr"] = _mul_nbapi.c_sw_port_curr_set
    __swig_getmethods__["curr"] = _mul_nbapi.c_sw_port_curr_get
    if _newclass:curr = _swig_property(_mul_nbapi.c_sw_port_curr_get, _mul_nbapi.c_sw_port_curr_set)
    __swig_setmethods__["advertised"] = _mul_nbapi.c_sw_port_advertised_set
    __swig_getmethods__["advertised"] = _mul_nbapi.c_sw_port_advertised_get
    if _newclass:advertised = _swig_property(_mul_nbapi.c_sw_port_advertised_get, _mul_nbapi.c_sw_port_advertised_set)
    __swig_setmethods__["supported"] = _mul_nbapi.c_sw_port_supported_set
    __swig_getmethods__["supported"] = _mul_nbapi.c_sw_port_supported_get
    if _newclass:supported = _swig_property(_mul_nbapi.c_sw_port_supported_get, _mul_nbapi.c_sw_port_supported_set)
    __swig_setmethods__["peer"] = _mul_nbapi.c_sw_port_peer_set
    __swig_getmethods__["peer"] = _mul_nbapi.c_sw_port_peer_get
    if _newclass:peer = _swig_property(_mul_nbapi.c_sw_port_peer_get, _mul_nbapi.c_sw_port_peer_set)
    __swig_setmethods__["curr_speed"] = _mul_nbapi.c_sw_port_curr_speed_set
    __swig_getmethods__["curr_speed"] = _mul_nbapi.c_sw_port_curr_speed_get
    if _newclass:curr_speed = _swig_property(_mul_nbapi.c_sw_port_curr_speed_get, _mul_nbapi.c_sw_port_curr_speed_set)
    __swig_setmethods__["max_speed"] = _mul_nbapi.c_sw_port_max_speed_set
    __swig_getmethods__["max_speed"] = _mul_nbapi.c_sw_port_max_speed_get
    if _newclass:max_speed = _swig_property(_mul_nbapi.c_sw_port_max_speed_get, _mul_nbapi.c_sw_port_max_speed_set)
    def __init__(self): 
        this = _mul_nbapi.new_c_sw_port()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_c_sw_port
    __del__ = lambda self : None;
c_sw_port_swigregister = _mul_nbapi.c_sw_port_swigregister
c_sw_port_swigregister(c_sw_port)
C_MLPC_DOWN = _mul_nbapi.C_MLPC_DOWN
C_MLPC_NO_STP = _mul_nbapi.C_MLPC_NO_STP
C_MLPS_DOWN = _mul_nbapi.C_MLPS_DOWN

class c_ofp_switch_add(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, c_ofp_switch_add, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, c_ofp_switch_add, name)
    __repr__ = _swig_repr
    __swig_setmethods__["header"] = _mul_nbapi.c_ofp_switch_add_header_set
    __swig_getmethods__["header"] = _mul_nbapi.c_ofp_switch_add_header_get
    if _newclass:header = _swig_property(_mul_nbapi.c_ofp_switch_add_header_get, _mul_nbapi.c_ofp_switch_add_header_set)
    __swig_setmethods__["datapath_id"] = _mul_nbapi.c_ofp_switch_add_datapath_id_set
    __swig_getmethods__["datapath_id"] = _mul_nbapi.c_ofp_switch_add_datapath_id_get
    if _newclass:datapath_id = _swig_property(_mul_nbapi.c_ofp_switch_add_datapath_id_get, _mul_nbapi.c_ofp_switch_add_datapath_id_set)
    __swig_setmethods__["sw_alias"] = _mul_nbapi.c_ofp_switch_add_sw_alias_set
    __swig_getmethods__["sw_alias"] = _mul_nbapi.c_ofp_switch_add_sw_alias_get
    if _newclass:sw_alias = _swig_property(_mul_nbapi.c_ofp_switch_add_sw_alias_get, _mul_nbapi.c_ofp_switch_add_sw_alias_set)
    __swig_setmethods__["n_buffers"] = _mul_nbapi.c_ofp_switch_add_n_buffers_set
    __swig_getmethods__["n_buffers"] = _mul_nbapi.c_ofp_switch_add_n_buffers_get
    if _newclass:n_buffers = _swig_property(_mul_nbapi.c_ofp_switch_add_n_buffers_get, _mul_nbapi.c_ofp_switch_add_n_buffers_set)
    __swig_setmethods__["state"] = _mul_nbapi.c_ofp_switch_add_state_set
    __swig_getmethods__["state"] = _mul_nbapi.c_ofp_switch_add_state_get
    if _newclass:state = _swig_property(_mul_nbapi.c_ofp_switch_add_state_get, _mul_nbapi.c_ofp_switch_add_state_set)
    __swig_setmethods__["rx_rlim_pps"] = _mul_nbapi.c_ofp_switch_add_rx_rlim_pps_set
    __swig_getmethods__["rx_rlim_pps"] = _mul_nbapi.c_ofp_switch_add_rx_rlim_pps_get
    if _newclass:rx_rlim_pps = _swig_property(_mul_nbapi.c_ofp_switch_add_rx_rlim_pps_get, _mul_nbapi.c_ofp_switch_add_rx_rlim_pps_set)
    __swig_setmethods__["tx_rlim_pps"] = _mul_nbapi.c_ofp_switch_add_tx_rlim_pps_set
    __swig_getmethods__["tx_rlim_pps"] = _mul_nbapi.c_ofp_switch_add_tx_rlim_pps_get
    if _newclass:tx_rlim_pps = _swig_property(_mul_nbapi.c_ofp_switch_add_tx_rlim_pps_get, _mul_nbapi.c_ofp_switch_add_tx_rlim_pps_set)
    __swig_setmethods__["n_tables"] = _mul_nbapi.c_ofp_switch_add_n_tables_set
    __swig_getmethods__["n_tables"] = _mul_nbapi.c_ofp_switch_add_n_tables_get
    if _newclass:n_tables = _swig_property(_mul_nbapi.c_ofp_switch_add_n_tables_get, _mul_nbapi.c_ofp_switch_add_n_tables_set)
    __swig_setmethods__["ver"] = _mul_nbapi.c_ofp_switch_add_ver_set
    __swig_getmethods__["ver"] = _mul_nbapi.c_ofp_switch_add_ver_get
    if _newclass:ver = _swig_property(_mul_nbapi.c_ofp_switch_add_ver_get, _mul_nbapi.c_ofp_switch_add_ver_set)
    __swig_setmethods__["rx_dump_en"] = _mul_nbapi.c_ofp_switch_add_rx_dump_en_set
    __swig_getmethods__["rx_dump_en"] = _mul_nbapi.c_ofp_switch_add_rx_dump_en_get
    if _newclass:rx_dump_en = _swig_property(_mul_nbapi.c_ofp_switch_add_rx_dump_en_get, _mul_nbapi.c_ofp_switch_add_rx_dump_en_set)
    __swig_setmethods__["tx_dump_en"] = _mul_nbapi.c_ofp_switch_add_tx_dump_en_set
    __swig_getmethods__["tx_dump_en"] = _mul_nbapi.c_ofp_switch_add_tx_dump_en_get
    if _newclass:tx_dump_en = _swig_property(_mul_nbapi.c_ofp_switch_add_tx_dump_en_get, _mul_nbapi.c_ofp_switch_add_tx_dump_en_set)
    __swig_setmethods__["pad1"] = _mul_nbapi.c_ofp_switch_add_pad1_set
    __swig_getmethods__["pad1"] = _mul_nbapi.c_ofp_switch_add_pad1_get
    if _newclass:pad1 = _swig_property(_mul_nbapi.c_ofp_switch_add_pad1_get, _mul_nbapi.c_ofp_switch_add_pad1_set)
    __swig_setmethods__["capabilities"] = _mul_nbapi.c_ofp_switch_add_capabilities_set
    __swig_getmethods__["capabilities"] = _mul_nbapi.c_ofp_switch_add_capabilities_get
    if _newclass:capabilities = _swig_property(_mul_nbapi.c_ofp_switch_add_capabilities_get, _mul_nbapi.c_ofp_switch_add_capabilities_set)
    __swig_setmethods__["actions"] = _mul_nbapi.c_ofp_switch_add_actions_set
    __swig_getmethods__["actions"] = _mul_nbapi.c_ofp_switch_add_actions_get
    if _newclass:actions = _swig_property(_mul_nbapi.c_ofp_switch_add_actions_get, _mul_nbapi.c_ofp_switch_add_actions_set)
    __swig_setmethods__["ports"] = _mul_nbapi.c_ofp_switch_add_ports_set
    __swig_getmethods__["ports"] = _mul_nbapi.c_ofp_switch_add_ports_get
    if _newclass:ports = _swig_property(_mul_nbapi.c_ofp_switch_add_ports_get, _mul_nbapi.c_ofp_switch_add_ports_set)
    def __init__(self): 
        this = _mul_nbapi.new_c_ofp_switch_add()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_c_ofp_switch_add
    __del__ = lambda self : None;
c_ofp_switch_add_swigregister = _mul_nbapi.c_ofp_switch_add_swigregister
c_ofp_switch_add_swigregister(c_ofp_switch_add)

class c_ofp_port_status(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, c_ofp_port_status, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, c_ofp_port_status, name)
    __repr__ = _swig_repr
    __swig_setmethods__["header"] = _mul_nbapi.c_ofp_port_status_header_set
    __swig_getmethods__["header"] = _mul_nbapi.c_ofp_port_status_header_get
    if _newclass:header = _swig_property(_mul_nbapi.c_ofp_port_status_header_get, _mul_nbapi.c_ofp_port_status_header_set)
    __swig_setmethods__["datapath_id"] = _mul_nbapi.c_ofp_port_status_datapath_id_set
    __swig_getmethods__["datapath_id"] = _mul_nbapi.c_ofp_port_status_datapath_id_get
    if _newclass:datapath_id = _swig_property(_mul_nbapi.c_ofp_port_status_datapath_id_get, _mul_nbapi.c_ofp_port_status_datapath_id_set)
    __swig_setmethods__["sw_alias"] = _mul_nbapi.c_ofp_port_status_sw_alias_set
    __swig_getmethods__["sw_alias"] = _mul_nbapi.c_ofp_port_status_sw_alias_get
    if _newclass:sw_alias = _swig_property(_mul_nbapi.c_ofp_port_status_sw_alias_get, _mul_nbapi.c_ofp_port_status_sw_alias_set)
    __swig_setmethods__["config_mask"] = _mul_nbapi.c_ofp_port_status_config_mask_set
    __swig_getmethods__["config_mask"] = _mul_nbapi.c_ofp_port_status_config_mask_get
    if _newclass:config_mask = _swig_property(_mul_nbapi.c_ofp_port_status_config_mask_get, _mul_nbapi.c_ofp_port_status_config_mask_set)
    __swig_setmethods__["state_mask"] = _mul_nbapi.c_ofp_port_status_state_mask_set
    __swig_getmethods__["state_mask"] = _mul_nbapi.c_ofp_port_status_state_mask_get
    if _newclass:state_mask = _swig_property(_mul_nbapi.c_ofp_port_status_state_mask_get, _mul_nbapi.c_ofp_port_status_state_mask_set)
    __swig_setmethods__["reason"] = _mul_nbapi.c_ofp_port_status_reason_set
    __swig_getmethods__["reason"] = _mul_nbapi.c_ofp_port_status_reason_get
    if _newclass:reason = _swig_property(_mul_nbapi.c_ofp_port_status_reason_get, _mul_nbapi.c_ofp_port_status_reason_set)
    __swig_setmethods__["pad"] = _mul_nbapi.c_ofp_port_status_pad_set
    __swig_getmethods__["pad"] = _mul_nbapi.c_ofp_port_status_pad_get
    if _newclass:pad = _swig_property(_mul_nbapi.c_ofp_port_status_pad_get, _mul_nbapi.c_ofp_port_status_pad_set)
    __swig_setmethods__["desc"] = _mul_nbapi.c_ofp_port_status_desc_set
    __swig_getmethods__["desc"] = _mul_nbapi.c_ofp_port_status_desc_get
    if _newclass:desc = _swig_property(_mul_nbapi.c_ofp_port_status_desc_get, _mul_nbapi.c_ofp_port_status_desc_set)
    def __init__(self): 
        this = _mul_nbapi.new_c_ofp_port_status()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_c_ofp_port_status
    __del__ = lambda self : None;
c_ofp_port_status_swigregister = _mul_nbapi.c_ofp_port_status_swigregister
c_ofp_port_status_swigregister(c_ofp_port_status)

class flow(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, flow, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, flow, name)
    __repr__ = _swig_repr
    __swig_setmethods__["in_port"] = _mul_nbapi.flow_in_port_set
    __swig_getmethods__["in_port"] = _mul_nbapi.flow_in_port_get
    if _newclass:in_port = _swig_property(_mul_nbapi.flow_in_port_get, _mul_nbapi.flow_in_port_set)
    __swig_setmethods__["dl_vlan"] = _mul_nbapi.flow_dl_vlan_set
    __swig_getmethods__["dl_vlan"] = _mul_nbapi.flow_dl_vlan_get
    if _newclass:dl_vlan = _swig_property(_mul_nbapi.flow_dl_vlan_get, _mul_nbapi.flow_dl_vlan_set)
    __swig_setmethods__["dl_type"] = _mul_nbapi.flow_dl_type_set
    __swig_getmethods__["dl_type"] = _mul_nbapi.flow_dl_type_get
    if _newclass:dl_type = _swig_property(_mul_nbapi.flow_dl_type_get, _mul_nbapi.flow_dl_type_set)
    __swig_setmethods__["dl_dst"] = _mul_nbapi.flow_dl_dst_set
    __swig_getmethods__["dl_dst"] = _mul_nbapi.flow_dl_dst_get
    if _newclass:dl_dst = _swig_property(_mul_nbapi.flow_dl_dst_get, _mul_nbapi.flow_dl_dst_set)
    __swig_setmethods__["dl_src"] = _mul_nbapi.flow_dl_src_set
    __swig_getmethods__["dl_src"] = _mul_nbapi.flow_dl_src_get
    if _newclass:dl_src = _swig_property(_mul_nbapi.flow_dl_src_get, _mul_nbapi.flow_dl_src_set)
    __swig_setmethods__["dl_vlan_pcp"] = _mul_nbapi.flow_dl_vlan_pcp_set
    __swig_getmethods__["dl_vlan_pcp"] = _mul_nbapi.flow_dl_vlan_pcp_get
    if _newclass:dl_vlan_pcp = _swig_property(_mul_nbapi.flow_dl_vlan_pcp_get, _mul_nbapi.flow_dl_vlan_pcp_set)
    __swig_setmethods__["table_id"] = _mul_nbapi.flow_table_id_set
    __swig_getmethods__["table_id"] = _mul_nbapi.flow_table_id_get
    if _newclass:table_id = _swig_property(_mul_nbapi.flow_table_id_get, _mul_nbapi.flow_table_id_set)
    __swig_setmethods__["nw_tos"] = _mul_nbapi.flow_nw_tos_set
    __swig_getmethods__["nw_tos"] = _mul_nbapi.flow_nw_tos_get
    if _newclass:nw_tos = _swig_property(_mul_nbapi.flow_nw_tos_get, _mul_nbapi.flow_nw_tos_set)
    __swig_setmethods__["nw_proto"] = _mul_nbapi.flow_nw_proto_set
    __swig_getmethods__["nw_proto"] = _mul_nbapi.flow_nw_proto_get
    if _newclass:nw_proto = _swig_property(_mul_nbapi.flow_nw_proto_get, _mul_nbapi.flow_nw_proto_set)
    __swig_setmethods__["mpls_label"] = _mul_nbapi.flow_mpls_label_set
    __swig_getmethods__["mpls_label"] = _mul_nbapi.flow_mpls_label_get
    if _newclass:mpls_label = _swig_property(_mul_nbapi.flow_mpls_label_get, _mul_nbapi.flow_mpls_label_set)
    __swig_setmethods__["tp_src"] = _mul_nbapi.flow_tp_src_set
    __swig_getmethods__["tp_src"] = _mul_nbapi.flow_tp_src_get
    if _newclass:tp_src = _swig_property(_mul_nbapi.flow_tp_src_get, _mul_nbapi.flow_tp_src_set)
    __swig_setmethods__["tp_dst"] = _mul_nbapi.flow_tp_dst_set
    __swig_getmethods__["tp_dst"] = _mul_nbapi.flow_tp_dst_get
    if _newclass:tp_dst = _swig_property(_mul_nbapi.flow_tp_dst_get, _mul_nbapi.flow_tp_dst_set)
    __swig_setmethods__["tunnel_id"] = _mul_nbapi.flow_tunnel_id_set
    __swig_getmethods__["tunnel_id"] = _mul_nbapi.flow_tunnel_id_get
    if _newclass:tunnel_id = _swig_property(_mul_nbapi.flow_tunnel_id_get, _mul_nbapi.flow_tunnel_id_set)
    __swig_setmethods__["metadata"] = _mul_nbapi.flow_metadata_set
    __swig_getmethods__["metadata"] = _mul_nbapi.flow_metadata_get
    if _newclass:metadata = _swig_property(_mul_nbapi.flow_metadata_get, _mul_nbapi.flow_metadata_set)
    __swig_setmethods__["mpls_bos"] = _mul_nbapi.flow_mpls_bos_set
    __swig_getmethods__["mpls_bos"] = _mul_nbapi.flow_mpls_bos_get
    if _newclass:mpls_bos = _swig_property(_mul_nbapi.flow_mpls_bos_get, _mul_nbapi.flow_mpls_bos_set)
    __swig_setmethods__["mpls_tc"] = _mul_nbapi.flow_mpls_tc_set
    __swig_getmethods__["mpls_tc"] = _mul_nbapi.flow_mpls_tc_get
    if _newclass:mpls_tc = _swig_property(_mul_nbapi.flow_mpls_tc_get, _mul_nbapi.flow_mpls_tc_set)
    __swig_setmethods__["pad"] = _mul_nbapi.flow_pad_set
    __swig_getmethods__["pad"] = _mul_nbapi.flow_pad_get
    if _newclass:pad = _swig_property(_mul_nbapi.flow_pad_get, _mul_nbapi.flow_pad_set)
    def __init__(self): 
        this = _mul_nbapi.new_flow()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_flow
    __del__ = lambda self : None;
flow_swigregister = _mul_nbapi.flow_swigregister
flow_swigregister(flow)
C_FL_TBL_ID_DFL = _mul_nbapi.C_FL_TBL_ID_DFL

class c_ofp_packet_in(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, c_ofp_packet_in, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, c_ofp_packet_in, name)
    __repr__ = _swig_repr
    __swig_setmethods__["header"] = _mul_nbapi.c_ofp_packet_in_header_set
    __swig_getmethods__["header"] = _mul_nbapi.c_ofp_packet_in_header_get
    if _newclass:header = _swig_property(_mul_nbapi.c_ofp_packet_in_header_get, _mul_nbapi.c_ofp_packet_in_header_set)
    __swig_setmethods__["datapath_id"] = _mul_nbapi.c_ofp_packet_in_datapath_id_set
    __swig_getmethods__["datapath_id"] = _mul_nbapi.c_ofp_packet_in_datapath_id_get
    if _newclass:datapath_id = _swig_property(_mul_nbapi.c_ofp_packet_in_datapath_id_get, _mul_nbapi.c_ofp_packet_in_datapath_id_set)
    __swig_setmethods__["sw_alias"] = _mul_nbapi.c_ofp_packet_in_sw_alias_set
    __swig_getmethods__["sw_alias"] = _mul_nbapi.c_ofp_packet_in_sw_alias_get
    if _newclass:sw_alias = _swig_property(_mul_nbapi.c_ofp_packet_in_sw_alias_get, _mul_nbapi.c_ofp_packet_in_sw_alias_set)
    __swig_setmethods__["buffer_id"] = _mul_nbapi.c_ofp_packet_in_buffer_id_set
    __swig_getmethods__["buffer_id"] = _mul_nbapi.c_ofp_packet_in_buffer_id_get
    if _newclass:buffer_id = _swig_property(_mul_nbapi.c_ofp_packet_in_buffer_id_get, _mul_nbapi.c_ofp_packet_in_buffer_id_set)
    __swig_setmethods__["fl"] = _mul_nbapi.c_ofp_packet_in_fl_set
    __swig_getmethods__["fl"] = _mul_nbapi.c_ofp_packet_in_fl_get
    if _newclass:fl = _swig_property(_mul_nbapi.c_ofp_packet_in_fl_get, _mul_nbapi.c_ofp_packet_in_fl_set)
    __swig_setmethods__["in_port"] = _mul_nbapi.c_ofp_packet_in_in_port_set
    __swig_getmethods__["in_port"] = _mul_nbapi.c_ofp_packet_in_in_port_get
    if _newclass:in_port = _swig_property(_mul_nbapi.c_ofp_packet_in_in_port_get, _mul_nbapi.c_ofp_packet_in_in_port_set)
    __swig_setmethods__["total_len"] = _mul_nbapi.c_ofp_packet_in_total_len_set
    __swig_getmethods__["total_len"] = _mul_nbapi.c_ofp_packet_in_total_len_get
    if _newclass:total_len = _swig_property(_mul_nbapi.c_ofp_packet_in_total_len_get, _mul_nbapi.c_ofp_packet_in_total_len_set)
    __swig_setmethods__["reason"] = _mul_nbapi.c_ofp_packet_in_reason_set
    __swig_getmethods__["reason"] = _mul_nbapi.c_ofp_packet_in_reason_get
    if _newclass:reason = _swig_property(_mul_nbapi.c_ofp_packet_in_reason_get, _mul_nbapi.c_ofp_packet_in_reason_set)
    __swig_setmethods__["pad"] = _mul_nbapi.c_ofp_packet_in_pad_set
    __swig_getmethods__["pad"] = _mul_nbapi.c_ofp_packet_in_pad_get
    if _newclass:pad = _swig_property(_mul_nbapi.c_ofp_packet_in_pad_get, _mul_nbapi.c_ofp_packet_in_pad_set)
    __swig_setmethods__["data"] = _mul_nbapi.c_ofp_packet_in_data_set
    __swig_getmethods__["data"] = _mul_nbapi.c_ofp_packet_in_data_get
    if _newclass:data = _swig_property(_mul_nbapi.c_ofp_packet_in_data_get, _mul_nbapi.c_ofp_packet_in_data_set)
    def __init__(self): 
        this = _mul_nbapi.new_c_ofp_packet_in()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_c_ofp_packet_in
    __del__ = lambda self : None;
c_ofp_packet_in_swigregister = _mul_nbapi.c_ofp_packet_in_swigregister
c_ofp_packet_in_swigregister(c_ofp_packet_in)

class c_ofp_flow_mod(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, c_ofp_flow_mod, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, c_ofp_flow_mod, name)
    __repr__ = _swig_repr
    __swig_setmethods__["header"] = _mul_nbapi.c_ofp_flow_mod_header_set
    __swig_getmethods__["header"] = _mul_nbapi.c_ofp_flow_mod_header_get
    if _newclass:header = _swig_property(_mul_nbapi.c_ofp_flow_mod_header_get, _mul_nbapi.c_ofp_flow_mod_header_set)
    __swig_setmethods__["datapath_id"] = _mul_nbapi.c_ofp_flow_mod_datapath_id_set
    __swig_getmethods__["datapath_id"] = _mul_nbapi.c_ofp_flow_mod_datapath_id_get
    if _newclass:datapath_id = _swig_property(_mul_nbapi.c_ofp_flow_mod_datapath_id_get, _mul_nbapi.c_ofp_flow_mod_datapath_id_set)
    __swig_setmethods__["flow"] = _mul_nbapi.c_ofp_flow_mod_flow_set
    __swig_getmethods__["flow"] = _mul_nbapi.c_ofp_flow_mod_flow_get
    if _newclass:flow = _swig_property(_mul_nbapi.c_ofp_flow_mod_flow_get, _mul_nbapi.c_ofp_flow_mod_flow_set)
    __swig_setmethods__["mask"] = _mul_nbapi.c_ofp_flow_mod_mask_set
    __swig_getmethods__["mask"] = _mul_nbapi.c_ofp_flow_mod_mask_get
    if _newclass:mask = _swig_property(_mul_nbapi.c_ofp_flow_mod_mask_get, _mul_nbapi.c_ofp_flow_mod_mask_set)
    __swig_setmethods__["flags"] = _mul_nbapi.c_ofp_flow_mod_flags_set
    __swig_getmethods__["flags"] = _mul_nbapi.c_ofp_flow_mod_flags_get
    if _newclass:flags = _swig_property(_mul_nbapi.c_ofp_flow_mod_flags_get, _mul_nbapi.c_ofp_flow_mod_flags_set)
    __swig_setmethods__["pad0"] = _mul_nbapi.c_ofp_flow_mod_pad0_set
    __swig_getmethods__["pad0"] = _mul_nbapi.c_ofp_flow_mod_pad0_get
    if _newclass:pad0 = _swig_property(_mul_nbapi.c_ofp_flow_mod_pad0_get, _mul_nbapi.c_ofp_flow_mod_pad0_set)
    __swig_setmethods__["command"] = _mul_nbapi.c_ofp_flow_mod_command_set
    __swig_getmethods__["command"] = _mul_nbapi.c_ofp_flow_mod_command_get
    if _newclass:command = _swig_property(_mul_nbapi.c_ofp_flow_mod_command_get, _mul_nbapi.c_ofp_flow_mod_command_set)
    __swig_setmethods__["priority"] = _mul_nbapi.c_ofp_flow_mod_priority_set
    __swig_getmethods__["priority"] = _mul_nbapi.c_ofp_flow_mod_priority_get
    if _newclass:priority = _swig_property(_mul_nbapi.c_ofp_flow_mod_priority_get, _mul_nbapi.c_ofp_flow_mod_priority_set)
    __swig_setmethods__["sw_alias"] = _mul_nbapi.c_ofp_flow_mod_sw_alias_set
    __swig_getmethods__["sw_alias"] = _mul_nbapi.c_ofp_flow_mod_sw_alias_get
    if _newclass:sw_alias = _swig_property(_mul_nbapi.c_ofp_flow_mod_sw_alias_get, _mul_nbapi.c_ofp_flow_mod_sw_alias_set)
    __swig_setmethods__["wildcards"] = _mul_nbapi.c_ofp_flow_mod_wildcards_set
    __swig_getmethods__["wildcards"] = _mul_nbapi.c_ofp_flow_mod_wildcards_get
    if _newclass:wildcards = _swig_property(_mul_nbapi.c_ofp_flow_mod_wildcards_get, _mul_nbapi.c_ofp_flow_mod_wildcards_set)
    __swig_setmethods__["itimeo"] = _mul_nbapi.c_ofp_flow_mod_itimeo_set
    __swig_getmethods__["itimeo"] = _mul_nbapi.c_ofp_flow_mod_itimeo_get
    if _newclass:itimeo = _swig_property(_mul_nbapi.c_ofp_flow_mod_itimeo_get, _mul_nbapi.c_ofp_flow_mod_itimeo_set)
    __swig_setmethods__["htimeo"] = _mul_nbapi.c_ofp_flow_mod_htimeo_set
    __swig_getmethods__["htimeo"] = _mul_nbapi.c_ofp_flow_mod_htimeo_get
    if _newclass:htimeo = _swig_property(_mul_nbapi.c_ofp_flow_mod_htimeo_get, _mul_nbapi.c_ofp_flow_mod_htimeo_set)
    __swig_setmethods__["oport"] = _mul_nbapi.c_ofp_flow_mod_oport_set
    __swig_getmethods__["oport"] = _mul_nbapi.c_ofp_flow_mod_oport_get
    if _newclass:oport = _swig_property(_mul_nbapi.c_ofp_flow_mod_oport_get, _mul_nbapi.c_ofp_flow_mod_oport_set)
    __swig_setmethods__["buffer_id"] = _mul_nbapi.c_ofp_flow_mod_buffer_id_set
    __swig_getmethods__["buffer_id"] = _mul_nbapi.c_ofp_flow_mod_buffer_id_get
    if _newclass:buffer_id = _swig_property(_mul_nbapi.c_ofp_flow_mod_buffer_id_get, _mul_nbapi.c_ofp_flow_mod_buffer_id_set)
    __swig_setmethods__["ogroup"] = _mul_nbapi.c_ofp_flow_mod_ogroup_set
    __swig_getmethods__["ogroup"] = _mul_nbapi.c_ofp_flow_mod_ogroup_get
    if _newclass:ogroup = _swig_property(_mul_nbapi.c_ofp_flow_mod_ogroup_get, _mul_nbapi.c_ofp_flow_mod_ogroup_set)
    __swig_setmethods__["mod_flags"] = _mul_nbapi.c_ofp_flow_mod_mod_flags_set
    __swig_getmethods__["mod_flags"] = _mul_nbapi.c_ofp_flow_mod_mod_flags_get
    if _newclass:mod_flags = _swig_property(_mul_nbapi.c_ofp_flow_mod_mod_flags_get, _mul_nbapi.c_ofp_flow_mod_mod_flags_set)
    __swig_setmethods__["pad1"] = _mul_nbapi.c_ofp_flow_mod_pad1_set
    __swig_getmethods__["pad1"] = _mul_nbapi.c_ofp_flow_mod_pad1_get
    if _newclass:pad1 = _swig_property(_mul_nbapi.c_ofp_flow_mod_pad1_get, _mul_nbapi.c_ofp_flow_mod_pad1_set)
    __swig_setmethods__["cookie"] = _mul_nbapi.c_ofp_flow_mod_cookie_set
    __swig_getmethods__["cookie"] = _mul_nbapi.c_ofp_flow_mod_cookie_get
    if _newclass:cookie = _swig_property(_mul_nbapi.c_ofp_flow_mod_cookie_get, _mul_nbapi.c_ofp_flow_mod_cookie_set)
    __swig_setmethods__["seq_cookie"] = _mul_nbapi.c_ofp_flow_mod_seq_cookie_set
    __swig_getmethods__["seq_cookie"] = _mul_nbapi.c_ofp_flow_mod_seq_cookie_get
    if _newclass:seq_cookie = _swig_property(_mul_nbapi.c_ofp_flow_mod_seq_cookie_get, _mul_nbapi.c_ofp_flow_mod_seq_cookie_set)
    __swig_setmethods__["actions"] = _mul_nbapi.c_ofp_flow_mod_actions_set
    __swig_getmethods__["actions"] = _mul_nbapi.c_ofp_flow_mod_actions_get
    if _newclass:actions = _swig_property(_mul_nbapi.c_ofp_flow_mod_actions_get, _mul_nbapi.c_ofp_flow_mod_actions_set)
    def __init__(self): 
        this = _mul_nbapi.new_c_ofp_flow_mod()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_c_ofp_flow_mod
    __del__ = lambda self : None;
c_ofp_flow_mod_swigregister = _mul_nbapi.c_ofp_flow_mod_swigregister
c_ofp_flow_mod_swigregister(c_ofp_flow_mod)
C_FL_ENT_STATIC = _mul_nbapi.C_FL_ENT_STATIC
C_FL_ENT_CLONE = _mul_nbapi.C_FL_ENT_CLONE
C_FL_ENT_LOCAL = _mul_nbapi.C_FL_ENT_LOCAL
C_FL_ENT_NOCACHE = _mul_nbapi.C_FL_ENT_NOCACHE
C_FL_ENT_NOT_INST = _mul_nbapi.C_FL_ENT_NOT_INST
C_FL_ENT_NOSYNC = _mul_nbapi.C_FL_ENT_NOSYNC
C_FL_ENT_GSTATS = _mul_nbapi.C_FL_ENT_GSTATS
C_FL_ENT_SWALIAS = _mul_nbapi.C_FL_ENT_SWALIAS
C_FL_ENT_BARRIER = _mul_nbapi.C_FL_ENT_BARRIER
C_FL_ENT_RESIDUAL = _mul_nbapi.C_FL_ENT_RESIDUAL
C_FL_ENT_STALE = _mul_nbapi.C_FL_ENT_STALE
C_FL_NO_ACK = _mul_nbapi.C_FL_NO_ACK
C_FL_ENT_CTRL_LOCAL = _mul_nbapi.C_FL_ENT_CTRL_LOCAL
C_FL_ENT_TBL_PHYS = _mul_nbapi.C_FL_ENT_TBL_PHYS
C_FL_ENT_RES_STALE = _mul_nbapi.C_FL_ENT_RES_STALE
C_OFPC_ADD = _mul_nbapi.C_OFPC_ADD
C_OFPC_DEL = _mul_nbapi.C_OFPC_DEL
C_FL_PRIO_DFL = _mul_nbapi.C_FL_PRIO_DFL
C_FL_PRIO_LDFL = _mul_nbapi.C_FL_PRIO_LDFL
C_FL_PRIO_FWD = _mul_nbapi.C_FL_PRIO_FWD
C_FL_PRIO_DRP = _mul_nbapi.C_FL_PRIO_DRP
C_FL_PRIO_EXM = _mul_nbapi.C_FL_PRIO_EXM

class c_ofp_flow_info(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, c_ofp_flow_info, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, c_ofp_flow_info, name)
    __repr__ = _swig_repr
    __swig_setmethods__["header"] = _mul_nbapi.c_ofp_flow_info_header_set
    __swig_getmethods__["header"] = _mul_nbapi.c_ofp_flow_info_header_get
    if _newclass:header = _swig_property(_mul_nbapi.c_ofp_flow_info_header_get, _mul_nbapi.c_ofp_flow_info_header_set)
    __swig_setmethods__["datapath_id"] = _mul_nbapi.c_ofp_flow_info_datapath_id_set
    __swig_getmethods__["datapath_id"] = _mul_nbapi.c_ofp_flow_info_datapath_id_get
    if _newclass:datapath_id = _swig_property(_mul_nbapi.c_ofp_flow_info_datapath_id_get, _mul_nbapi.c_ofp_flow_info_datapath_id_set)
    __swig_setmethods__["sw_alias"] = _mul_nbapi.c_ofp_flow_info_sw_alias_set
    __swig_getmethods__["sw_alias"] = _mul_nbapi.c_ofp_flow_info_sw_alias_get
    if _newclass:sw_alias = _swig_property(_mul_nbapi.c_ofp_flow_info_sw_alias_get, _mul_nbapi.c_ofp_flow_info_sw_alias_set)
    __swig_setmethods__["pad"] = _mul_nbapi.c_ofp_flow_info_pad_set
    __swig_getmethods__["pad"] = _mul_nbapi.c_ofp_flow_info_pad_get
    if _newclass:pad = _swig_property(_mul_nbapi.c_ofp_flow_info_pad_get, _mul_nbapi.c_ofp_flow_info_pad_set)
    __swig_setmethods__["flow"] = _mul_nbapi.c_ofp_flow_info_flow_set
    __swig_getmethods__["flow"] = _mul_nbapi.c_ofp_flow_info_flow_get
    if _newclass:flow = _swig_property(_mul_nbapi.c_ofp_flow_info_flow_get, _mul_nbapi.c_ofp_flow_info_flow_set)
    __swig_setmethods__["mask"] = _mul_nbapi.c_ofp_flow_info_mask_set
    __swig_getmethods__["mask"] = _mul_nbapi.c_ofp_flow_info_mask_get
    if _newclass:mask = _swig_property(_mul_nbapi.c_ofp_flow_info_mask_get, _mul_nbapi.c_ofp_flow_info_mask_set)
    __swig_setmethods__["flags"] = _mul_nbapi.c_ofp_flow_info_flags_set
    __swig_getmethods__["flags"] = _mul_nbapi.c_ofp_flow_info_flags_get
    if _newclass:flags = _swig_property(_mul_nbapi.c_ofp_flow_info_flags_get, _mul_nbapi.c_ofp_flow_info_flags_set)
    __swig_setmethods__["pad0"] = _mul_nbapi.c_ofp_flow_info_pad0_set
    __swig_getmethods__["pad0"] = _mul_nbapi.c_ofp_flow_info_pad0_get
    if _newclass:pad0 = _swig_property(_mul_nbapi.c_ofp_flow_info_pad0_get, _mul_nbapi.c_ofp_flow_info_pad0_set)
    __swig_setmethods__["command"] = _mul_nbapi.c_ofp_flow_info_command_set
    __swig_getmethods__["command"] = _mul_nbapi.c_ofp_flow_info_command_get
    if _newclass:command = _swig_property(_mul_nbapi.c_ofp_flow_info_command_get, _mul_nbapi.c_ofp_flow_info_command_set)
    __swig_setmethods__["priority"] = _mul_nbapi.c_ofp_flow_info_priority_set
    __swig_getmethods__["priority"] = _mul_nbapi.c_ofp_flow_info_priority_get
    if _newclass:priority = _swig_property(_mul_nbapi.c_ofp_flow_info_priority_get, _mul_nbapi.c_ofp_flow_info_priority_set)
    __swig_setmethods__["wildcards"] = _mul_nbapi.c_ofp_flow_info_wildcards_set
    __swig_getmethods__["wildcards"] = _mul_nbapi.c_ofp_flow_info_wildcards_get
    if _newclass:wildcards = _swig_property(_mul_nbapi.c_ofp_flow_info_wildcards_get, _mul_nbapi.c_ofp_flow_info_wildcards_set)
    __swig_setmethods__["itimeo"] = _mul_nbapi.c_ofp_flow_info_itimeo_set
    __swig_getmethods__["itimeo"] = _mul_nbapi.c_ofp_flow_info_itimeo_get
    if _newclass:itimeo = _swig_property(_mul_nbapi.c_ofp_flow_info_itimeo_get, _mul_nbapi.c_ofp_flow_info_itimeo_set)
    __swig_setmethods__["htimeo"] = _mul_nbapi.c_ofp_flow_info_htimeo_set
    __swig_getmethods__["htimeo"] = _mul_nbapi.c_ofp_flow_info_htimeo_get
    if _newclass:htimeo = _swig_property(_mul_nbapi.c_ofp_flow_info_htimeo_get, _mul_nbapi.c_ofp_flow_info_htimeo_set)
    __swig_setmethods__["mod_flags"] = _mul_nbapi.c_ofp_flow_info_mod_flags_set
    __swig_getmethods__["mod_flags"] = _mul_nbapi.c_ofp_flow_info_mod_flags_get
    if _newclass:mod_flags = _swig_property(_mul_nbapi.c_ofp_flow_info_mod_flags_get, _mul_nbapi.c_ofp_flow_info_mod_flags_set)
    __swig_setmethods__["oport"] = _mul_nbapi.c_ofp_flow_info_oport_set
    __swig_getmethods__["oport"] = _mul_nbapi.c_ofp_flow_info_oport_get
    if _newclass:oport = _swig_property(_mul_nbapi.c_ofp_flow_info_oport_get, _mul_nbapi.c_ofp_flow_info_oport_set)
    __swig_setmethods__["buffer_id"] = _mul_nbapi.c_ofp_flow_info_buffer_id_set
    __swig_getmethods__["buffer_id"] = _mul_nbapi.c_ofp_flow_info_buffer_id_get
    if _newclass:buffer_id = _swig_property(_mul_nbapi.c_ofp_flow_info_buffer_id_get, _mul_nbapi.c_ofp_flow_info_buffer_id_set)
    __swig_setmethods__["pad1"] = _mul_nbapi.c_ofp_flow_info_pad1_set
    __swig_getmethods__["pad1"] = _mul_nbapi.c_ofp_flow_info_pad1_get
    if _newclass:pad1 = _swig_property(_mul_nbapi.c_ofp_flow_info_pad1_get, _mul_nbapi.c_ofp_flow_info_pad1_set)
    __swig_setmethods__["byte_count"] = _mul_nbapi.c_ofp_flow_info_byte_count_set
    __swig_getmethods__["byte_count"] = _mul_nbapi.c_ofp_flow_info_byte_count_get
    if _newclass:byte_count = _swig_property(_mul_nbapi.c_ofp_flow_info_byte_count_get, _mul_nbapi.c_ofp_flow_info_byte_count_set)
    __swig_setmethods__["packet_count"] = _mul_nbapi.c_ofp_flow_info_packet_count_set
    __swig_getmethods__["packet_count"] = _mul_nbapi.c_ofp_flow_info_packet_count_get
    if _newclass:packet_count = _swig_property(_mul_nbapi.c_ofp_flow_info_packet_count_get, _mul_nbapi.c_ofp_flow_info_packet_count_set)
    __swig_setmethods__["duration_sec"] = _mul_nbapi.c_ofp_flow_info_duration_sec_set
    __swig_getmethods__["duration_sec"] = _mul_nbapi.c_ofp_flow_info_duration_sec_get
    if _newclass:duration_sec = _swig_property(_mul_nbapi.c_ofp_flow_info_duration_sec_get, _mul_nbapi.c_ofp_flow_info_duration_sec_set)
    __swig_setmethods__["duration_nsec"] = _mul_nbapi.c_ofp_flow_info_duration_nsec_set
    __swig_getmethods__["duration_nsec"] = _mul_nbapi.c_ofp_flow_info_duration_nsec_get
    if _newclass:duration_nsec = _swig_property(_mul_nbapi.c_ofp_flow_info_duration_nsec_get, _mul_nbapi.c_ofp_flow_info_duration_nsec_set)
    __swig_setmethods__["bps"] = _mul_nbapi.c_ofp_flow_info_bps_set
    __swig_getmethods__["bps"] = _mul_nbapi.c_ofp_flow_info_bps_get
    if _newclass:bps = _swig_property(_mul_nbapi.c_ofp_flow_info_bps_get, _mul_nbapi.c_ofp_flow_info_bps_set)
    __swig_setmethods__["pps"] = _mul_nbapi.c_ofp_flow_info_pps_set
    __swig_getmethods__["pps"] = _mul_nbapi.c_ofp_flow_info_pps_get
    if _newclass:pps = _swig_property(_mul_nbapi.c_ofp_flow_info_pps_get, _mul_nbapi.c_ofp_flow_info_pps_set)
    __swig_setmethods__["actions"] = _mul_nbapi.c_ofp_flow_info_actions_set
    __swig_getmethods__["actions"] = _mul_nbapi.c_ofp_flow_info_actions_get
    if _newclass:actions = _swig_property(_mul_nbapi.c_ofp_flow_info_actions_get, _mul_nbapi.c_ofp_flow_info_actions_set)
    def __init__(self): 
        this = _mul_nbapi.new_c_ofp_flow_info()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_c_ofp_flow_info
    __del__ = lambda self : None;
c_ofp_flow_info_swigregister = _mul_nbapi.c_ofp_flow_info_swigregister
c_ofp_flow_info_swigregister(c_ofp_flow_info)
C_FL_XPS_SZ = _mul_nbapi.C_FL_XPS_SZ

class c_ofp_flow_removed(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, c_ofp_flow_removed, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, c_ofp_flow_removed, name)
    __repr__ = _swig_repr
    __swig_setmethods__["header"] = _mul_nbapi.c_ofp_flow_removed_header_set
    __swig_getmethods__["header"] = _mul_nbapi.c_ofp_flow_removed_header_get
    if _newclass:header = _swig_property(_mul_nbapi.c_ofp_flow_removed_header_get, _mul_nbapi.c_ofp_flow_removed_header_set)
    __swig_setmethods__["datapath_id"] = _mul_nbapi.c_ofp_flow_removed_datapath_id_set
    __swig_getmethods__["datapath_id"] = _mul_nbapi.c_ofp_flow_removed_datapath_id_get
    if _newclass:datapath_id = _swig_property(_mul_nbapi.c_ofp_flow_removed_datapath_id_get, _mul_nbapi.c_ofp_flow_removed_datapath_id_set)
    __swig_setmethods__["flow"] = _mul_nbapi.c_ofp_flow_removed_flow_set
    __swig_getmethods__["flow"] = _mul_nbapi.c_ofp_flow_removed_flow_get
    if _newclass:flow = _swig_property(_mul_nbapi.c_ofp_flow_removed_flow_get, _mul_nbapi.c_ofp_flow_removed_flow_set)
    __swig_setmethods__["mask"] = _mul_nbapi.c_ofp_flow_removed_mask_set
    __swig_getmethods__["mask"] = _mul_nbapi.c_ofp_flow_removed_mask_get
    if _newclass:mask = _swig_property(_mul_nbapi.c_ofp_flow_removed_mask_get, _mul_nbapi.c_ofp_flow_removed_mask_set)
    __swig_setmethods__["cookie"] = _mul_nbapi.c_ofp_flow_removed_cookie_set
    __swig_getmethods__["cookie"] = _mul_nbapi.c_ofp_flow_removed_cookie_get
    if _newclass:cookie = _swig_property(_mul_nbapi.c_ofp_flow_removed_cookie_get, _mul_nbapi.c_ofp_flow_removed_cookie_set)
    __swig_setmethods__["duration_sec"] = _mul_nbapi.c_ofp_flow_removed_duration_sec_set
    __swig_getmethods__["duration_sec"] = _mul_nbapi.c_ofp_flow_removed_duration_sec_get
    if _newclass:duration_sec = _swig_property(_mul_nbapi.c_ofp_flow_removed_duration_sec_get, _mul_nbapi.c_ofp_flow_removed_duration_sec_set)
    __swig_setmethods__["duration_nsec"] = _mul_nbapi.c_ofp_flow_removed_duration_nsec_set
    __swig_getmethods__["duration_nsec"] = _mul_nbapi.c_ofp_flow_removed_duration_nsec_get
    if _newclass:duration_nsec = _swig_property(_mul_nbapi.c_ofp_flow_removed_duration_nsec_get, _mul_nbapi.c_ofp_flow_removed_duration_nsec_set)
    __swig_setmethods__["idle_timeout"] = _mul_nbapi.c_ofp_flow_removed_idle_timeout_set
    __swig_getmethods__["idle_timeout"] = _mul_nbapi.c_ofp_flow_removed_idle_timeout_get
    if _newclass:idle_timeout = _swig_property(_mul_nbapi.c_ofp_flow_removed_idle_timeout_get, _mul_nbapi.c_ofp_flow_removed_idle_timeout_set)
    __swig_setmethods__["priority"] = _mul_nbapi.c_ofp_flow_removed_priority_set
    __swig_getmethods__["priority"] = _mul_nbapi.c_ofp_flow_removed_priority_get
    if _newclass:priority = _swig_property(_mul_nbapi.c_ofp_flow_removed_priority_get, _mul_nbapi.c_ofp_flow_removed_priority_set)
    __swig_setmethods__["reason"] = _mul_nbapi.c_ofp_flow_removed_reason_set
    __swig_getmethods__["reason"] = _mul_nbapi.c_ofp_flow_removed_reason_get
    if _newclass:reason = _swig_property(_mul_nbapi.c_ofp_flow_removed_reason_get, _mul_nbapi.c_ofp_flow_removed_reason_set)
    __swig_setmethods__["pad"] = _mul_nbapi.c_ofp_flow_removed_pad_set
    __swig_getmethods__["pad"] = _mul_nbapi.c_ofp_flow_removed_pad_get
    if _newclass:pad = _swig_property(_mul_nbapi.c_ofp_flow_removed_pad_get, _mul_nbapi.c_ofp_flow_removed_pad_set)
    __swig_setmethods__["packet_count"] = _mul_nbapi.c_ofp_flow_removed_packet_count_set
    __swig_getmethods__["packet_count"] = _mul_nbapi.c_ofp_flow_removed_packet_count_get
    if _newclass:packet_count = _swig_property(_mul_nbapi.c_ofp_flow_removed_packet_count_get, _mul_nbapi.c_ofp_flow_removed_packet_count_set)
    __swig_setmethods__["byte_count"] = _mul_nbapi.c_ofp_flow_removed_byte_count_set
    __swig_getmethods__["byte_count"] = _mul_nbapi.c_ofp_flow_removed_byte_count_get
    if _newclass:byte_count = _swig_property(_mul_nbapi.c_ofp_flow_removed_byte_count_get, _mul_nbapi.c_ofp_flow_removed_byte_count_set)
    def __init__(self): 
        this = _mul_nbapi.new_c_ofp_flow_removed()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_c_ofp_flow_removed
    __del__ = lambda self : None;
c_ofp_flow_removed_swigregister = _mul_nbapi.c_ofp_flow_removed_swigregister
c_ofp_flow_removed_swigregister(c_ofp_flow_removed)

class c_ofp_bkt(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, c_ofp_bkt, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, c_ofp_bkt, name)
    __repr__ = _swig_repr
    __swig_setmethods__["weight"] = _mul_nbapi.c_ofp_bkt_weight_set
    __swig_getmethods__["weight"] = _mul_nbapi.c_ofp_bkt_weight_get
    if _newclass:weight = _swig_property(_mul_nbapi.c_ofp_bkt_weight_get, _mul_nbapi.c_ofp_bkt_weight_set)
    __swig_setmethods__["act_len"] = _mul_nbapi.c_ofp_bkt_act_len_set
    __swig_getmethods__["act_len"] = _mul_nbapi.c_ofp_bkt_act_len_get
    if _newclass:act_len = _swig_property(_mul_nbapi.c_ofp_bkt_act_len_get, _mul_nbapi.c_ofp_bkt_act_len_set)
    __swig_setmethods__["ff_port"] = _mul_nbapi.c_ofp_bkt_ff_port_set
    __swig_getmethods__["ff_port"] = _mul_nbapi.c_ofp_bkt_ff_port_get
    if _newclass:ff_port = _swig_property(_mul_nbapi.c_ofp_bkt_ff_port_get, _mul_nbapi.c_ofp_bkt_ff_port_set)
    __swig_setmethods__["ff_group"] = _mul_nbapi.c_ofp_bkt_ff_group_set
    __swig_getmethods__["ff_group"] = _mul_nbapi.c_ofp_bkt_ff_group_get
    if _newclass:ff_group = _swig_property(_mul_nbapi.c_ofp_bkt_ff_group_get, _mul_nbapi.c_ofp_bkt_ff_group_set)
    __swig_setmethods__["pad"] = _mul_nbapi.c_ofp_bkt_pad_set
    __swig_getmethods__["pad"] = _mul_nbapi.c_ofp_bkt_pad_get
    if _newclass:pad = _swig_property(_mul_nbapi.c_ofp_bkt_pad_get, _mul_nbapi.c_ofp_bkt_pad_set)
    __swig_setmethods__["actions"] = _mul_nbapi.c_ofp_bkt_actions_set
    __swig_getmethods__["actions"] = _mul_nbapi.c_ofp_bkt_actions_get
    if _newclass:actions = _swig_property(_mul_nbapi.c_ofp_bkt_actions_get, _mul_nbapi.c_ofp_bkt_actions_set)
    def __init__(self): 
        this = _mul_nbapi.new_c_ofp_bkt()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_c_ofp_bkt
    __del__ = lambda self : None;
c_ofp_bkt_swigregister = _mul_nbapi.c_ofp_bkt_swigregister
c_ofp_bkt_swigregister(c_ofp_bkt)

class c_ofp_group_mod(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, c_ofp_group_mod, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, c_ofp_group_mod, name)
    __repr__ = _swig_repr
    __swig_setmethods__["header"] = _mul_nbapi.c_ofp_group_mod_header_set
    __swig_getmethods__["header"] = _mul_nbapi.c_ofp_group_mod_header_get
    if _newclass:header = _swig_property(_mul_nbapi.c_ofp_group_mod_header_get, _mul_nbapi.c_ofp_group_mod_header_set)
    __swig_setmethods__["datapath_id"] = _mul_nbapi.c_ofp_group_mod_datapath_id_set
    __swig_getmethods__["datapath_id"] = _mul_nbapi.c_ofp_group_mod_datapath_id_get
    if _newclass:datapath_id = _swig_property(_mul_nbapi.c_ofp_group_mod_datapath_id_get, _mul_nbapi.c_ofp_group_mod_datapath_id_set)
    __swig_setmethods__["command"] = _mul_nbapi.c_ofp_group_mod_command_set
    __swig_getmethods__["command"] = _mul_nbapi.c_ofp_group_mod_command_get
    if _newclass:command = _swig_property(_mul_nbapi.c_ofp_group_mod_command_get, _mul_nbapi.c_ofp_group_mod_command_set)
    __swig_setmethods__["type"] = _mul_nbapi.c_ofp_group_mod_type_set
    __swig_getmethods__["type"] = _mul_nbapi.c_ofp_group_mod_type_get
    if _newclass:type = _swig_property(_mul_nbapi.c_ofp_group_mod_type_get, _mul_nbapi.c_ofp_group_mod_type_set)
    __swig_setmethods__["flags"] = _mul_nbapi.c_ofp_group_mod_flags_set
    __swig_getmethods__["flags"] = _mul_nbapi.c_ofp_group_mod_flags_get
    if _newclass:flags = _swig_property(_mul_nbapi.c_ofp_group_mod_flags_get, _mul_nbapi.c_ofp_group_mod_flags_set)
    __swig_setmethods__["pad"] = _mul_nbapi.c_ofp_group_mod_pad_set
    __swig_getmethods__["pad"] = _mul_nbapi.c_ofp_group_mod_pad_get
    if _newclass:pad = _swig_property(_mul_nbapi.c_ofp_group_mod_pad_get, _mul_nbapi.c_ofp_group_mod_pad_set)
    __swig_setmethods__["group_id"] = _mul_nbapi.c_ofp_group_mod_group_id_set
    __swig_getmethods__["group_id"] = _mul_nbapi.c_ofp_group_mod_group_id_get
    if _newclass:group_id = _swig_property(_mul_nbapi.c_ofp_group_mod_group_id_get, _mul_nbapi.c_ofp_group_mod_group_id_set)
    __swig_setmethods__["packet_count"] = _mul_nbapi.c_ofp_group_mod_packet_count_set
    __swig_getmethods__["packet_count"] = _mul_nbapi.c_ofp_group_mod_packet_count_get
    if _newclass:packet_count = _swig_property(_mul_nbapi.c_ofp_group_mod_packet_count_get, _mul_nbapi.c_ofp_group_mod_packet_count_set)
    __swig_setmethods__["byte_count"] = _mul_nbapi.c_ofp_group_mod_byte_count_set
    __swig_getmethods__["byte_count"] = _mul_nbapi.c_ofp_group_mod_byte_count_get
    if _newclass:byte_count = _swig_property(_mul_nbapi.c_ofp_group_mod_byte_count_get, _mul_nbapi.c_ofp_group_mod_byte_count_set)
    __swig_setmethods__["duration_sec"] = _mul_nbapi.c_ofp_group_mod_duration_sec_set
    __swig_getmethods__["duration_sec"] = _mul_nbapi.c_ofp_group_mod_duration_sec_get
    if _newclass:duration_sec = _swig_property(_mul_nbapi.c_ofp_group_mod_duration_sec_get, _mul_nbapi.c_ofp_group_mod_duration_sec_set)
    __swig_setmethods__["duration_nsec"] = _mul_nbapi.c_ofp_group_mod_duration_nsec_set
    __swig_getmethods__["duration_nsec"] = _mul_nbapi.c_ofp_group_mod_duration_nsec_get
    if _newclass:duration_nsec = _swig_property(_mul_nbapi.c_ofp_group_mod_duration_nsec_get, _mul_nbapi.c_ofp_group_mod_duration_nsec_set)
    __swig_setmethods__["buckets"] = _mul_nbapi.c_ofp_group_mod_buckets_set
    __swig_getmethods__["buckets"] = _mul_nbapi.c_ofp_group_mod_buckets_get
    if _newclass:buckets = _swig_property(_mul_nbapi.c_ofp_group_mod_buckets_get, _mul_nbapi.c_ofp_group_mod_buckets_set)
    def __init__(self): 
        this = _mul_nbapi.new_c_ofp_group_mod()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_c_ofp_group_mod
    __del__ = lambda self : None;
c_ofp_group_mod_swigregister = _mul_nbapi.c_ofp_group_mod_swigregister
c_ofp_group_mod_swigregister(c_ofp_group_mod)
C_OFPG_ADD = _mul_nbapi.C_OFPG_ADD
C_OFPG_DEL = _mul_nbapi.C_OFPG_DEL
C_GRP_STATIC = _mul_nbapi.C_GRP_STATIC
C_GRP_GSTATS = _mul_nbapi.C_GRP_GSTATS
C_GRP_EXPIRED = _mul_nbapi.C_GRP_EXPIRED
C_GRP_BARRIER_EN = _mul_nbapi.C_GRP_BARRIER_EN
C_GRP_NOT_INSTALLED = _mul_nbapi.C_GRP_NOT_INSTALLED
C_GRP_RESIDUAL = _mul_nbapi.C_GRP_RESIDUAL
C_GRP_STALE = _mul_nbapi.C_GRP_STALE
C_GRP_LOCAL = _mul_nbapi.C_GRP_LOCAL

class c_ofp_meter_mod(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, c_ofp_meter_mod, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, c_ofp_meter_mod, name)
    __repr__ = _swig_repr
    __swig_setmethods__["header"] = _mul_nbapi.c_ofp_meter_mod_header_set
    __swig_getmethods__["header"] = _mul_nbapi.c_ofp_meter_mod_header_get
    if _newclass:header = _swig_property(_mul_nbapi.c_ofp_meter_mod_header_get, _mul_nbapi.c_ofp_meter_mod_header_set)
    __swig_setmethods__["datapath_id"] = _mul_nbapi.c_ofp_meter_mod_datapath_id_set
    __swig_getmethods__["datapath_id"] = _mul_nbapi.c_ofp_meter_mod_datapath_id_get
    if _newclass:datapath_id = _swig_property(_mul_nbapi.c_ofp_meter_mod_datapath_id_get, _mul_nbapi.c_ofp_meter_mod_datapath_id_set)
    __swig_setmethods__["command"] = _mul_nbapi.c_ofp_meter_mod_command_set
    __swig_getmethods__["command"] = _mul_nbapi.c_ofp_meter_mod_command_get
    if _newclass:command = _swig_property(_mul_nbapi.c_ofp_meter_mod_command_get, _mul_nbapi.c_ofp_meter_mod_command_set)
    __swig_setmethods__["c_flags"] = _mul_nbapi.c_ofp_meter_mod_c_flags_set
    __swig_getmethods__["c_flags"] = _mul_nbapi.c_ofp_meter_mod_c_flags_get
    if _newclass:c_flags = _swig_property(_mul_nbapi.c_ofp_meter_mod_c_flags_get, _mul_nbapi.c_ofp_meter_mod_c_flags_set)
    __swig_setmethods__["flags"] = _mul_nbapi.c_ofp_meter_mod_flags_set
    __swig_getmethods__["flags"] = _mul_nbapi.c_ofp_meter_mod_flags_get
    if _newclass:flags = _swig_property(_mul_nbapi.c_ofp_meter_mod_flags_get, _mul_nbapi.c_ofp_meter_mod_flags_set)
    __swig_setmethods__["meter_id"] = _mul_nbapi.c_ofp_meter_mod_meter_id_set
    __swig_getmethods__["meter_id"] = _mul_nbapi.c_ofp_meter_mod_meter_id_get
    if _newclass:meter_id = _swig_property(_mul_nbapi.c_ofp_meter_mod_meter_id_get, _mul_nbapi.c_ofp_meter_mod_meter_id_set)
    __swig_setmethods__["byte_count"] = _mul_nbapi.c_ofp_meter_mod_byte_count_set
    __swig_getmethods__["byte_count"] = _mul_nbapi.c_ofp_meter_mod_byte_count_get
    if _newclass:byte_count = _swig_property(_mul_nbapi.c_ofp_meter_mod_byte_count_get, _mul_nbapi.c_ofp_meter_mod_byte_count_set)
    __swig_setmethods__["packet_count"] = _mul_nbapi.c_ofp_meter_mod_packet_count_set
    __swig_getmethods__["packet_count"] = _mul_nbapi.c_ofp_meter_mod_packet_count_get
    if _newclass:packet_count = _swig_property(_mul_nbapi.c_ofp_meter_mod_packet_count_get, _mul_nbapi.c_ofp_meter_mod_packet_count_set)
    __swig_setmethods__["flow_count"] = _mul_nbapi.c_ofp_meter_mod_flow_count_set
    __swig_getmethods__["flow_count"] = _mul_nbapi.c_ofp_meter_mod_flow_count_get
    if _newclass:flow_count = _swig_property(_mul_nbapi.c_ofp_meter_mod_flow_count_get, _mul_nbapi.c_ofp_meter_mod_flow_count_set)
    __swig_setmethods__["pad"] = _mul_nbapi.c_ofp_meter_mod_pad_set
    __swig_getmethods__["pad"] = _mul_nbapi.c_ofp_meter_mod_pad_get
    if _newclass:pad = _swig_property(_mul_nbapi.c_ofp_meter_mod_pad_get, _mul_nbapi.c_ofp_meter_mod_pad_set)
    __swig_setmethods__["duration_sec"] = _mul_nbapi.c_ofp_meter_mod_duration_sec_set
    __swig_getmethods__["duration_sec"] = _mul_nbapi.c_ofp_meter_mod_duration_sec_get
    if _newclass:duration_sec = _swig_property(_mul_nbapi.c_ofp_meter_mod_duration_sec_get, _mul_nbapi.c_ofp_meter_mod_duration_sec_set)
    __swig_setmethods__["duration_nsec"] = _mul_nbapi.c_ofp_meter_mod_duration_nsec_set
    __swig_getmethods__["duration_nsec"] = _mul_nbapi.c_ofp_meter_mod_duration_nsec_get
    if _newclass:duration_nsec = _swig_property(_mul_nbapi.c_ofp_meter_mod_duration_nsec_get, _mul_nbapi.c_ofp_meter_mod_duration_nsec_set)
    __swig_setmethods__["bands"] = _mul_nbapi.c_ofp_meter_mod_bands_set
    __swig_getmethods__["bands"] = _mul_nbapi.c_ofp_meter_mod_bands_get
    if _newclass:bands = _swig_property(_mul_nbapi.c_ofp_meter_mod_bands_get, _mul_nbapi.c_ofp_meter_mod_bands_set)
    def __init__(self): 
        this = _mul_nbapi.new_c_ofp_meter_mod()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_c_ofp_meter_mod
    __del__ = lambda self : None;
c_ofp_meter_mod_swigregister = _mul_nbapi.c_ofp_meter_mod_swigregister
c_ofp_meter_mod_swigregister(c_ofp_meter_mod)
C_OFPMC_ADD = _mul_nbapi.C_OFPMC_ADD
C_OFPMC_DEL = _mul_nbapi.C_OFPMC_DEL
C_METER_STATIC = _mul_nbapi.C_METER_STATIC
C_METER_GSTATS = _mul_nbapi.C_METER_GSTATS
C_METER_EXPIRED = _mul_nbapi.C_METER_EXPIRED
C_METER_BARRIER_EN = _mul_nbapi.C_METER_BARRIER_EN
C_METER_NOT_INSTALLED = _mul_nbapi.C_METER_NOT_INSTALLED
C_METER_RESIDUAL = _mul_nbapi.C_METER_RESIDUAL
C_METER_STALE = _mul_nbapi.C_METER_STALE

class c_ofp_port_mod(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, c_ofp_port_mod, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, c_ofp_port_mod, name)
    __repr__ = _swig_repr
    __swig_setmethods__["header"] = _mul_nbapi.c_ofp_port_mod_header_set
    __swig_getmethods__["header"] = _mul_nbapi.c_ofp_port_mod_header_get
    if _newclass:header = _swig_property(_mul_nbapi.c_ofp_port_mod_header_get, _mul_nbapi.c_ofp_port_mod_header_set)
    __swig_setmethods__["datapath_id"] = _mul_nbapi.c_ofp_port_mod_datapath_id_set
    __swig_getmethods__["datapath_id"] = _mul_nbapi.c_ofp_port_mod_datapath_id_get
    if _newclass:datapath_id = _swig_property(_mul_nbapi.c_ofp_port_mod_datapath_id_get, _mul_nbapi.c_ofp_port_mod_datapath_id_set)
    __swig_setmethods__["port_no"] = _mul_nbapi.c_ofp_port_mod_port_no_set
    __swig_getmethods__["port_no"] = _mul_nbapi.c_ofp_port_mod_port_no_get
    if _newclass:port_no = _swig_property(_mul_nbapi.c_ofp_port_mod_port_no_get, _mul_nbapi.c_ofp_port_mod_port_no_set)
    __swig_setmethods__["config"] = _mul_nbapi.c_ofp_port_mod_config_set
    __swig_getmethods__["config"] = _mul_nbapi.c_ofp_port_mod_config_get
    if _newclass:config = _swig_property(_mul_nbapi.c_ofp_port_mod_config_get, _mul_nbapi.c_ofp_port_mod_config_set)
    __swig_setmethods__["mask"] = _mul_nbapi.c_ofp_port_mod_mask_set
    __swig_getmethods__["mask"] = _mul_nbapi.c_ofp_port_mod_mask_get
    if _newclass:mask = _swig_property(_mul_nbapi.c_ofp_port_mod_mask_get, _mul_nbapi.c_ofp_port_mod_mask_set)
    __swig_setmethods__["pad"] = _mul_nbapi.c_ofp_port_mod_pad_set
    __swig_getmethods__["pad"] = _mul_nbapi.c_ofp_port_mod_pad_get
    if _newclass:pad = _swig_property(_mul_nbapi.c_ofp_port_mod_pad_get, _mul_nbapi.c_ofp_port_mod_pad_set)
    def __init__(self): 
        this = _mul_nbapi.new_c_ofp_port_mod()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_c_ofp_port_mod
    __del__ = lambda self : None;
c_ofp_port_mod_swigregister = _mul_nbapi.c_ofp_port_mod_swigregister
c_ofp_port_mod_swigregister(c_ofp_port_mod)

class c_ofp_packet_out(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, c_ofp_packet_out, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, c_ofp_packet_out, name)
    __repr__ = _swig_repr
    __swig_setmethods__["header"] = _mul_nbapi.c_ofp_packet_out_header_set
    __swig_getmethods__["header"] = _mul_nbapi.c_ofp_packet_out_header_get
    if _newclass:header = _swig_property(_mul_nbapi.c_ofp_packet_out_header_get, _mul_nbapi.c_ofp_packet_out_header_set)
    __swig_setmethods__["datapath_id"] = _mul_nbapi.c_ofp_packet_out_datapath_id_set
    __swig_getmethods__["datapath_id"] = _mul_nbapi.c_ofp_packet_out_datapath_id_get
    if _newclass:datapath_id = _swig_property(_mul_nbapi.c_ofp_packet_out_datapath_id_get, _mul_nbapi.c_ofp_packet_out_datapath_id_set)
    __swig_setmethods__["buffer_id"] = _mul_nbapi.c_ofp_packet_out_buffer_id_set
    __swig_getmethods__["buffer_id"] = _mul_nbapi.c_ofp_packet_out_buffer_id_get
    if _newclass:buffer_id = _swig_property(_mul_nbapi.c_ofp_packet_out_buffer_id_get, _mul_nbapi.c_ofp_packet_out_buffer_id_set)
    __swig_setmethods__["in_port"] = _mul_nbapi.c_ofp_packet_out_in_port_set
    __swig_getmethods__["in_port"] = _mul_nbapi.c_ofp_packet_out_in_port_get
    if _newclass:in_port = _swig_property(_mul_nbapi.c_ofp_packet_out_in_port_get, _mul_nbapi.c_ofp_packet_out_in_port_set)
    __swig_setmethods__["actions_len"] = _mul_nbapi.c_ofp_packet_out_actions_len_set
    __swig_getmethods__["actions_len"] = _mul_nbapi.c_ofp_packet_out_actions_len_get
    if _newclass:actions_len = _swig_property(_mul_nbapi.c_ofp_packet_out_actions_len_get, _mul_nbapi.c_ofp_packet_out_actions_len_set)
    __swig_setmethods__["pad"] = _mul_nbapi.c_ofp_packet_out_pad_set
    __swig_getmethods__["pad"] = _mul_nbapi.c_ofp_packet_out_pad_get
    if _newclass:pad = _swig_property(_mul_nbapi.c_ofp_packet_out_pad_get, _mul_nbapi.c_ofp_packet_out_pad_set)
    __swig_setmethods__["actions"] = _mul_nbapi.c_ofp_packet_out_actions_set
    __swig_getmethods__["actions"] = _mul_nbapi.c_ofp_packet_out_actions_get
    if _newclass:actions = _swig_property(_mul_nbapi.c_ofp_packet_out_actions_get, _mul_nbapi.c_ofp_packet_out_actions_set)
    def __init__(self): 
        this = _mul_nbapi.new_c_ofp_packet_out()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_c_ofp_packet_out
    __del__ = lambda self : None;
c_ofp_packet_out_swigregister = _mul_nbapi.c_ofp_packet_out_swigregister
c_ofp_packet_out_swigregister(c_ofp_packet_out)

class c_ofp_register_app(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, c_ofp_register_app, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, c_ofp_register_app, name)
    __repr__ = _swig_repr
    __swig_setmethods__["header"] = _mul_nbapi.c_ofp_register_app_header_set
    __swig_getmethods__["header"] = _mul_nbapi.c_ofp_register_app_header_get
    if _newclass:header = _swig_property(_mul_nbapi.c_ofp_register_app_header_get, _mul_nbapi.c_ofp_register_app_header_set)
    __swig_setmethods__["app_name"] = _mul_nbapi.c_ofp_register_app_app_name_set
    __swig_getmethods__["app_name"] = _mul_nbapi.c_ofp_register_app_app_name_get
    if _newclass:app_name = _swig_property(_mul_nbapi.c_ofp_register_app_app_name_get, _mul_nbapi.c_ofp_register_app_app_name_set)
    __swig_setmethods__["app_flags"] = _mul_nbapi.c_ofp_register_app_app_flags_set
    __swig_getmethods__["app_flags"] = _mul_nbapi.c_ofp_register_app_app_flags_get
    if _newclass:app_flags = _swig_property(_mul_nbapi.c_ofp_register_app_app_flags_get, _mul_nbapi.c_ofp_register_app_app_flags_set)
    __swig_setmethods__["ev_mask"] = _mul_nbapi.c_ofp_register_app_ev_mask_set
    __swig_getmethods__["ev_mask"] = _mul_nbapi.c_ofp_register_app_ev_mask_get
    if _newclass:ev_mask = _swig_property(_mul_nbapi.c_ofp_register_app_ev_mask_get, _mul_nbapi.c_ofp_register_app_ev_mask_set)
    __swig_setmethods__["dpid"] = _mul_nbapi.c_ofp_register_app_dpid_set
    __swig_getmethods__["dpid"] = _mul_nbapi.c_ofp_register_app_dpid_get
    if _newclass:dpid = _swig_property(_mul_nbapi.c_ofp_register_app_dpid_get, _mul_nbapi.c_ofp_register_app_dpid_set)
    __swig_setmethods__["app_cookie"] = _mul_nbapi.c_ofp_register_app_app_cookie_set
    __swig_getmethods__["app_cookie"] = _mul_nbapi.c_ofp_register_app_app_cookie_get
    if _newclass:app_cookie = _swig_property(_mul_nbapi.c_ofp_register_app_app_cookie_get, _mul_nbapi.c_ofp_register_app_app_cookie_set)
    __swig_setmethods__["dpid_list"] = _mul_nbapi.c_ofp_register_app_dpid_list_set
    __swig_getmethods__["dpid_list"] = _mul_nbapi.c_ofp_register_app_dpid_list_get
    if _newclass:dpid_list = _swig_property(_mul_nbapi.c_ofp_register_app_dpid_list_get, _mul_nbapi.c_ofp_register_app_dpid_list_set)
    def __init__(self): 
        this = _mul_nbapi.new_c_ofp_register_app()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_c_ofp_register_app
    __del__ = lambda self : None;
c_ofp_register_app_swigregister = _mul_nbapi.c_ofp_register_app_swigregister
c_ofp_register_app_swigregister(c_ofp_register_app)
C_MAX_APP_STRLEN = _mul_nbapi.C_MAX_APP_STRLEN
C_APP_ALL_SW = _mul_nbapi.C_APP_ALL_SW
C_APP_REMOTE = _mul_nbapi.C_APP_REMOTE
C_APP_AUX_REMOTE = _mul_nbapi.C_APP_AUX_REMOTE

class c_ofp_unregister_app(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, c_ofp_unregister_app, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, c_ofp_unregister_app, name)
    __repr__ = _swig_repr
    __swig_setmethods__["header"] = _mul_nbapi.c_ofp_unregister_app_header_set
    __swig_getmethods__["header"] = _mul_nbapi.c_ofp_unregister_app_header_get
    if _newclass:header = _swig_property(_mul_nbapi.c_ofp_unregister_app_header_get, _mul_nbapi.c_ofp_unregister_app_header_set)
    __swig_setmethods__["app_name"] = _mul_nbapi.c_ofp_unregister_app_app_name_set
    __swig_getmethods__["app_name"] = _mul_nbapi.c_ofp_unregister_app_app_name_get
    if _newclass:app_name = _swig_property(_mul_nbapi.c_ofp_unregister_app_app_name_get, _mul_nbapi.c_ofp_unregister_app_app_name_set)
    def __init__(self): 
        this = _mul_nbapi.new_c_ofp_unregister_app()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_c_ofp_unregister_app
    __del__ = lambda self : None;
c_ofp_unregister_app_swigregister = _mul_nbapi.c_ofp_unregister_app_swigregister
c_ofp_unregister_app_swigregister(c_ofp_unregister_app)

class c_ofp_set_fp_ops(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, c_ofp_set_fp_ops, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, c_ofp_set_fp_ops, name)
    __repr__ = _swig_repr
    __swig_setmethods__["header"] = _mul_nbapi.c_ofp_set_fp_ops_header_set
    __swig_getmethods__["header"] = _mul_nbapi.c_ofp_set_fp_ops_header_get
    if _newclass:header = _swig_property(_mul_nbapi.c_ofp_set_fp_ops_header_get, _mul_nbapi.c_ofp_set_fp_ops_header_set)
    __swig_setmethods__["datapath_id"] = _mul_nbapi.c_ofp_set_fp_ops_datapath_id_set
    __swig_getmethods__["datapath_id"] = _mul_nbapi.c_ofp_set_fp_ops_datapath_id_get
    if _newclass:datapath_id = _swig_property(_mul_nbapi.c_ofp_set_fp_ops_datapath_id_get, _mul_nbapi.c_ofp_set_fp_ops_datapath_id_set)
    __swig_setmethods__["fp_type"] = _mul_nbapi.c_ofp_set_fp_ops_fp_type_set
    __swig_getmethods__["fp_type"] = _mul_nbapi.c_ofp_set_fp_ops_fp_type_get
    if _newclass:fp_type = _swig_property(_mul_nbapi.c_ofp_set_fp_ops_fp_type_get, _mul_nbapi.c_ofp_set_fp_ops_fp_type_set)
    __swig_setmethods__["pad"] = _mul_nbapi.c_ofp_set_fp_ops_pad_set
    __swig_getmethods__["pad"] = _mul_nbapi.c_ofp_set_fp_ops_pad_get
    if _newclass:pad = _swig_property(_mul_nbapi.c_ofp_set_fp_ops_pad_get, _mul_nbapi.c_ofp_set_fp_ops_pad_set)
    def __init__(self): 
        this = _mul_nbapi.new_c_ofp_set_fp_ops()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_c_ofp_set_fp_ops
    __del__ = lambda self : None;
c_ofp_set_fp_ops_swigregister = _mul_nbapi.c_ofp_set_fp_ops_swigregister
c_ofp_set_fp_ops_swigregister(c_ofp_set_fp_ops)
C_FP_TYPE_DFL = _mul_nbapi.C_FP_TYPE_DFL
C_FP_TYPE_L2 = _mul_nbapi.C_FP_TYPE_L2

class c_ofp_async_config(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, c_ofp_async_config, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, c_ofp_async_config, name)
    __repr__ = _swig_repr
    __swig_setmethods__["datapath_id"] = _mul_nbapi.c_ofp_async_config_datapath_id_set
    __swig_getmethods__["datapath_id"] = _mul_nbapi.c_ofp_async_config_datapath_id_get
    if _newclass:datapath_id = _swig_property(_mul_nbapi.c_ofp_async_config_datapath_id_get, _mul_nbapi.c_ofp_async_config_datapath_id_set)
    __swig_setmethods__["packet_in_mask"] = _mul_nbapi.c_ofp_async_config_packet_in_mask_set
    __swig_getmethods__["packet_in_mask"] = _mul_nbapi.c_ofp_async_config_packet_in_mask_get
    if _newclass:packet_in_mask = _swig_property(_mul_nbapi.c_ofp_async_config_packet_in_mask_get, _mul_nbapi.c_ofp_async_config_packet_in_mask_set)
    __swig_setmethods__["port_status_mask"] = _mul_nbapi.c_ofp_async_config_port_status_mask_set
    __swig_getmethods__["port_status_mask"] = _mul_nbapi.c_ofp_async_config_port_status_mask_get
    if _newclass:port_status_mask = _swig_property(_mul_nbapi.c_ofp_async_config_port_status_mask_get, _mul_nbapi.c_ofp_async_config_port_status_mask_set)
    __swig_setmethods__["flow_removed_mask"] = _mul_nbapi.c_ofp_async_config_flow_removed_mask_set
    __swig_getmethods__["flow_removed_mask"] = _mul_nbapi.c_ofp_async_config_flow_removed_mask_get
    if _newclass:flow_removed_mask = _swig_property(_mul_nbapi.c_ofp_async_config_flow_removed_mask_get, _mul_nbapi.c_ofp_async_config_flow_removed_mask_set)
    def __init__(self): 
        this = _mul_nbapi.new_c_ofp_async_config()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_c_ofp_async_config
    __del__ = lambda self : None;
c_ofp_async_config_swigregister = _mul_nbapi.c_ofp_async_config_swigregister
c_ofp_async_config_swigregister(c_ofp_async_config)

class c_ofp_auxapp_cmd(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, c_ofp_auxapp_cmd, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, c_ofp_auxapp_cmd, name)
    __repr__ = _swig_repr
    __swig_setmethods__["header"] = _mul_nbapi.c_ofp_auxapp_cmd_header_set
    __swig_getmethods__["header"] = _mul_nbapi.c_ofp_auxapp_cmd_header_get
    if _newclass:header = _swig_property(_mul_nbapi.c_ofp_auxapp_cmd_header_get, _mul_nbapi.c_ofp_auxapp_cmd_header_set)
    __swig_setmethods__["cmd_code"] = _mul_nbapi.c_ofp_auxapp_cmd_cmd_code_set
    __swig_getmethods__["cmd_code"] = _mul_nbapi.c_ofp_auxapp_cmd_cmd_code_get
    if _newclass:cmd_code = _swig_property(_mul_nbapi.c_ofp_auxapp_cmd_cmd_code_get, _mul_nbapi.c_ofp_auxapp_cmd_cmd_code_set)
    __swig_setmethods__["pad"] = _mul_nbapi.c_ofp_auxapp_cmd_pad_set
    __swig_getmethods__["pad"] = _mul_nbapi.c_ofp_auxapp_cmd_pad_get
    if _newclass:pad = _swig_property(_mul_nbapi.c_ofp_auxapp_cmd_pad_get, _mul_nbapi.c_ofp_auxapp_cmd_pad_set)
    __swig_setmethods__["data"] = _mul_nbapi.c_ofp_auxapp_cmd_data_set
    __swig_getmethods__["data"] = _mul_nbapi.c_ofp_auxapp_cmd_data_get
    if _newclass:data = _swig_property(_mul_nbapi.c_ofp_auxapp_cmd_data_get, _mul_nbapi.c_ofp_auxapp_cmd_data_set)
    def __init__(self): 
        this = _mul_nbapi.new_c_ofp_auxapp_cmd()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_c_ofp_auxapp_cmd
    __del__ = lambda self : None;
c_ofp_auxapp_cmd_swigregister = _mul_nbapi.c_ofp_auxapp_cmd_swigregister
c_ofp_auxapp_cmd_swigregister(c_ofp_auxapp_cmd)
C_AUX_CMD_SUCCESS = _mul_nbapi.C_AUX_CMD_SUCCESS
C_AUX_CMD_ECHO = _mul_nbapi.C_AUX_CMD_ECHO
C_AUX_CMD_MUL_CORE_BASE = _mul_nbapi.C_AUX_CMD_MUL_CORE_BASE
C_AUX_CMD_MUL_GET_SWITCHES = _mul_nbapi.C_AUX_CMD_MUL_GET_SWITCHES
C_AUX_CMD_MUL_GET_SWITCHES_REPLY = _mul_nbapi.C_AUX_CMD_MUL_GET_SWITCHES_REPLY
C_AUX_CMD_MUL_GET_SWITCH_DETAIL = _mul_nbapi.C_AUX_CMD_MUL_GET_SWITCH_DETAIL
C_AUX_CMD_MUL_GET_APP_FLOW = _mul_nbapi.C_AUX_CMD_MUL_GET_APP_FLOW
C_AUX_CMD_MUL_GET_ALL_FLOWS = _mul_nbapi.C_AUX_CMD_MUL_GET_ALL_FLOWS
C_AUX_CMD_MUL_GET_GROUPS = _mul_nbapi.C_AUX_CMD_MUL_GET_GROUPS
C_AUX_CMD_MUL_GET_METERS = _mul_nbapi.C_AUX_CMD_MUL_GET_METERS
C_AUX_CMD_MUL_SWITCH_METER_FEAT = _mul_nbapi.C_AUX_CMD_MUL_SWITCH_METER_FEAT
C_AUX_CMD_MUL_SWITCH_GROUP_FEAT = _mul_nbapi.C_AUX_CMD_MUL_SWITCH_GROUP_FEAT
C_AUX_CMD_MUL_SWITCH_TABLE_FEAT = _mul_nbapi.C_AUX_CMD_MUL_SWITCH_TABLE_FEAT
C_AUX_CMD_MUL_SWITCH_RLIM = _mul_nbapi.C_AUX_CMD_MUL_SWITCH_RLIM
C_AUX_CMD_MUL_SWITCH_GET_RLIM = _mul_nbapi.C_AUX_CMD_MUL_SWITCH_GET_RLIM
C_AUX_CMD_MUL_SWITCH_SET_OF_DUMP = _mul_nbapi.C_AUX_CMD_MUL_SWITCH_SET_OF_DUMP
C_AUX_CMD_MUL_SWITCH_SET_STATS_STRAT = _mul_nbapi.C_AUX_CMD_MUL_SWITCH_SET_STATS_STRAT
C_AUX_CMD_ASYNC_CONFIG = _mul_nbapi.C_AUX_CMD_ASYNC_CONFIG
C_AUX_CMD_MUL_SWITCH_STATS_MODE_CONFIG = _mul_nbapi.C_AUX_CMD_MUL_SWITCH_STATS_MODE_CONFIG
C_AUX_CMD_MUL_SWITCH_GET_TBL_STATS = _mul_nbapi.C_AUX_CMD_MUL_SWITCH_GET_TBL_STATS
C_AUX_CMD_MUL_SWITCH_PORT_QUERY = _mul_nbapi.C_AUX_CMD_MUL_SWITCH_PORT_QUERY
C_AUX_CMD_MUL_SWITCH_PORT_QQUERY = _mul_nbapi.C_AUX_CMD_MUL_SWITCH_PORT_QQUERY
C_AUX_CMD_MUL_LOOP_STATUS = _mul_nbapi.C_AUX_CMD_MUL_LOOP_STATUS
C_AUX_CMD_MUL_GET_FLOW = _mul_nbapi.C_AUX_CMD_MUL_GET_FLOW
C_AUX_CMD_MUL_LOOP_EN = _mul_nbapi.C_AUX_CMD_MUL_LOOP_EN
C_AUX_CMD_MUL_LOOP_DIS = _mul_nbapi.C_AUX_CMD_MUL_LOOP_DIS
C_AUX_CMD_MUL_TR_STATUS = _mul_nbapi.C_AUX_CMD_MUL_TR_STATUS
C_AUX_CMD_MUL_GET_MATCHED_GROUP = _mul_nbapi.C_AUX_CMD_MUL_GET_MATCHED_GROUP
C_AUX_CMD_MUL_GET_MATCHED_METER = _mul_nbapi.C_AUX_CMD_MUL_GET_MATCHED_METER
C_AUX_CMD_MUL_MOD_UFLOW = _mul_nbapi.C_AUX_CMD_MUL_MOD_UFLOW
C_AUX_CMD_MUL_GET_SWITCH_DESC = _mul_nbapi.C_AUX_CMD_MUL_GET_SWITCH_DESC
C_AUX_CMD_TR_BASE = _mul_nbapi.C_AUX_CMD_TR_BASE
C_AUX_CMD_TR_GET_NEIGH = _mul_nbapi.C_AUX_CMD_TR_GET_NEIGH
C_AUX_CMD_TR_NEIGH_STATUS = _mul_nbapi.C_AUX_CMD_TR_NEIGH_STATUS
C_AUX_CMD_FAB_BASE = _mul_nbapi.C_AUX_CMD_FAB_BASE
C_AUX_CMD_FAB_HOST_ADD = _mul_nbapi.C_AUX_CMD_FAB_HOST_ADD
C_AUX_CMD_FAB_HOST_DEL = _mul_nbapi.C_AUX_CMD_FAB_HOST_DEL
C_AUX_CMD_FAB_SHOW_ACTIVE_HOSTS = _mul_nbapi.C_AUX_CMD_FAB_SHOW_ACTIVE_HOSTS
C_AUX_CMD_FAB_SHOW_INACTIVE_HOSTS = _mul_nbapi.C_AUX_CMD_FAB_SHOW_INACTIVE_HOSTS
C_AUX_CMD_FAB_SHOW_ROUTES = _mul_nbapi.C_AUX_CMD_FAB_SHOW_ROUTES
C_AUX_CMD_FAB_ROUTE = _mul_nbapi.C_AUX_CMD_FAB_ROUTE
C_AUX_CMD_FAB_SHOW_TENANT_NW = _mul_nbapi.C_AUX_CMD_FAB_SHOW_TENANT_NW
C_AUX_CMD_FAB_PORT_TNID_ADD = _mul_nbapi.C_AUX_CMD_FAB_PORT_TNID_ADD
C_AUX_CMD_FAB_PORT_TNID_DEL = _mul_nbapi.C_AUX_CMD_FAB_PORT_TNID_DEL
C_AUX_CMD_FAB_PORT_TNID_SHOW = _mul_nbapi.C_AUX_CMD_FAB_PORT_TNID_SHOW
C_AUX_CMD_FAB_SHOW_HOST_ROUTE = _mul_nbapi.C_AUX_CMD_FAB_SHOW_HOST_ROUTE
C_AUX_CMD_HA_BASE = _mul_nbapi.C_AUX_CMD_HA_BASE
C_AUX_CMD_HA_STATE = _mul_nbapi.C_AUX_CMD_HA_STATE
C_AUX_CMD_HA_REQ_STATE = _mul_nbapi.C_AUX_CMD_HA_REQ_STATE
C_AUX_CMD_HA_STATE_RESP = _mul_nbapi.C_AUX_CMD_HA_STATE_RESP
C_AUX_CMD_HA_SYNC_REQ = _mul_nbapi.C_AUX_CMD_HA_SYNC_REQ
C_AUX_CMD_HA_SYNC_DONE = _mul_nbapi.C_AUX_CMD_HA_SYNC_DONE
C_AUX_CMD_MAKDI_BASE = _mul_nbapi.C_AUX_CMD_MAKDI_BASE
C_AUX_CMD_MAKDI_USER_ADD = _mul_nbapi.C_AUX_CMD_MAKDI_USER_ADD
C_AUX_CMD_MAKDI_USER_DEL = _mul_nbapi.C_AUX_CMD_MAKDI_USER_DEL
C_AUX_CMD_MAKDI_SHOW_USER = _mul_nbapi.C_AUX_CMD_MAKDI_SHOW_USER
C_AUX_CMD_MAKDI_USER = _mul_nbapi.C_AUX_CMD_MAKDI_USER
C_AUX_CMD_MAKDI_SERVICE_ADD = _mul_nbapi.C_AUX_CMD_MAKDI_SERVICE_ADD
C_AUX_CMD_MAKDI_SERVICE_DEL = _mul_nbapi.C_AUX_CMD_MAKDI_SERVICE_DEL
C_AUX_CMD_MAKDI_SHOW_SERVICE = _mul_nbapi.C_AUX_CMD_MAKDI_SHOW_SERVICE
C_AUX_CMD_MAKDI_NFV_GROUP_ADD = _mul_nbapi.C_AUX_CMD_MAKDI_NFV_GROUP_ADD
C_AUX_CMD_MAKDI_NFV_GROUP_DEL = _mul_nbapi.C_AUX_CMD_MAKDI_NFV_GROUP_DEL
C_AUX_CMD_MAKDI_SHOW_NFV_GROUP = _mul_nbapi.C_AUX_CMD_MAKDI_SHOW_NFV_GROUP
C_AUX_CMD_MAKDI_NFV_ADD = _mul_nbapi.C_AUX_CMD_MAKDI_NFV_ADD
C_AUX_CMD_MAKDI_NFV_DEL = _mul_nbapi.C_AUX_CMD_MAKDI_NFV_DEL
C_AUX_CMD_MAKDI_SHOW_NFV = _mul_nbapi.C_AUX_CMD_MAKDI_SHOW_NFV
C_AUX_CMD_MAKDI_SERVICE_CHAIN_ADD = _mul_nbapi.C_AUX_CMD_MAKDI_SERVICE_CHAIN_ADD
C_AUX_CMD_MAKDI_SERVICE_CHAIN_DEL = _mul_nbapi.C_AUX_CMD_MAKDI_SERVICE_CHAIN_DEL
C_AUX_CMD_MAKDI_SHOW_SERVICE_CHAIN = _mul_nbapi.C_AUX_CMD_MAKDI_SHOW_SERVICE_CHAIN
C_AUX_CMD_MAKDI_DEFAULT_SERVICE_ADD = _mul_nbapi.C_AUX_CMD_MAKDI_DEFAULT_SERVICE_ADD
C_AUX_CMD_MAKDI_DEFAULT_SERVICE_DEL = _mul_nbapi.C_AUX_CMD_MAKDI_DEFAULT_SERVICE_DEL
C_AUX_CMD_MAKDI_SHOW_DEFAULT_SERVICE = _mul_nbapi.C_AUX_CMD_MAKDI_SHOW_DEFAULT_SERVICE
C_AUX_CMD_MAKDI_NFV_STATS = _mul_nbapi.C_AUX_CMD_MAKDI_NFV_STATS
C_AUX_CMD_MAKDI_SERVICE_STATS = _mul_nbapi.C_AUX_CMD_MAKDI_SERVICE_STATS
C_AUX_CMD_MAKDI_USER_STATS = _mul_nbapi.C_AUX_CMD_MAKDI_USER_STATS
C_AUX_CMD_MAKDI_NFV_STATS_ALL = _mul_nbapi.C_AUX_CMD_MAKDI_NFV_STATS_ALL
C_AUX_CMD_MAKDI_SERVICE_STATS_ALL = _mul_nbapi.C_AUX_CMD_MAKDI_SERVICE_STATS_ALL
C_AUX_CMD_MAKDI_USER_STATS_ALL = _mul_nbapi.C_AUX_CMD_MAKDI_USER_STATS_ALL
C_AUX_CMD_MAKDI_SHOW_SERVICE_CHAIN_ALL = _mul_nbapi.C_AUX_CMD_MAKDI_SHOW_SERVICE_CHAIN_ALL
C_AUX_CMD_CONX_BASE = _mul_nbapi.C_AUX_CMD_CONX_BASE
C_AUX_CMD_CONX_ADD_UFLOW = _mul_nbapi.C_AUX_CMD_CONX_ADD_UFLOW
C_AUX_CMD_CONX_DEL_UFLOW = _mul_nbapi.C_AUX_CMD_CONX_DEL_UFLOW
C_AUX_CMD_CONX_STALE = _mul_nbapi.C_AUX_CMD_CONX_STALE

class c_ofp_req_dpid_attr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, c_ofp_req_dpid_attr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, c_ofp_req_dpid_attr, name)
    __repr__ = _swig_repr
    __swig_setmethods__["datapath_id"] = _mul_nbapi.c_ofp_req_dpid_attr_datapath_id_set
    __swig_getmethods__["datapath_id"] = _mul_nbapi.c_ofp_req_dpid_attr_datapath_id_get
    if _newclass:datapath_id = _swig_property(_mul_nbapi.c_ofp_req_dpid_attr_datapath_id_get, _mul_nbapi.c_ofp_req_dpid_attr_datapath_id_set)
    def __init__(self): 
        this = _mul_nbapi.new_c_ofp_req_dpid_attr()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_c_ofp_req_dpid_attr
    __del__ = lambda self : None;
c_ofp_req_dpid_attr_swigregister = _mul_nbapi.c_ofp_req_dpid_attr_swigregister
c_ofp_req_dpid_attr_swigregister(c_ofp_req_dpid_attr)

class c_ofp_group_info(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, c_ofp_group_info, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, c_ofp_group_info, name)
    __repr__ = _swig_repr
    __swig_setmethods__["datapath_id"] = _mul_nbapi.c_ofp_group_info_datapath_id_set
    __swig_getmethods__["datapath_id"] = _mul_nbapi.c_ofp_group_info_datapath_id_get
    if _newclass:datapath_id = _swig_property(_mul_nbapi.c_ofp_group_info_datapath_id_get, _mul_nbapi.c_ofp_group_info_datapath_id_set)
    __swig_setmethods__["group_id"] = _mul_nbapi.c_ofp_group_info_group_id_set
    __swig_getmethods__["group_id"] = _mul_nbapi.c_ofp_group_info_group_id_get
    if _newclass:group_id = _swig_property(_mul_nbapi.c_ofp_group_info_group_id_get, _mul_nbapi.c_ofp_group_info_group_id_set)
    __swig_setmethods__["pad"] = _mul_nbapi.c_ofp_group_info_pad_set
    __swig_getmethods__["pad"] = _mul_nbapi.c_ofp_group_info_pad_get
    if _newclass:pad = _swig_property(_mul_nbapi.c_ofp_group_info_pad_get, _mul_nbapi.c_ofp_group_info_pad_set)
    def __init__(self): 
        this = _mul_nbapi.new_c_ofp_group_info()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_c_ofp_group_info
    __del__ = lambda self : None;
c_ofp_group_info_swigregister = _mul_nbapi.c_ofp_group_info_swigregister
c_ofp_group_info_swigregister(c_ofp_group_info)

class c_ofp_port_neigh(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, c_ofp_port_neigh, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, c_ofp_port_neigh, name)
    __repr__ = _swig_repr
    __swig_setmethods__["port_no"] = _mul_nbapi.c_ofp_port_neigh_port_no_set
    __swig_getmethods__["port_no"] = _mul_nbapi.c_ofp_port_neigh_port_no_get
    if _newclass:port_no = _swig_property(_mul_nbapi.c_ofp_port_neigh_port_no_get, _mul_nbapi.c_ofp_port_neigh_port_no_set)
    __swig_setmethods__["neigh_present"] = _mul_nbapi.c_ofp_port_neigh_neigh_present_set
    __swig_getmethods__["neigh_present"] = _mul_nbapi.c_ofp_port_neigh_neigh_present_get
    if _newclass:neigh_present = _swig_property(_mul_nbapi.c_ofp_port_neigh_neigh_present_get, _mul_nbapi.c_ofp_port_neigh_neigh_present_set)
    __swig_setmethods__["neigh_port"] = _mul_nbapi.c_ofp_port_neigh_neigh_port_set
    __swig_getmethods__["neigh_port"] = _mul_nbapi.c_ofp_port_neigh_neigh_port_get
    if _newclass:neigh_port = _swig_property(_mul_nbapi.c_ofp_port_neigh_neigh_port_get, _mul_nbapi.c_ofp_port_neigh_neigh_port_set)
    __swig_setmethods__["pad"] = _mul_nbapi.c_ofp_port_neigh_pad_set
    __swig_getmethods__["pad"] = _mul_nbapi.c_ofp_port_neigh_pad_get
    if _newclass:pad = _swig_property(_mul_nbapi.c_ofp_port_neigh_pad_get, _mul_nbapi.c_ofp_port_neigh_pad_set)
    __swig_setmethods__["neigh_dpid"] = _mul_nbapi.c_ofp_port_neigh_neigh_dpid_set
    __swig_getmethods__["neigh_dpid"] = _mul_nbapi.c_ofp_port_neigh_neigh_dpid_get
    if _newclass:neigh_dpid = _swig_property(_mul_nbapi.c_ofp_port_neigh_neigh_dpid_get, _mul_nbapi.c_ofp_port_neigh_neigh_dpid_set)
    def __init__(self): 
        this = _mul_nbapi.new_c_ofp_port_neigh()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_c_ofp_port_neigh
    __del__ = lambda self : None;
c_ofp_port_neigh_swigregister = _mul_nbapi.c_ofp_port_neigh_swigregister
c_ofp_port_neigh_swigregister(c_ofp_port_neigh)
COFP_NEIGH_SWITCH = _mul_nbapi.COFP_NEIGH_SWITCH

class c_ofp_switch_neigh(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, c_ofp_switch_neigh, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, c_ofp_switch_neigh, name)
    __repr__ = _swig_repr
    __swig_setmethods__["switch_id"] = _mul_nbapi.c_ofp_switch_neigh_switch_id_set
    __swig_getmethods__["switch_id"] = _mul_nbapi.c_ofp_switch_neigh_switch_id_get
    if _newclass:switch_id = _swig_property(_mul_nbapi.c_ofp_switch_neigh_switch_id_get, _mul_nbapi.c_ofp_switch_neigh_switch_id_set)
    __swig_setmethods__["data"] = _mul_nbapi.c_ofp_switch_neigh_data_set
    __swig_getmethods__["data"] = _mul_nbapi.c_ofp_switch_neigh_data_get
    if _newclass:data = _swig_property(_mul_nbapi.c_ofp_switch_neigh_data_get, _mul_nbapi.c_ofp_switch_neigh_data_set)
    def __init__(self): 
        this = _mul_nbapi.new_c_ofp_switch_neigh()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_c_ofp_switch_neigh
    __del__ = lambda self : None;
c_ofp_switch_neigh_swigregister = _mul_nbapi.c_ofp_switch_neigh_swigregister
c_ofp_switch_neigh_swigregister(c_ofp_switch_neigh)

SW_INIT = _mul_nbapi.SW_INIT
SW_OFP_NEGOTIATED = _mul_nbapi.SW_OFP_NEGOTIATED
SW_REGISTERED = _mul_nbapi.SW_REGISTERED
SW_DEAD = _mul_nbapi.SW_DEAD
SW_REINIT = _mul_nbapi.SW_REINIT
SW_REINIT_VIRT = _mul_nbapi.SW_REINIT_VIRT
SW_OFP_PORT_FEAT = _mul_nbapi.SW_OFP_PORT_FEAT
SW_OFP_TBL_FEAT = _mul_nbapi.SW_OFP_TBL_FEAT
SW_OFP_MET_FEAT = _mul_nbapi.SW_OFP_MET_FEAT
SW_OFP_GRP_FEAT = _mul_nbapi.SW_OFP_GRP_FEAT
SW_HA_SYNCD_REQ = _mul_nbapi.SW_HA_SYNCD_REQ
SW_BULK_FLOW_STATS = _mul_nbapi.SW_BULK_FLOW_STATS
SW_BULK_GRP_STATS = _mul_nbapi.SW_BULK_GRP_STATS
SW_BULK_METER_CONF_STATS = _mul_nbapi.SW_BULK_METER_CONF_STATS
SW_PORT_STATS_ENABLE = _mul_nbapi.SW_PORT_STATS_ENABLE
SW_PUBLISHED = _mul_nbapi.SW_PUBLISHED
SW_FLOW_PROBED = _mul_nbapi.SW_FLOW_PROBED
SW_GROUP_PROBED = _mul_nbapi.SW_GROUP_PROBED
SW_METER_PROBED = _mul_nbapi.SW_METER_PROBED
SW_FLOW_PROBE_DONE = _mul_nbapi.SW_FLOW_PROBE_DONE
SW_GROUP_PROBE_DONE = _mul_nbapi.SW_GROUP_PROBE_DONE
SW_METER_PROBE_DONE = _mul_nbapi.SW_METER_PROBE_DONE
SW_VTBL_MAP_DONE = _mul_nbapi.SW_VTBL_MAP_DONE
MAX_SERVICE_NAME = _mul_nbapi.MAX_SERVICE_NAME
class c_ofp_switch_brief(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, c_ofp_switch_brief, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, c_ofp_switch_brief, name)
    __repr__ = _swig_repr
    __swig_setmethods__["switch_id"] = _mul_nbapi.c_ofp_switch_brief_switch_id_set
    __swig_getmethods__["switch_id"] = _mul_nbapi.c_ofp_switch_brief_switch_id_get
    if _newclass:switch_id = _swig_property(_mul_nbapi.c_ofp_switch_brief_switch_id_get, _mul_nbapi.c_ofp_switch_brief_switch_id_set)
    __swig_setmethods__["n_ports"] = _mul_nbapi.c_ofp_switch_brief_n_ports_set
    __swig_getmethods__["n_ports"] = _mul_nbapi.c_ofp_switch_brief_n_ports_get
    if _newclass:n_ports = _swig_property(_mul_nbapi.c_ofp_switch_brief_n_ports_get, _mul_nbapi.c_ofp_switch_brief_n_ports_set)
    __swig_setmethods__["res"] = _mul_nbapi.c_ofp_switch_brief_res_set
    __swig_getmethods__["res"] = _mul_nbapi.c_ofp_switch_brief_res_get
    if _newclass:res = _swig_property(_mul_nbapi.c_ofp_switch_brief_res_get, _mul_nbapi.c_ofp_switch_brief_res_set)
    __swig_setmethods__["state"] = _mul_nbapi.c_ofp_switch_brief_state_set
    __swig_getmethods__["state"] = _mul_nbapi.c_ofp_switch_brief_state_get
    if _newclass:state = _swig_property(_mul_nbapi.c_ofp_switch_brief_state_get, _mul_nbapi.c_ofp_switch_brief_state_set)
    __swig_setmethods__["conn_str"] = _mul_nbapi.c_ofp_switch_brief_conn_str_set
    __swig_getmethods__["conn_str"] = _mul_nbapi.c_ofp_switch_brief_conn_str_get
    if _newclass:conn_str = _swig_property(_mul_nbapi.c_ofp_switch_brief_conn_str_get, _mul_nbapi.c_ofp_switch_brief_conn_str_set)
    def __init__(self): 
        this = _mul_nbapi.new_c_ofp_switch_brief()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_c_ofp_switch_brief
    __del__ = lambda self : None;
c_ofp_switch_brief_swigregister = _mul_nbapi.c_ofp_switch_brief_swigregister
c_ofp_switch_brief_swigregister(c_ofp_switch_brief)
OFP_CONN_DESC_SZ = _mul_nbapi.OFP_CONN_DESC_SZ

class c_ofp_switch_feature_common(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, c_ofp_switch_feature_common, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, c_ofp_switch_feature_common, name)
    __repr__ = _swig_repr
    __swig_setmethods__["datapath_id"] = _mul_nbapi.c_ofp_switch_feature_common_datapath_id_set
    __swig_getmethods__["datapath_id"] = _mul_nbapi.c_ofp_switch_feature_common_datapath_id_get
    if _newclass:datapath_id = _swig_property(_mul_nbapi.c_ofp_switch_feature_common_datapath_id_get, _mul_nbapi.c_ofp_switch_feature_common_datapath_id_set)
    __swig_setmethods__["table_id"] = _mul_nbapi.c_ofp_switch_feature_common_table_id_set
    __swig_getmethods__["table_id"] = _mul_nbapi.c_ofp_switch_feature_common_table_id_get
    if _newclass:table_id = _swig_property(_mul_nbapi.c_ofp_switch_feature_common_table_id_get, _mul_nbapi.c_ofp_switch_feature_common_table_id_set)
    __swig_setmethods__["pad"] = _mul_nbapi.c_ofp_switch_feature_common_pad_set
    __swig_getmethods__["pad"] = _mul_nbapi.c_ofp_switch_feature_common_pad_get
    if _newclass:pad = _swig_property(_mul_nbapi.c_ofp_switch_feature_common_pad_get, _mul_nbapi.c_ofp_switch_feature_common_pad_set)
    __swig_setmethods__["data"] = _mul_nbapi.c_ofp_switch_feature_common_data_set
    __swig_getmethods__["data"] = _mul_nbapi.c_ofp_switch_feature_common_data_get
    if _newclass:data = _swig_property(_mul_nbapi.c_ofp_switch_feature_common_data_get, _mul_nbapi.c_ofp_switch_feature_common_data_set)
    def __init__(self): 
        this = _mul_nbapi.new_c_ofp_switch_feature_common()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_c_ofp_switch_feature_common
    __del__ = lambda self : None;
c_ofp_switch_feature_common_swigregister = _mul_nbapi.c_ofp_switch_feature_common_swigregister
c_ofp_switch_feature_common_swigregister(c_ofp_switch_feature_common)

class c_ofp_switch_rlim(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, c_ofp_switch_rlim, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, c_ofp_switch_rlim, name)
    __repr__ = _swig_repr
    __swig_setmethods__["datapath_id"] = _mul_nbapi.c_ofp_switch_rlim_datapath_id_set
    __swig_getmethods__["datapath_id"] = _mul_nbapi.c_ofp_switch_rlim_datapath_id_get
    if _newclass:datapath_id = _swig_property(_mul_nbapi.c_ofp_switch_rlim_datapath_id_get, _mul_nbapi.c_ofp_switch_rlim_datapath_id_set)
    __swig_setmethods__["is_rx"] = _mul_nbapi.c_ofp_switch_rlim_is_rx_set
    __swig_getmethods__["is_rx"] = _mul_nbapi.c_ofp_switch_rlim_is_rx_get
    if _newclass:is_rx = _swig_property(_mul_nbapi.c_ofp_switch_rlim_is_rx_get, _mul_nbapi.c_ofp_switch_rlim_is_rx_set)
    __swig_setmethods__["pps"] = _mul_nbapi.c_ofp_switch_rlim_pps_set
    __swig_getmethods__["pps"] = _mul_nbapi.c_ofp_switch_rlim_pps_get
    if _newclass:pps = _swig_property(_mul_nbapi.c_ofp_switch_rlim_pps_get, _mul_nbapi.c_ofp_switch_rlim_pps_set)
    def __init__(self): 
        this = _mul_nbapi.new_c_ofp_switch_rlim()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_c_ofp_switch_rlim
    __del__ = lambda self : None;
c_ofp_switch_rlim_swigregister = _mul_nbapi.c_ofp_switch_rlim_swigregister
c_ofp_switch_rlim_swigregister(c_ofp_switch_rlim)

class c_ofp_switch_of_dump(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, c_ofp_switch_of_dump, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, c_ofp_switch_of_dump, name)
    __repr__ = _swig_repr
    __swig_setmethods__["datapath_id"] = _mul_nbapi.c_ofp_switch_of_dump_datapath_id_set
    __swig_getmethods__["datapath_id"] = _mul_nbapi.c_ofp_switch_of_dump_datapath_id_get
    if _newclass:datapath_id = _swig_property(_mul_nbapi.c_ofp_switch_of_dump_datapath_id_get, _mul_nbapi.c_ofp_switch_of_dump_datapath_id_set)
    __swig_setmethods__["rx_enable"] = _mul_nbapi.c_ofp_switch_of_dump_rx_enable_set
    __swig_getmethods__["rx_enable"] = _mul_nbapi.c_ofp_switch_of_dump_rx_enable_get
    if _newclass:rx_enable = _swig_property(_mul_nbapi.c_ofp_switch_of_dump_rx_enable_get, _mul_nbapi.c_ofp_switch_of_dump_rx_enable_set)
    __swig_setmethods__["tx_enable"] = _mul_nbapi.c_ofp_switch_of_dump_tx_enable_set
    __swig_getmethods__["tx_enable"] = _mul_nbapi.c_ofp_switch_of_dump_tx_enable_get
    if _newclass:tx_enable = _swig_property(_mul_nbapi.c_ofp_switch_of_dump_tx_enable_get, _mul_nbapi.c_ofp_switch_of_dump_tx_enable_set)
    __swig_setmethods__["dump_mask"] = _mul_nbapi.c_ofp_switch_of_dump_dump_mask_set
    __swig_getmethods__["dump_mask"] = _mul_nbapi.c_ofp_switch_of_dump_dump_mask_get
    if _newclass:dump_mask = _swig_property(_mul_nbapi.c_ofp_switch_of_dump_dump_mask_get, _mul_nbapi.c_ofp_switch_of_dump_dump_mask_set)
    def __init__(self): 
        this = _mul_nbapi.new_c_ofp_switch_of_dump()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_c_ofp_switch_of_dump
    __del__ = lambda self : None;
c_ofp_switch_of_dump_swigregister = _mul_nbapi.c_ofp_switch_of_dump_swigregister
c_ofp_switch_of_dump_swigregister(c_ofp_switch_of_dump)

class c_ofp_switch_stats_strategy(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, c_ofp_switch_stats_strategy, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, c_ofp_switch_stats_strategy, name)
    __repr__ = _swig_repr
    __swig_setmethods__["datapath_id"] = _mul_nbapi.c_ofp_switch_stats_strategy_datapath_id_set
    __swig_getmethods__["datapath_id"] = _mul_nbapi.c_ofp_switch_stats_strategy_datapath_id_get
    if _newclass:datapath_id = _swig_property(_mul_nbapi.c_ofp_switch_stats_strategy_datapath_id_get, _mul_nbapi.c_ofp_switch_stats_strategy_datapath_id_set)
    __swig_setmethods__["fl_bulk_enable"] = _mul_nbapi.c_ofp_switch_stats_strategy_fl_bulk_enable_set
    __swig_getmethods__["fl_bulk_enable"] = _mul_nbapi.c_ofp_switch_stats_strategy_fl_bulk_enable_get
    if _newclass:fl_bulk_enable = _swig_property(_mul_nbapi.c_ofp_switch_stats_strategy_fl_bulk_enable_get, _mul_nbapi.c_ofp_switch_stats_strategy_fl_bulk_enable_set)
    __swig_setmethods__["grp_bulk_enable"] = _mul_nbapi.c_ofp_switch_stats_strategy_grp_bulk_enable_set
    __swig_getmethods__["grp_bulk_enable"] = _mul_nbapi.c_ofp_switch_stats_strategy_grp_bulk_enable_get
    if _newclass:grp_bulk_enable = _swig_property(_mul_nbapi.c_ofp_switch_stats_strategy_grp_bulk_enable_get, _mul_nbapi.c_ofp_switch_stats_strategy_grp_bulk_enable_set)
    __swig_setmethods__["meter_bulk_config_enable"] = _mul_nbapi.c_ofp_switch_stats_strategy_meter_bulk_config_enable_set
    __swig_getmethods__["meter_bulk_config_enable"] = _mul_nbapi.c_ofp_switch_stats_strategy_meter_bulk_config_enable_get
    if _newclass:meter_bulk_config_enable = _swig_property(_mul_nbapi.c_ofp_switch_stats_strategy_meter_bulk_config_enable_get, _mul_nbapi.c_ofp_switch_stats_strategy_meter_bulk_config_enable_set)
    __swig_setmethods__["meter_bulk_enable"] = _mul_nbapi.c_ofp_switch_stats_strategy_meter_bulk_enable_set
    __swig_getmethods__["meter_bulk_enable"] = _mul_nbapi.c_ofp_switch_stats_strategy_meter_bulk_enable_get
    if _newclass:meter_bulk_enable = _swig_property(_mul_nbapi.c_ofp_switch_stats_strategy_meter_bulk_enable_get, _mul_nbapi.c_ofp_switch_stats_strategy_meter_bulk_enable_set)
    def __init__(self): 
        this = _mul_nbapi.new_c_ofp_switch_stats_strategy()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_c_ofp_switch_stats_strategy
    __del__ = lambda self : None;
c_ofp_switch_stats_strategy_swigregister = _mul_nbapi.c_ofp_switch_stats_strategy_swigregister
c_ofp_switch_stats_strategy_swigregister(c_ofp_switch_stats_strategy)

class c_ofp_switch_stats_mode_config(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, c_ofp_switch_stats_mode_config, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, c_ofp_switch_stats_mode_config, name)
    __repr__ = _swig_repr
    __swig_setmethods__["datapath_id"] = _mul_nbapi.c_ofp_switch_stats_mode_config_datapath_id_set
    __swig_getmethods__["datapath_id"] = _mul_nbapi.c_ofp_switch_stats_mode_config_datapath_id_get
    if _newclass:datapath_id = _swig_property(_mul_nbapi.c_ofp_switch_stats_mode_config_datapath_id_get, _mul_nbapi.c_ofp_switch_stats_mode_config_datapath_id_set)
    __swig_setmethods__["stats_mode"] = _mul_nbapi.c_ofp_switch_stats_mode_config_stats_mode_set
    __swig_getmethods__["stats_mode"] = _mul_nbapi.c_ofp_switch_stats_mode_config_stats_mode_get
    if _newclass:stats_mode = _swig_property(_mul_nbapi.c_ofp_switch_stats_mode_config_stats_mode_get, _mul_nbapi.c_ofp_switch_stats_mode_config_stats_mode_set)
    __swig_setmethods__["pad"] = _mul_nbapi.c_ofp_switch_stats_mode_config_pad_set
    __swig_getmethods__["pad"] = _mul_nbapi.c_ofp_switch_stats_mode_config_pad_get
    if _newclass:pad = _swig_property(_mul_nbapi.c_ofp_switch_stats_mode_config_pad_get, _mul_nbapi.c_ofp_switch_stats_mode_config_pad_set)
    def __init__(self): 
        this = _mul_nbapi.new_c_ofp_switch_stats_mode_config()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_c_ofp_switch_stats_mode_config
    __del__ = lambda self : None;
c_ofp_switch_stats_mode_config_swigregister = _mul_nbapi.c_ofp_switch_stats_mode_config_swigregister
c_ofp_switch_stats_mode_config_swigregister(c_ofp_switch_stats_mode_config)
FLOW_STATS_ENABLE = _mul_nbapi.FLOW_STATS_ENABLE
GROUP_STATS_ENABLE = _mul_nbapi.GROUP_STATS_ENABLE
METER_STATS_ENABLE = _mul_nbapi.METER_STATS_ENABLE
PORT_STATS_ENABLE = _mul_nbapi.PORT_STATS_ENABLE

class c_ofp_switch_table_stats(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, c_ofp_switch_table_stats, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, c_ofp_switch_table_stats, name)
    __repr__ = _swig_repr
    __swig_setmethods__["datapath_id"] = _mul_nbapi.c_ofp_switch_table_stats_datapath_id_set
    __swig_getmethods__["datapath_id"] = _mul_nbapi.c_ofp_switch_table_stats_datapath_id_get
    if _newclass:datapath_id = _swig_property(_mul_nbapi.c_ofp_switch_table_stats_datapath_id_get, _mul_nbapi.c_ofp_switch_table_stats_datapath_id_set)
    __swig_setmethods__["table_id"] = _mul_nbapi.c_ofp_switch_table_stats_table_id_set
    __swig_getmethods__["table_id"] = _mul_nbapi.c_ofp_switch_table_stats_table_id_get
    if _newclass:table_id = _swig_property(_mul_nbapi.c_ofp_switch_table_stats_table_id_get, _mul_nbapi.c_ofp_switch_table_stats_table_id_set)
    __swig_setmethods__["pad"] = _mul_nbapi.c_ofp_switch_table_stats_pad_set
    __swig_getmethods__["pad"] = _mul_nbapi.c_ofp_switch_table_stats_pad_get
    if _newclass:pad = _swig_property(_mul_nbapi.c_ofp_switch_table_stats_pad_get, _mul_nbapi.c_ofp_switch_table_stats_pad_set)
    __swig_setmethods__["active_count"] = _mul_nbapi.c_ofp_switch_table_stats_active_count_set
    __swig_getmethods__["active_count"] = _mul_nbapi.c_ofp_switch_table_stats_active_count_get
    if _newclass:active_count = _swig_property(_mul_nbapi.c_ofp_switch_table_stats_active_count_get, _mul_nbapi.c_ofp_switch_table_stats_active_count_set)
    __swig_setmethods__["lookup_count"] = _mul_nbapi.c_ofp_switch_table_stats_lookup_count_set
    __swig_getmethods__["lookup_count"] = _mul_nbapi.c_ofp_switch_table_stats_lookup_count_get
    if _newclass:lookup_count = _swig_property(_mul_nbapi.c_ofp_switch_table_stats_lookup_count_get, _mul_nbapi.c_ofp_switch_table_stats_lookup_count_set)
    __swig_setmethods__["matched_count"] = _mul_nbapi.c_ofp_switch_table_stats_matched_count_set
    __swig_getmethods__["matched_count"] = _mul_nbapi.c_ofp_switch_table_stats_matched_count_get
    if _newclass:matched_count = _swig_property(_mul_nbapi.c_ofp_switch_table_stats_matched_count_get, _mul_nbapi.c_ofp_switch_table_stats_matched_count_set)
    def __init__(self): 
        this = _mul_nbapi.new_c_ofp_switch_table_stats()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_c_ofp_switch_table_stats
    __del__ = lambda self : None;
c_ofp_switch_table_stats_swigregister = _mul_nbapi.c_ofp_switch_table_stats_swigregister
c_ofp_switch_table_stats_swigregister(c_ofp_switch_table_stats)

class c_ofp_switch_port_query(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, c_ofp_switch_port_query, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, c_ofp_switch_port_query, name)
    __repr__ = _swig_repr
    __swig_setmethods__["datapath_id"] = _mul_nbapi.c_ofp_switch_port_query_datapath_id_set
    __swig_getmethods__["datapath_id"] = _mul_nbapi.c_ofp_switch_port_query_datapath_id_get
    if _newclass:datapath_id = _swig_property(_mul_nbapi.c_ofp_switch_port_query_datapath_id_get, _mul_nbapi.c_ofp_switch_port_query_datapath_id_set)
    __swig_setmethods__["port_no"] = _mul_nbapi.c_ofp_switch_port_query_port_no_set
    __swig_getmethods__["port_no"] = _mul_nbapi.c_ofp_switch_port_query_port_no_get
    if _newclass:port_no = _swig_property(_mul_nbapi.c_ofp_switch_port_query_port_no_get, _mul_nbapi.c_ofp_switch_port_query_port_no_set)
    __swig_setmethods__["qid"] = _mul_nbapi.c_ofp_switch_port_query_qid_set
    __swig_getmethods__["qid"] = _mul_nbapi.c_ofp_switch_port_query_qid_get
    if _newclass:qid = _swig_property(_mul_nbapi.c_ofp_switch_port_query_qid_get, _mul_nbapi.c_ofp_switch_port_query_qid_set)
    __swig_setmethods__["stats_len"] = _mul_nbapi.c_ofp_switch_port_query_stats_len_set
    __swig_getmethods__["stats_len"] = _mul_nbapi.c_ofp_switch_port_query_stats_len_get
    if _newclass:stats_len = _swig_property(_mul_nbapi.c_ofp_switch_port_query_stats_len_get, _mul_nbapi.c_ofp_switch_port_query_stats_len_set)
    __swig_setmethods__["pad"] = _mul_nbapi.c_ofp_switch_port_query_pad_set
    __swig_getmethods__["pad"] = _mul_nbapi.c_ofp_switch_port_query_pad_get
    if _newclass:pad = _swig_property(_mul_nbapi.c_ofp_switch_port_query_pad_get, _mul_nbapi.c_ofp_switch_port_query_pad_set)
    __swig_setmethods__["data"] = _mul_nbapi.c_ofp_switch_port_query_data_set
    __swig_getmethods__["data"] = _mul_nbapi.c_ofp_switch_port_query_data_get
    if _newclass:data = _swig_property(_mul_nbapi.c_ofp_switch_port_query_data_get, _mul_nbapi.c_ofp_switch_port_query_data_set)
    def __init__(self): 
        this = _mul_nbapi.new_c_ofp_switch_port_query()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_c_ofp_switch_port_query
    __del__ = lambda self : None;
c_ofp_switch_port_query_swigregister = _mul_nbapi.c_ofp_switch_port_query_swigregister
c_ofp_switch_port_query_swigregister(c_ofp_switch_port_query)

class c_ofp_host_mod(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, c_ofp_host_mod, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, c_ofp_host_mod, name)
    __repr__ = _swig_repr
    __swig_setmethods__["switch_id"] = _mul_nbapi.c_ofp_host_mod_switch_id_set
    __swig_getmethods__["switch_id"] = _mul_nbapi.c_ofp_host_mod_switch_id_get
    if _newclass:switch_id = _swig_property(_mul_nbapi.c_ofp_host_mod_switch_id_get, _mul_nbapi.c_ofp_host_mod_switch_id_set)
    __swig_setmethods__["tenant_id"] = _mul_nbapi.c_ofp_host_mod_tenant_id_set
    __swig_getmethods__["tenant_id"] = _mul_nbapi.c_ofp_host_mod_tenant_id_get
    if _newclass:tenant_id = _swig_property(_mul_nbapi.c_ofp_host_mod_tenant_id_get, _mul_nbapi.c_ofp_host_mod_tenant_id_set)
    __swig_setmethods__["network_id"] = _mul_nbapi.c_ofp_host_mod_network_id_set
    __swig_getmethods__["network_id"] = _mul_nbapi.c_ofp_host_mod_network_id_get
    if _newclass:network_id = _swig_property(_mul_nbapi.c_ofp_host_mod_network_id_get, _mul_nbapi.c_ofp_host_mod_network_id_set)
    __swig_setmethods__["host_flow"] = _mul_nbapi.c_ofp_host_mod_host_flow_set
    __swig_getmethods__["host_flow"] = _mul_nbapi.c_ofp_host_mod_host_flow_get
    if _newclass:host_flow = _swig_property(_mul_nbapi.c_ofp_host_mod_host_flow_get, _mul_nbapi.c_ofp_host_mod_host_flow_set)
    def __init__(self): 
        this = _mul_nbapi.new_c_ofp_host_mod()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_c_ofp_host_mod
    __del__ = lambda self : None;
c_ofp_host_mod_swigregister = _mul_nbapi.c_ofp_host_mod_swigregister
c_ofp_host_mod_swigregister(c_ofp_host_mod)

class c_ofp_port_tnid_mod(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, c_ofp_port_tnid_mod, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, c_ofp_port_tnid_mod, name)
    __repr__ = _swig_repr
    __swig_setmethods__["datapath_id"] = _mul_nbapi.c_ofp_port_tnid_mod_datapath_id_set
    __swig_getmethods__["datapath_id"] = _mul_nbapi.c_ofp_port_tnid_mod_datapath_id_get
    if _newclass:datapath_id = _swig_property(_mul_nbapi.c_ofp_port_tnid_mod_datapath_id_get, _mul_nbapi.c_ofp_port_tnid_mod_datapath_id_set)
    __swig_setmethods__["port"] = _mul_nbapi.c_ofp_port_tnid_mod_port_set
    __swig_getmethods__["port"] = _mul_nbapi.c_ofp_port_tnid_mod_port_get
    if _newclass:port = _swig_property(_mul_nbapi.c_ofp_port_tnid_mod_port_get, _mul_nbapi.c_ofp_port_tnid_mod_port_set)
    __swig_setmethods__["pad"] = _mul_nbapi.c_ofp_port_tnid_mod_pad_set
    __swig_getmethods__["pad"] = _mul_nbapi.c_ofp_port_tnid_mod_pad_get
    if _newclass:pad = _swig_property(_mul_nbapi.c_ofp_port_tnid_mod_pad_get, _mul_nbapi.c_ofp_port_tnid_mod_pad_set)
    __swig_setmethods__["tenant_id"] = _mul_nbapi.c_ofp_port_tnid_mod_tenant_id_set
    __swig_getmethods__["tenant_id"] = _mul_nbapi.c_ofp_port_tnid_mod_tenant_id_get
    if _newclass:tenant_id = _swig_property(_mul_nbapi.c_ofp_port_tnid_mod_tenant_id_get, _mul_nbapi.c_ofp_port_tnid_mod_tenant_id_set)
    __swig_setmethods__["network_id"] = _mul_nbapi.c_ofp_port_tnid_mod_network_id_set
    __swig_getmethods__["network_id"] = _mul_nbapi.c_ofp_port_tnid_mod_network_id_get
    if _newclass:network_id = _swig_property(_mul_nbapi.c_ofp_port_tnid_mod_network_id_get, _mul_nbapi.c_ofp_port_tnid_mod_network_id_set)
    def __init__(self): 
        this = _mul_nbapi.new_c_ofp_port_tnid_mod()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_c_ofp_port_tnid_mod
    __del__ = lambda self : None;
c_ofp_port_tnid_mod_swigregister = _mul_nbapi.c_ofp_port_tnid_mod_swigregister
c_ofp_port_tnid_mod_swigregister(c_ofp_port_tnid_mod)

class c_ofp_tenant_nw_mod(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, c_ofp_tenant_nw_mod, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, c_ofp_tenant_nw_mod, name)
    __repr__ = _swig_repr
    __swig_setmethods__["tenant_id"] = _mul_nbapi.c_ofp_tenant_nw_mod_tenant_id_set
    __swig_getmethods__["tenant_id"] = _mul_nbapi.c_ofp_tenant_nw_mod_tenant_id_get
    if _newclass:tenant_id = _swig_property(_mul_nbapi.c_ofp_tenant_nw_mod_tenant_id_get, _mul_nbapi.c_ofp_tenant_nw_mod_tenant_id_set)
    __swig_setmethods__["network_id"] = _mul_nbapi.c_ofp_tenant_nw_mod_network_id_set
    __swig_getmethods__["network_id"] = _mul_nbapi.c_ofp_tenant_nw_mod_network_id_get
    if _newclass:network_id = _swig_property(_mul_nbapi.c_ofp_tenant_nw_mod_network_id_get, _mul_nbapi.c_ofp_tenant_nw_mod_network_id_set)
    def __init__(self): 
        this = _mul_nbapi.new_c_ofp_tenant_nw_mod()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_c_ofp_tenant_nw_mod
    __del__ = lambda self : None;
c_ofp_tenant_nw_mod_swigregister = _mul_nbapi.c_ofp_tenant_nw_mod_swigregister
c_ofp_tenant_nw_mod_swigregister(c_ofp_tenant_nw_mod)

class c_ofp_route(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, c_ofp_route, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, c_ofp_route, name)
    __repr__ = _swig_repr
    __swig_setmethods__["src_host"] = _mul_nbapi.c_ofp_route_src_host_set
    __swig_getmethods__["src_host"] = _mul_nbapi.c_ofp_route_src_host_get
    if _newclass:src_host = _swig_property(_mul_nbapi.c_ofp_route_src_host_get, _mul_nbapi.c_ofp_route_src_host_set)
    __swig_setmethods__["dst_host"] = _mul_nbapi.c_ofp_route_dst_host_set
    __swig_getmethods__["dst_host"] = _mul_nbapi.c_ofp_route_dst_host_get
    if _newclass:dst_host = _swig_property(_mul_nbapi.c_ofp_route_dst_host_get, _mul_nbapi.c_ofp_route_dst_host_set)
    __swig_setmethods__["route_links"] = _mul_nbapi.c_ofp_route_route_links_set
    __swig_getmethods__["route_links"] = _mul_nbapi.c_ofp_route_route_links_get
    if _newclass:route_links = _swig_property(_mul_nbapi.c_ofp_route_route_links_get, _mul_nbapi.c_ofp_route_route_links_set)
    def __init__(self): 
        this = _mul_nbapi.new_c_ofp_route()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_c_ofp_route
    __del__ = lambda self : None;
c_ofp_route_swigregister = _mul_nbapi.c_ofp_route_swigregister
c_ofp_route_swigregister(c_ofp_route)

class c_ofp_route_link(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, c_ofp_route_link, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, c_ofp_route_link, name)
    __repr__ = _swig_repr
    __swig_setmethods__["datapath_id"] = _mul_nbapi.c_ofp_route_link_datapath_id_set
    __swig_getmethods__["datapath_id"] = _mul_nbapi.c_ofp_route_link_datapath_id_get
    if _newclass:datapath_id = _swig_property(_mul_nbapi.c_ofp_route_link_datapath_id_get, _mul_nbapi.c_ofp_route_link_datapath_id_set)
    __swig_setmethods__["src_link"] = _mul_nbapi.c_ofp_route_link_src_link_set
    __swig_getmethods__["src_link"] = _mul_nbapi.c_ofp_route_link_src_link_get
    if _newclass:src_link = _swig_property(_mul_nbapi.c_ofp_route_link_src_link_get, _mul_nbapi.c_ofp_route_link_src_link_set)
    __swig_setmethods__["dst_link"] = _mul_nbapi.c_ofp_route_link_dst_link_set
    __swig_getmethods__["dst_link"] = _mul_nbapi.c_ofp_route_link_dst_link_get
    if _newclass:dst_link = _swig_property(_mul_nbapi.c_ofp_route_link_dst_link_get, _mul_nbapi.c_ofp_route_link_dst_link_set)
    __swig_setmethods__["pad"] = _mul_nbapi.c_ofp_route_link_pad_set
    __swig_getmethods__["pad"] = _mul_nbapi.c_ofp_route_link_pad_get
    if _newclass:pad = _swig_property(_mul_nbapi.c_ofp_route_link_pad_get, _mul_nbapi.c_ofp_route_link_pad_set)
    def __init__(self): 
        this = _mul_nbapi.new_c_ofp_route_link()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_c_ofp_route_link
    __del__ = lambda self : None;
c_ofp_route_link_swigregister = _mul_nbapi.c_ofp_route_link_swigregister
c_ofp_route_link_swigregister(c_ofp_route_link)

class c_ofp_ha_state(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, c_ofp_ha_state, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, c_ofp_ha_state, name)
    __repr__ = _swig_repr
    __swig_setmethods__["ha_sysid"] = _mul_nbapi.c_ofp_ha_state_ha_sysid_set
    __swig_getmethods__["ha_sysid"] = _mul_nbapi.c_ofp_ha_state_ha_sysid_get
    if _newclass:ha_sysid = _swig_property(_mul_nbapi.c_ofp_ha_state_ha_sysid_get, _mul_nbapi.c_ofp_ha_state_ha_sysid_set)
    __swig_setmethods__["ha_state"] = _mul_nbapi.c_ofp_ha_state_ha_state_set
    __swig_getmethods__["ha_state"] = _mul_nbapi.c_ofp_ha_state_ha_state_get
    if _newclass:ha_state = _swig_property(_mul_nbapi.c_ofp_ha_state_ha_state_get, _mul_nbapi.c_ofp_ha_state_ha_state_set)
    __swig_setmethods__["gen_id"] = _mul_nbapi.c_ofp_ha_state_gen_id_set
    __swig_getmethods__["gen_id"] = _mul_nbapi.c_ofp_ha_state_gen_id_get
    if _newclass:gen_id = _swig_property(_mul_nbapi.c_ofp_ha_state_gen_id_get, _mul_nbapi.c_ofp_ha_state_gen_id_set)
    def __init__(self): 
        this = _mul_nbapi.new_c_ofp_ha_state()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_c_ofp_ha_state
    __del__ = lambda self : None;
c_ofp_ha_state_swigregister = _mul_nbapi.c_ofp_ha_state_swigregister
c_ofp_ha_state_swigregister(c_ofp_ha_state)
C_HA_STATE_NONE = _mul_nbapi.C_HA_STATE_NONE
C_HA_STATE_CONNECTED = _mul_nbapi.C_HA_STATE_CONNECTED
C_HA_STATE_MASTER = _mul_nbapi.C_HA_STATE_MASTER
C_HA_STATE_SLAVE = _mul_nbapi.C_HA_STATE_SLAVE
C_HA_STATE_CONFLICT = _mul_nbapi.C_HA_STATE_CONFLICT
C_HA_STATE_NOHA = _mul_nbapi.C_HA_STATE_NOHA

class c_ofp_loop_status_mod(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, c_ofp_loop_status_mod, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, c_ofp_loop_status_mod, name)
    __repr__ = _swig_repr
    __swig_setmethods__["loop_status"] = _mul_nbapi.c_ofp_loop_status_mod_loop_status_set
    __swig_getmethods__["loop_status"] = _mul_nbapi.c_ofp_loop_status_mod_loop_status_get
    if _newclass:loop_status = _swig_property(_mul_nbapi.c_ofp_loop_status_mod_loop_status_get, _mul_nbapi.c_ofp_loop_status_mod_loop_status_set)
    def __init__(self): 
        this = _mul_nbapi.new_c_ofp_loop_status_mod()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_c_ofp_loop_status_mod
    __del__ = lambda self : None;
c_ofp_loop_status_mod_swigregister = _mul_nbapi.c_ofp_loop_status_mod_swigregister
c_ofp_loop_status_mod_swigregister(c_ofp_loop_status_mod)
C_LOOP_STATE_NONE = _mul_nbapi.C_LOOP_STATE_NONE
C_LOOP_STATE_LD = _mul_nbapi.C_LOOP_STATE_LD
C_LOOP_STATE_CONV = _mul_nbapi.C_LOOP_STATE_CONV

class c_ofp_tr_status_mod(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, c_ofp_tr_status_mod, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, c_ofp_tr_status_mod, name)
    __repr__ = _swig_repr
    __swig_setmethods__["tr_status"] = _mul_nbapi.c_ofp_tr_status_mod_tr_status_set
    __swig_getmethods__["tr_status"] = _mul_nbapi.c_ofp_tr_status_mod_tr_status_get
    if _newclass:tr_status = _swig_property(_mul_nbapi.c_ofp_tr_status_mod_tr_status_get, _mul_nbapi.c_ofp_tr_status_mod_tr_status_set)
    def __init__(self): 
        this = _mul_nbapi.new_c_ofp_tr_status_mod()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_c_ofp_tr_status_mod
    __del__ = lambda self : None;
c_ofp_tr_status_mod_swigregister = _mul_nbapi.c_ofp_tr_status_mod_swigregister
c_ofp_tr_status_mod_swigregister(c_ofp_tr_status_mod)
C_RT_APSP_NONE = _mul_nbapi.C_RT_APSP_NONE
C_RT_APSP_INIT = _mul_nbapi.C_RT_APSP_INIT
C_RT_APSP_ADJ_INIT = _mul_nbapi.C_RT_APSP_ADJ_INIT
C_RT_APSP_RUN = _mul_nbapi.C_RT_APSP_RUN
C_RT_APSP_CONVERGED = _mul_nbapi.C_RT_APSP_CONVERGED

class c_ofp_fl_mod_info(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, c_ofp_fl_mod_info, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, c_ofp_fl_mod_info, name)
    __repr__ = _swig_repr
    __swig_setmethods__["flow"] = _mul_nbapi.c_ofp_fl_mod_info_flow_set
    __swig_getmethods__["flow"] = _mul_nbapi.c_ofp_fl_mod_info_flow_get
    if _newclass:flow = _swig_property(_mul_nbapi.c_ofp_fl_mod_info_flow_get, _mul_nbapi.c_ofp_fl_mod_info_flow_set)
    __swig_setmethods__["datapath_id"] = _mul_nbapi.c_ofp_fl_mod_info_datapath_id_set
    __swig_getmethods__["datapath_id"] = _mul_nbapi.c_ofp_fl_mod_info_datapath_id_get
    if _newclass:datapath_id = _swig_property(_mul_nbapi.c_ofp_fl_mod_info_datapath_id_get, _mul_nbapi.c_ofp_fl_mod_info_datapath_id_set)
    __swig_setmethods__["out_port"] = _mul_nbapi.c_ofp_fl_mod_info_out_port_set
    __swig_getmethods__["out_port"] = _mul_nbapi.c_ofp_fl_mod_info_out_port_get
    if _newclass:out_port = _swig_property(_mul_nbapi.c_ofp_fl_mod_info_out_port_get, _mul_nbapi.c_ofp_fl_mod_info_out_port_set)
    __swig_setmethods__["pad"] = _mul_nbapi.c_ofp_fl_mod_info_pad_set
    __swig_getmethods__["pad"] = _mul_nbapi.c_ofp_fl_mod_info_pad_get
    if _newclass:pad = _swig_property(_mul_nbapi.c_ofp_fl_mod_info_pad_get, _mul_nbapi.c_ofp_fl_mod_info_pad_set)
    def __init__(self): 
        this = _mul_nbapi.new_c_ofp_fl_mod_info()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_c_ofp_fl_mod_info
    __del__ = lambda self : None;
c_ofp_fl_mod_info_swigregister = _mul_nbapi.c_ofp_fl_mod_info_swigregister
c_ofp_fl_mod_info_swigregister(c_ofp_fl_mod_info)

USER_LEVEL_PREMIUM = _mul_nbapi.USER_LEVEL_PREMIUM
USER_LEVEL_GOLD = _mul_nbapi.USER_LEVEL_GOLD
USER_LEVEL_DEFAULT = _mul_nbapi.USER_LEVEL_DEFAULT
class c_ofp_s_chain_mod(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, c_ofp_s_chain_mod, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, c_ofp_s_chain_mod, name)
    __repr__ = _swig_repr
    __swig_setmethods__["user_info"] = _mul_nbapi.c_ofp_s_chain_mod_user_info_set
    __swig_getmethods__["user_info"] = _mul_nbapi.c_ofp_s_chain_mod_user_info_get
    if _newclass:user_info = _swig_property(_mul_nbapi.c_ofp_s_chain_mod_user_info_get, _mul_nbapi.c_ofp_s_chain_mod_user_info_set)
    __swig_setmethods__["num_nfvs"] = _mul_nbapi.c_ofp_s_chain_mod_num_nfvs_set
    __swig_getmethods__["num_nfvs"] = _mul_nbapi.c_ofp_s_chain_mod_num_nfvs_get
    if _newclass:num_nfvs = _swig_property(_mul_nbapi.c_ofp_s_chain_mod_num_nfvs_get, _mul_nbapi.c_ofp_s_chain_mod_num_nfvs_set)
    __swig_setmethods__["nfv_list"] = _mul_nbapi.c_ofp_s_chain_mod_nfv_list_set
    __swig_getmethods__["nfv_list"] = _mul_nbapi.c_ofp_s_chain_mod_nfv_list_get
    if _newclass:nfv_list = _swig_property(_mul_nbapi.c_ofp_s_chain_mod_nfv_list_get, _mul_nbapi.c_ofp_s_chain_mod_nfv_list_set)
    __swig_setmethods__["service"] = _mul_nbapi.c_ofp_s_chain_mod_service_set
    __swig_getmethods__["service"] = _mul_nbapi.c_ofp_s_chain_mod_service_get
    if _newclass:service = _swig_property(_mul_nbapi.c_ofp_s_chain_mod_service_get, _mul_nbapi.c_ofp_s_chain_mod_service_set)
    def __init__(self): 
        this = _mul_nbapi.new_c_ofp_s_chain_mod()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_c_ofp_s_chain_mod
    __del__ = lambda self : None;
c_ofp_s_chain_mod_swigregister = _mul_nbapi.c_ofp_s_chain_mod_swigregister
c_ofp_s_chain_mod_swigregister(c_ofp_s_chain_mod)
MAX_NFV = _mul_nbapi.MAX_NFV
MAX_NFV_NAME = _mul_nbapi.MAX_NFV_NAME
MAX_SC = _mul_nbapi.MAX_SC
MAX_SERVICE = _mul_nbapi.MAX_SERVICE

class c_ofp_default_s_chain_mod(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, c_ofp_default_s_chain_mod, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, c_ofp_default_s_chain_mod, name)
    __repr__ = _swig_repr
    __swig_setmethods__["num_nfvs"] = _mul_nbapi.c_ofp_default_s_chain_mod_num_nfvs_set
    __swig_getmethods__["num_nfvs"] = _mul_nbapi.c_ofp_default_s_chain_mod_num_nfvs_get
    if _newclass:num_nfvs = _swig_property(_mul_nbapi.c_ofp_default_s_chain_mod_num_nfvs_get, _mul_nbapi.c_ofp_default_s_chain_mod_num_nfvs_set)
    __swig_setmethods__["level"] = _mul_nbapi.c_ofp_default_s_chain_mod_level_set
    __swig_getmethods__["level"] = _mul_nbapi.c_ofp_default_s_chain_mod_level_get
    if _newclass:level = _swig_property(_mul_nbapi.c_ofp_default_s_chain_mod_level_get, _mul_nbapi.c_ofp_default_s_chain_mod_level_set)
    __swig_setmethods__["nfv_list"] = _mul_nbapi.c_ofp_default_s_chain_mod_nfv_list_set
    __swig_getmethods__["nfv_list"] = _mul_nbapi.c_ofp_default_s_chain_mod_nfv_list_get
    if _newclass:nfv_list = _swig_property(_mul_nbapi.c_ofp_default_s_chain_mod_nfv_list_get, _mul_nbapi.c_ofp_default_s_chain_mod_nfv_list_set)
    __swig_setmethods__["service"] = _mul_nbapi.c_ofp_default_s_chain_mod_service_set
    __swig_getmethods__["service"] = _mul_nbapi.c_ofp_default_s_chain_mod_service_get
    if _newclass:service = _swig_property(_mul_nbapi.c_ofp_default_s_chain_mod_service_get, _mul_nbapi.c_ofp_default_s_chain_mod_service_set)
    def __init__(self): 
        this = _mul_nbapi.new_c_ofp_default_s_chain_mod()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_c_ofp_default_s_chain_mod
    __del__ = lambda self : None;
c_ofp_default_s_chain_mod_swigregister = _mul_nbapi.c_ofp_default_s_chain_mod_swigregister
c_ofp_default_s_chain_mod_swigregister(c_ofp_default_s_chain_mod)

class c_ofp_s_chain_nfv_info(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, c_ofp_s_chain_nfv_info, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, c_ofp_s_chain_nfv_info, name)
    __repr__ = _swig_repr
    __swig_setmethods__["dpid"] = _mul_nbapi.c_ofp_s_chain_nfv_info_dpid_set
    __swig_getmethods__["dpid"] = _mul_nbapi.c_ofp_s_chain_nfv_info_dpid_get
    if _newclass:dpid = _swig_property(_mul_nbapi.c_ofp_s_chain_nfv_info_dpid_get, _mul_nbapi.c_ofp_s_chain_nfv_info_dpid_set)
    __swig_setmethods__["nfv"] = _mul_nbapi.c_ofp_s_chain_nfv_info_nfv_set
    __swig_getmethods__["nfv"] = _mul_nbapi.c_ofp_s_chain_nfv_info_nfv_get
    if _newclass:nfv = _swig_property(_mul_nbapi.c_ofp_s_chain_nfv_info_nfv_get, _mul_nbapi.c_ofp_s_chain_nfv_info_nfv_set)
    __swig_setmethods__["nfv_group"] = _mul_nbapi.c_ofp_s_chain_nfv_info_nfv_group_set
    __swig_getmethods__["nfv_group"] = _mul_nbapi.c_ofp_s_chain_nfv_info_nfv_group_get
    if _newclass:nfv_group = _swig_property(_mul_nbapi.c_ofp_s_chain_nfv_info_nfv_group_get, _mul_nbapi.c_ofp_s_chain_nfv_info_nfv_group_set)
    __swig_setmethods__["oif"] = _mul_nbapi.c_ofp_s_chain_nfv_info_oif_set
    __swig_getmethods__["oif"] = _mul_nbapi.c_ofp_s_chain_nfv_info_oif_get
    if _newclass:oif = _swig_property(_mul_nbapi.c_ofp_s_chain_nfv_info_oif_get, _mul_nbapi.c_ofp_s_chain_nfv_info_oif_set)
    __swig_setmethods__["iif"] = _mul_nbapi.c_ofp_s_chain_nfv_info_iif_set
    __swig_getmethods__["iif"] = _mul_nbapi.c_ofp_s_chain_nfv_info_iif_get
    if _newclass:iif = _swig_property(_mul_nbapi.c_ofp_s_chain_nfv_info_iif_get, _mul_nbapi.c_ofp_s_chain_nfv_info_iif_set)
    __swig_setmethods__["pad"] = _mul_nbapi.c_ofp_s_chain_nfv_info_pad_set
    __swig_getmethods__["pad"] = _mul_nbapi.c_ofp_s_chain_nfv_info_pad_get
    if _newclass:pad = _swig_property(_mul_nbapi.c_ofp_s_chain_nfv_info_pad_get, _mul_nbapi.c_ofp_s_chain_nfv_info_pad_set)
    def __init__(self): 
        this = _mul_nbapi.new_c_ofp_s_chain_nfv_info()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_c_ofp_s_chain_nfv_info
    __del__ = lambda self : None;
c_ofp_s_chain_nfv_info_swigregister = _mul_nbapi.c_ofp_s_chain_nfv_info_swigregister
c_ofp_s_chain_nfv_info_swigregister(c_ofp_s_chain_nfv_info)

class c_ofp_s_chain_nfv_list(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, c_ofp_s_chain_nfv_list, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, c_ofp_s_chain_nfv_list, name)
    __repr__ = _swig_repr
    __swig_setmethods__["num_nfvs"] = _mul_nbapi.c_ofp_s_chain_nfv_list_num_nfvs_set
    __swig_getmethods__["num_nfvs"] = _mul_nbapi.c_ofp_s_chain_nfv_list_num_nfvs_get
    if _newclass:num_nfvs = _swig_property(_mul_nbapi.c_ofp_s_chain_nfv_list_num_nfvs_get, _mul_nbapi.c_ofp_s_chain_nfv_list_num_nfvs_set)
    __swig_setmethods__["nfv_info"] = _mul_nbapi.c_ofp_s_chain_nfv_list_nfv_info_set
    __swig_getmethods__["nfv_info"] = _mul_nbapi.c_ofp_s_chain_nfv_list_nfv_info_get
    if _newclass:nfv_info = _swig_property(_mul_nbapi.c_ofp_s_chain_nfv_list_nfv_info_get, _mul_nbapi.c_ofp_s_chain_nfv_list_nfv_info_set)
    def __init__(self): 
        this = _mul_nbapi.new_c_ofp_s_chain_nfv_list()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_c_ofp_s_chain_nfv_list
    __del__ = lambda self : None;
c_ofp_s_chain_nfv_list_swigregister = _mul_nbapi.c_ofp_s_chain_nfv_list_swigregister
c_ofp_s_chain_nfv_list_swigregister(c_ofp_s_chain_nfv_list)

class c_ofp_s_chain_info(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, c_ofp_s_chain_info, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, c_ofp_s_chain_info, name)
    __repr__ = _swig_repr
    __swig_setmethods__["user_info"] = _mul_nbapi.c_ofp_s_chain_info_user_info_set
    __swig_getmethods__["user_info"] = _mul_nbapi.c_ofp_s_chain_info_user_info_get
    if _newclass:user_info = _swig_property(_mul_nbapi.c_ofp_s_chain_info_user_info_get, _mul_nbapi.c_ofp_s_chain_info_user_info_set)
    __swig_setmethods__["nfv_list"] = _mul_nbapi.c_ofp_s_chain_info_nfv_list_set
    __swig_getmethods__["nfv_list"] = _mul_nbapi.c_ofp_s_chain_info_nfv_list_get
    if _newclass:nfv_list = _swig_property(_mul_nbapi.c_ofp_s_chain_info_nfv_list_get, _mul_nbapi.c_ofp_s_chain_info_nfv_list_set)
    def __init__(self): 
        this = _mul_nbapi.new_c_ofp_s_chain_info()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_c_ofp_s_chain_info
    __del__ = lambda self : None;
c_ofp_s_chain_info_swigregister = _mul_nbapi.c_ofp_s_chain_info_swigregister
c_ofp_s_chain_info_swigregister(c_ofp_s_chain_info)

class c_ofp_service_info(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, c_ofp_service_info, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, c_ofp_service_info, name)
    __repr__ = _swig_repr
    __swig_setmethods__["vlan"] = _mul_nbapi.c_ofp_service_info_vlan_set
    __swig_getmethods__["vlan"] = _mul_nbapi.c_ofp_service_info_vlan_get
    if _newclass:vlan = _swig_property(_mul_nbapi.c_ofp_service_info_vlan_get, _mul_nbapi.c_ofp_service_info_vlan_set)
    __swig_setmethods__["service"] = _mul_nbapi.c_ofp_service_info_service_set
    __swig_getmethods__["service"] = _mul_nbapi.c_ofp_service_info_service_get
    if _newclass:service = _swig_property(_mul_nbapi.c_ofp_service_info_service_get, _mul_nbapi.c_ofp_service_info_service_set)
    def __init__(self): 
        this = _mul_nbapi.new_c_ofp_service_info()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_c_ofp_service_info
    __del__ = lambda self : None;
c_ofp_service_info_swigregister = _mul_nbapi.c_ofp_service_info_swigregister
c_ofp_service_info_swigregister(c_ofp_service_info)

class c_ofp_s_chain_show(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, c_ofp_s_chain_show, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, c_ofp_s_chain_show, name)
    __repr__ = _swig_repr
    __swig_setmethods__["dpid"] = _mul_nbapi.c_ofp_s_chain_show_dpid_set
    __swig_getmethods__["dpid"] = _mul_nbapi.c_ofp_s_chain_show_dpid_get
    if _newclass:dpid = _swig_property(_mul_nbapi.c_ofp_s_chain_show_dpid_get, _mul_nbapi.c_ofp_s_chain_show_dpid_set)
    __swig_setmethods__["nw_src"] = _mul_nbapi.c_ofp_s_chain_show_nw_src_set
    __swig_getmethods__["nw_src"] = _mul_nbapi.c_ofp_s_chain_show_nw_src_get
    if _newclass:nw_src = _swig_property(_mul_nbapi.c_ofp_s_chain_show_nw_src_get, _mul_nbapi.c_ofp_s_chain_show_nw_src_set)
    __swig_setmethods__["pad"] = _mul_nbapi.c_ofp_s_chain_show_pad_set
    __swig_getmethods__["pad"] = _mul_nbapi.c_ofp_s_chain_show_pad_get
    if _newclass:pad = _swig_property(_mul_nbapi.c_ofp_s_chain_show_pad_get, _mul_nbapi.c_ofp_s_chain_show_pad_set)
    __swig_setmethods__["service"] = _mul_nbapi.c_ofp_s_chain_show_service_set
    __swig_getmethods__["service"] = _mul_nbapi.c_ofp_s_chain_show_service_get
    if _newclass:service = _swig_property(_mul_nbapi.c_ofp_s_chain_show_service_get, _mul_nbapi.c_ofp_s_chain_show_service_set)
    __swig_setmethods__["nfv_list"] = _mul_nbapi.c_ofp_s_chain_show_nfv_list_set
    __swig_getmethods__["nfv_list"] = _mul_nbapi.c_ofp_s_chain_show_nfv_list_get
    if _newclass:nfv_list = _swig_property(_mul_nbapi.c_ofp_s_chain_show_nfv_list_get, _mul_nbapi.c_ofp_s_chain_show_nfv_list_set)
    def __init__(self): 
        this = _mul_nbapi.new_c_ofp_s_chain_show()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_c_ofp_s_chain_show
    __del__ = lambda self : None;
c_ofp_s_chain_show_swigregister = _mul_nbapi.c_ofp_s_chain_show_swigregister
c_ofp_s_chain_show_swigregister(c_ofp_s_chain_show)

class c_ofp_service_show(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, c_ofp_service_show, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, c_ofp_service_show, name)
    __repr__ = _swig_repr
    __swig_setmethods__["header"] = _mul_nbapi.c_ofp_service_show_header_set
    __swig_getmethods__["header"] = _mul_nbapi.c_ofp_service_show_header_get
    if _newclass:header = _swig_property(_mul_nbapi.c_ofp_service_show_header_get, _mul_nbapi.c_ofp_service_show_header_set)
    __swig_setmethods__["service_list"] = _mul_nbapi.c_ofp_service_show_service_list_set
    __swig_getmethods__["service_list"] = _mul_nbapi.c_ofp_service_show_service_list_get
    if _newclass:service_list = _swig_property(_mul_nbapi.c_ofp_service_show_service_list_get, _mul_nbapi.c_ofp_service_show_service_list_set)
    __swig_setmethods__["pad"] = _mul_nbapi.c_ofp_service_show_pad_set
    __swig_getmethods__["pad"] = _mul_nbapi.c_ofp_service_show_pad_get
    if _newclass:pad = _swig_property(_mul_nbapi.c_ofp_service_show_pad_get, _mul_nbapi.c_ofp_service_show_pad_set)
    def __init__(self): 
        this = _mul_nbapi.new_c_ofp_service_show()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_c_ofp_service_show
    __del__ = lambda self : None;
c_ofp_service_show_swigregister = _mul_nbapi.c_ofp_service_show_swigregister
c_ofp_service_show_swigregister(c_ofp_service_show)

class c_ofp_s_chain_nfv_group_info(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, c_ofp_s_chain_nfv_group_info, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, c_ofp_s_chain_nfv_group_info, name)
    __repr__ = _swig_repr
    __swig_setmethods__["num_nfvs"] = _mul_nbapi.c_ofp_s_chain_nfv_group_info_num_nfvs_set
    __swig_getmethods__["num_nfvs"] = _mul_nbapi.c_ofp_s_chain_nfv_group_info_num_nfvs_get
    if _newclass:num_nfvs = _swig_property(_mul_nbapi.c_ofp_s_chain_nfv_group_info_num_nfvs_get, _mul_nbapi.c_ofp_s_chain_nfv_group_info_num_nfvs_set)
    __swig_setmethods__["nfv_group"] = _mul_nbapi.c_ofp_s_chain_nfv_group_info_nfv_group_set
    __swig_getmethods__["nfv_group"] = _mul_nbapi.c_ofp_s_chain_nfv_group_info_nfv_group_get
    if _newclass:nfv_group = _swig_property(_mul_nbapi.c_ofp_s_chain_nfv_group_info_nfv_group_get, _mul_nbapi.c_ofp_s_chain_nfv_group_info_nfv_group_set)
    __swig_setmethods__["nfv_list"] = _mul_nbapi.c_ofp_s_chain_nfv_group_info_nfv_list_set
    __swig_getmethods__["nfv_list"] = _mul_nbapi.c_ofp_s_chain_nfv_group_info_nfv_list_get
    if _newclass:nfv_list = _swig_property(_mul_nbapi.c_ofp_s_chain_nfv_group_info_nfv_list_get, _mul_nbapi.c_ofp_s_chain_nfv_group_info_nfv_list_set)
    def __init__(self): 
        this = _mul_nbapi.new_c_ofp_s_chain_nfv_group_info()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_c_ofp_s_chain_nfv_group_info
    __del__ = lambda self : None;
c_ofp_s_chain_nfv_group_info_swigregister = _mul_nbapi.c_ofp_s_chain_nfv_group_info_swigregister
c_ofp_s_chain_nfv_group_info_swigregister(c_ofp_s_chain_nfv_group_info)

class c_ofp_group_show(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, c_ofp_group_show, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, c_ofp_group_show, name)
    __repr__ = _swig_repr
    __swig_setmethods__["num_groups"] = _mul_nbapi.c_ofp_group_show_num_groups_set
    __swig_getmethods__["num_groups"] = _mul_nbapi.c_ofp_group_show_num_groups_get
    if _newclass:num_groups = _swig_property(_mul_nbapi.c_ofp_group_show_num_groups_get, _mul_nbapi.c_ofp_group_show_num_groups_set)
    __swig_setmethods__["group_list"] = _mul_nbapi.c_ofp_group_show_group_list_set
    __swig_getmethods__["group_list"] = _mul_nbapi.c_ofp_group_show_group_list_get
    if _newclass:group_list = _swig_property(_mul_nbapi.c_ofp_group_show_group_list_get, _mul_nbapi.c_ofp_group_show_group_list_set)
    def __init__(self): 
        this = _mul_nbapi.new_c_ofp_group_show()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_c_ofp_group_show
    __del__ = lambda self : None;
c_ofp_group_show_swigregister = _mul_nbapi.c_ofp_group_show_swigregister
c_ofp_group_show_swigregister(c_ofp_group_show)

class c_ofp_nfv_show(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, c_ofp_nfv_show, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, c_ofp_nfv_show, name)
    __repr__ = _swig_repr
    __swig_setmethods__["num_nfvs"] = _mul_nbapi.c_ofp_nfv_show_num_nfvs_set
    __swig_getmethods__["num_nfvs"] = _mul_nbapi.c_ofp_nfv_show_num_nfvs_get
    if _newclass:num_nfvs = _swig_property(_mul_nbapi.c_ofp_nfv_show_num_nfvs_get, _mul_nbapi.c_ofp_nfv_show_num_nfvs_set)
    __swig_setmethods__["nfv_list"] = _mul_nbapi.c_ofp_nfv_show_nfv_list_set
    __swig_getmethods__["nfv_list"] = _mul_nbapi.c_ofp_nfv_show_nfv_list_get
    if _newclass:nfv_list = _swig_property(_mul_nbapi.c_ofp_nfv_show_nfv_list_get, _mul_nbapi.c_ofp_nfv_show_nfv_list_set)
    def __init__(self): 
        this = _mul_nbapi.new_c_ofp_nfv_show()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_c_ofp_nfv_show
    __del__ = lambda self : None;
c_ofp_nfv_show_swigregister = _mul_nbapi.c_ofp_nfv_show_swigregister
c_ofp_nfv_show_swigregister(c_ofp_nfv_show)

class c_ofp_default_rule(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, c_ofp_default_rule, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, c_ofp_default_rule, name)
    __repr__ = _swig_repr
    __swig_setmethods__["nfv_group"] = _mul_nbapi.c_ofp_default_rule_nfv_group_set
    __swig_getmethods__["nfv_group"] = _mul_nbapi.c_ofp_default_rule_nfv_group_get
    if _newclass:nfv_group = _swig_property(_mul_nbapi.c_ofp_default_rule_nfv_group_get, _mul_nbapi.c_ofp_default_rule_nfv_group_set)
    def __init__(self): 
        this = _mul_nbapi.new_c_ofp_default_rule()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_c_ofp_default_rule
    __del__ = lambda self : None;
c_ofp_default_rule_swigregister = _mul_nbapi.c_ofp_default_rule_swigregister
c_ofp_default_rule_swigregister(c_ofp_default_rule)

class c_ofp_default_rule_info(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, c_ofp_default_rule_info, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, c_ofp_default_rule_info, name)
    __repr__ = _swig_repr
    __swig_setmethods__["num_nfvs"] = _mul_nbapi.c_ofp_default_rule_info_num_nfvs_set
    __swig_getmethods__["num_nfvs"] = _mul_nbapi.c_ofp_default_rule_info_num_nfvs_get
    if _newclass:num_nfvs = _swig_property(_mul_nbapi.c_ofp_default_rule_info_num_nfvs_get, _mul_nbapi.c_ofp_default_rule_info_num_nfvs_set)
    __swig_setmethods__["level"] = _mul_nbapi.c_ofp_default_rule_info_level_set
    __swig_getmethods__["level"] = _mul_nbapi.c_ofp_default_rule_info_level_get
    if _newclass:level = _swig_property(_mul_nbapi.c_ofp_default_rule_info_level_get, _mul_nbapi.c_ofp_default_rule_info_level_set)
    __swig_setmethods__["pad"] = _mul_nbapi.c_ofp_default_rule_info_pad_set
    __swig_getmethods__["pad"] = _mul_nbapi.c_ofp_default_rule_info_pad_get
    if _newclass:pad = _swig_property(_mul_nbapi.c_ofp_default_rule_info_pad_get, _mul_nbapi.c_ofp_default_rule_info_pad_set)
    __swig_setmethods__["service"] = _mul_nbapi.c_ofp_default_rule_info_service_set
    __swig_getmethods__["service"] = _mul_nbapi.c_ofp_default_rule_info_service_get
    if _newclass:service = _swig_property(_mul_nbapi.c_ofp_default_rule_info_service_get, _mul_nbapi.c_ofp_default_rule_info_service_set)
    __swig_setmethods__["group_list"] = _mul_nbapi.c_ofp_default_rule_info_group_list_set
    __swig_getmethods__["group_list"] = _mul_nbapi.c_ofp_default_rule_info_group_list_get
    if _newclass:group_list = _swig_property(_mul_nbapi.c_ofp_default_rule_info_group_list_get, _mul_nbapi.c_ofp_default_rule_info_group_list_set)
    def __init__(self): 
        this = _mul_nbapi.new_c_ofp_default_rule_info()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_c_ofp_default_rule_info
    __del__ = lambda self : None;
c_ofp_default_rule_info_swigregister = _mul_nbapi.c_ofp_default_rule_info_swigregister
c_ofp_default_rule_info_swigregister(c_ofp_default_rule_info)

class c_ofp_user_flow_info(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, c_ofp_user_flow_info, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, c_ofp_user_flow_info, name)
    __repr__ = _swig_repr
    __swig_setmethods__["datapath_id"] = _mul_nbapi.c_ofp_user_flow_info_datapath_id_set
    __swig_getmethods__["datapath_id"] = _mul_nbapi.c_ofp_user_flow_info_datapath_id_get
    if _newclass:datapath_id = _swig_property(_mul_nbapi.c_ofp_user_flow_info_datapath_id_get, _mul_nbapi.c_ofp_user_flow_info_datapath_id_set)
    __swig_setmethods__["flow"] = _mul_nbapi.c_ofp_user_flow_info_flow_set
    __swig_getmethods__["flow"] = _mul_nbapi.c_ofp_user_flow_info_flow_get
    if _newclass:flow = _swig_property(_mul_nbapi.c_ofp_user_flow_info_flow_get, _mul_nbapi.c_ofp_user_flow_info_flow_set)
    def __init__(self): 
        this = _mul_nbapi.new_c_ofp_user_flow_info()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_c_ofp_user_flow_info
    __del__ = lambda self : None;
c_ofp_user_flow_info_swigregister = _mul_nbapi.c_ofp_user_flow_info_swigregister
c_ofp_user_flow_info_swigregister(c_ofp_user_flow_info)

class c_ofp_default_rule_show(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, c_ofp_default_rule_show, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, c_ofp_default_rule_show, name)
    __repr__ = _swig_repr
    __swig_setmethods__["num_services"] = _mul_nbapi.c_ofp_default_rule_show_num_services_set
    __swig_getmethods__["num_services"] = _mul_nbapi.c_ofp_default_rule_show_num_services_get
    if _newclass:num_services = _swig_property(_mul_nbapi.c_ofp_default_rule_show_num_services_get, _mul_nbapi.c_ofp_default_rule_show_num_services_set)
    __swig_setmethods__["pad"] = _mul_nbapi.c_ofp_default_rule_show_pad_set
    __swig_getmethods__["pad"] = _mul_nbapi.c_ofp_default_rule_show_pad_get
    if _newclass:pad = _swig_property(_mul_nbapi.c_ofp_default_rule_show_pad_get, _mul_nbapi.c_ofp_default_rule_show_pad_set)
    __swig_setmethods__["service_list"] = _mul_nbapi.c_ofp_default_rule_show_service_list_set
    __swig_getmethods__["service_list"] = _mul_nbapi.c_ofp_default_rule_show_service_list_get
    if _newclass:service_list = _swig_property(_mul_nbapi.c_ofp_default_rule_show_service_list_get, _mul_nbapi.c_ofp_default_rule_show_service_list_set)
    def __init__(self): 
        this = _mul_nbapi.new_c_ofp_default_rule_show()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_c_ofp_default_rule_show
    __del__ = lambda self : None;
c_ofp_default_rule_show_swigregister = _mul_nbapi.c_ofp_default_rule_show_swigregister
c_ofp_default_rule_show_swigregister(c_ofp_default_rule_show)

class c_ofp_nfv_stats_show(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, c_ofp_nfv_stats_show, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, c_ofp_nfv_stats_show, name)
    __repr__ = _swig_repr
    __swig_setmethods__["group_name"] = _mul_nbapi.c_ofp_nfv_stats_show_group_name_set
    __swig_getmethods__["group_name"] = _mul_nbapi.c_ofp_nfv_stats_show_group_name_get
    if _newclass:group_name = _swig_property(_mul_nbapi.c_ofp_nfv_stats_show_group_name_get, _mul_nbapi.c_ofp_nfv_stats_show_group_name_set)
    __swig_setmethods__["name"] = _mul_nbapi.c_ofp_nfv_stats_show_name_set
    __swig_getmethods__["name"] = _mul_nbapi.c_ofp_nfv_stats_show_name_get
    if _newclass:name = _swig_property(_mul_nbapi.c_ofp_nfv_stats_show_name_get, _mul_nbapi.c_ofp_nfv_stats_show_name_set)
    def __init__(self): 
        this = _mul_nbapi.new_c_ofp_nfv_stats_show()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_c_ofp_nfv_stats_show
    __del__ = lambda self : None;
c_ofp_nfv_stats_show_swigregister = _mul_nbapi.c_ofp_nfv_stats_show_swigregister
c_ofp_nfv_stats_show_swigregister(c_ofp_nfv_stats_show)

class c_ofp_service_stats_show(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, c_ofp_service_stats_show, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, c_ofp_service_stats_show, name)
    __repr__ = _swig_repr
    __swig_setmethods__["service_name"] = _mul_nbapi.c_ofp_service_stats_show_service_name_set
    __swig_getmethods__["service_name"] = _mul_nbapi.c_ofp_service_stats_show_service_name_get
    if _newclass:service_name = _swig_property(_mul_nbapi.c_ofp_service_stats_show_service_name_get, _mul_nbapi.c_ofp_service_stats_show_service_name_set)
    __swig_setmethods__["stats"] = _mul_nbapi.c_ofp_service_stats_show_stats_set
    __swig_getmethods__["stats"] = _mul_nbapi.c_ofp_service_stats_show_stats_get
    if _newclass:stats = _swig_property(_mul_nbapi.c_ofp_service_stats_show_stats_get, _mul_nbapi.c_ofp_service_stats_show_stats_set)
    def __init__(self): 
        this = _mul_nbapi.new_c_ofp_service_stats_show()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_c_ofp_service_stats_show
    __del__ = lambda self : None;
c_ofp_service_stats_show_swigregister = _mul_nbapi.c_ofp_service_stats_show_swigregister
c_ofp_service_stats_show_swigregister(c_ofp_service_stats_show)

class c_ofp_user_stats_show(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, c_ofp_user_stats_show, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, c_ofp_user_stats_show, name)
    __repr__ = _swig_repr
    __swig_setmethods__["stats"] = _mul_nbapi.c_ofp_user_stats_show_stats_set
    __swig_getmethods__["stats"] = _mul_nbapi.c_ofp_user_stats_show_stats_get
    if _newclass:stats = _swig_property(_mul_nbapi.c_ofp_user_stats_show_stats_get, _mul_nbapi.c_ofp_user_stats_show_stats_set)
    def __init__(self): 
        this = _mul_nbapi.new_c_ofp_user_stats_show()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_c_ofp_user_stats_show
    __del__ = lambda self : None;
c_ofp_user_stats_show_swigregister = _mul_nbapi.c_ofp_user_stats_show_swigregister
c_ofp_user_stats_show_swigregister(c_ofp_user_stats_show)

CONX_TUNNEL_OF = _mul_nbapi.CONX_TUNNEL_OF
CONX_TUNNEL_VXLAN = _mul_nbapi.CONX_TUNNEL_VXLAN
CONX_TUNBEL_GRE = _mul_nbapi.CONX_TUNBEL_GRE
class c_conx_user_flow(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, c_conx_user_flow, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, c_conx_user_flow, name)
    __repr__ = _swig_repr
    __swig_setmethods__["header"] = _mul_nbapi.c_conx_user_flow_header_set
    __swig_getmethods__["header"] = _mul_nbapi.c_conx_user_flow_header_get
    if _newclass:header = _swig_property(_mul_nbapi.c_conx_user_flow_header_get, _mul_nbapi.c_conx_user_flow_header_set)
    __swig_setmethods__["dst_dpid"] = _mul_nbapi.c_conx_user_flow_dst_dpid_set
    __swig_getmethods__["dst_dpid"] = _mul_nbapi.c_conx_user_flow_dst_dpid_get
    if _newclass:dst_dpid = _swig_property(_mul_nbapi.c_conx_user_flow_dst_dpid_get, _mul_nbapi.c_conx_user_flow_dst_dpid_set)
    __swig_setmethods__["n_src"] = _mul_nbapi.c_conx_user_flow_n_src_set
    __swig_getmethods__["n_src"] = _mul_nbapi.c_conx_user_flow_n_src_get
    if _newclass:n_src = _swig_property(_mul_nbapi.c_conx_user_flow_n_src_get, _mul_nbapi.c_conx_user_flow_n_src_set)
    __swig_setmethods__["fl_flags"] = _mul_nbapi.c_conx_user_flow_fl_flags_set
    __swig_getmethods__["fl_flags"] = _mul_nbapi.c_conx_user_flow_fl_flags_get
    if _newclass:fl_flags = _swig_property(_mul_nbapi.c_conx_user_flow_fl_flags_get, _mul_nbapi.c_conx_user_flow_fl_flags_set)
    __swig_setmethods__["flow"] = _mul_nbapi.c_conx_user_flow_flow_set
    __swig_getmethods__["flow"] = _mul_nbapi.c_conx_user_flow_flow_get
    if _newclass:flow = _swig_property(_mul_nbapi.c_conx_user_flow_flow_get, _mul_nbapi.c_conx_user_flow_flow_set)
    __swig_setmethods__["mask"] = _mul_nbapi.c_conx_user_flow_mask_set
    __swig_getmethods__["mask"] = _mul_nbapi.c_conx_user_flow_mask_get
    if _newclass:mask = _swig_property(_mul_nbapi.c_conx_user_flow_mask_get, _mul_nbapi.c_conx_user_flow_mask_set)
    __swig_setmethods__["tunnel_key"] = _mul_nbapi.c_conx_user_flow_tunnel_key_set
    __swig_getmethods__["tunnel_key"] = _mul_nbapi.c_conx_user_flow_tunnel_key_get
    if _newclass:tunnel_key = _swig_property(_mul_nbapi.c_conx_user_flow_tunnel_key_get, _mul_nbapi.c_conx_user_flow_tunnel_key_set)
    __swig_setmethods__["tunnel_type"] = _mul_nbapi.c_conx_user_flow_tunnel_type_set
    __swig_getmethods__["tunnel_type"] = _mul_nbapi.c_conx_user_flow_tunnel_type_get
    if _newclass:tunnel_type = _swig_property(_mul_nbapi.c_conx_user_flow_tunnel_type_get, _mul_nbapi.c_conx_user_flow_tunnel_type_set)
    __swig_setmethods__["app_cookie"] = _mul_nbapi.c_conx_user_flow_app_cookie_set
    __swig_getmethods__["app_cookie"] = _mul_nbapi.c_conx_user_flow_app_cookie_get
    if _newclass:app_cookie = _swig_property(_mul_nbapi.c_conx_user_flow_app_cookie_get, _mul_nbapi.c_conx_user_flow_app_cookie_set)
    __swig_setmethods__["conx_flags"] = _mul_nbapi.c_conx_user_flow_conx_flags_set
    __swig_getmethods__["conx_flags"] = _mul_nbapi.c_conx_user_flow_conx_flags_get
    if _newclass:conx_flags = _swig_property(_mul_nbapi.c_conx_user_flow_conx_flags_get, _mul_nbapi.c_conx_user_flow_conx_flags_set)
    __swig_setmethods__["src_dpid_list"] = _mul_nbapi.c_conx_user_flow_src_dpid_list_set
    __swig_getmethods__["src_dpid_list"] = _mul_nbapi.c_conx_user_flow_src_dpid_list_get
    if _newclass:src_dpid_list = _swig_property(_mul_nbapi.c_conx_user_flow_src_dpid_list_get, _mul_nbapi.c_conx_user_flow_src_dpid_list_set)
    def __init__(self): 
        this = _mul_nbapi.new_c_conx_user_flow()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_c_conx_user_flow
    __del__ = lambda self : None;
c_conx_user_flow_swigregister = _mul_nbapi.c_conx_user_flow_swigregister
c_conx_user_flow_swigregister(c_conx_user_flow)
CONX_UFLOW_FORCE = _mul_nbapi.CONX_UFLOW_FORCE
CONX_UFLOW_DFL = _mul_nbapi.CONX_UFLOW_DFL

C_OFP_ERR_CODE_BASE = _mul_nbapi.C_OFP_ERR_CODE_BASE
OFPBRC_BAD_DPID = _mul_nbapi.OFPBRC_BAD_DPID
OFPBRC_BAD_APP_REG = _mul_nbapi.OFPBRC_BAD_APP_REG
OFPBRC_BAD_APP_UREG = _mul_nbapi.OFPBRC_BAD_APP_UREG
OFPBRC_BAD_NO_INFO = _mul_nbapi.OFPBRC_BAD_NO_INFO
OFPBRC_BAD_GENERIC = _mul_nbapi.OFPBRC_BAD_GENERIC
OFPBRC_BAD_GROUP_ID = _mul_nbapi.OFPBRC_BAD_GROUP_ID
OFPBRC_BAD_METER_ID = _mul_nbapi.OFPBRC_BAD_METER_ID
OFPBAC_BAD_GENERIC = _mul_nbapi.OFPBAC_BAD_GENERIC
OFPFMFC_BAD_FLAG = _mul_nbapi.OFPFMFC_BAD_FLAG
OFPFMFC_GENERIC = _mul_nbapi.OFPFMFC_GENERIC
OFPFMFC_FLOW_EXIST = _mul_nbapi.OFPFMFC_FLOW_EXIST
C_OFP_MAX_ERR_LEN = _mul_nbapi.C_OFP_MAX_ERR_LEN
__MUL_APP_INFRA_H__ = _mul_nbapi.__MUL_APP_INFRA_H__
class mul_switch(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, mul_switch, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, mul_switch, name)
    __repr__ = _swig_repr
    __swig_setmethods__["hdl"] = _mul_nbapi.mul_switch_hdl_set
    __swig_getmethods__["hdl"] = _mul_nbapi.mul_switch_hdl_get
    if _newclass:hdl = _swig_property(_mul_nbapi.mul_switch_hdl_get, _mul_nbapi.mul_switch_hdl_set)
    __swig_setmethods__["lock"] = _mul_nbapi.mul_switch_lock_set
    __swig_getmethods__["lock"] = _mul_nbapi.mul_switch_lock_get
    if _newclass:lock = _swig_property(_mul_nbapi.mul_switch_lock_get, _mul_nbapi.mul_switch_lock_set)
    __swig_setmethods__["ref"] = _mul_nbapi.mul_switch_ref_set
    __swig_getmethods__["ref"] = _mul_nbapi.mul_switch_ref_get
    if _newclass:ref = _swig_property(_mul_nbapi.mul_switch_ref_get, _mul_nbapi.mul_switch_ref_set)
    __swig_setmethods__["dpid"] = _mul_nbapi.mul_switch_dpid_set
    __swig_getmethods__["dpid"] = _mul_nbapi.mul_switch_dpid_get
    if _newclass:dpid = _swig_property(_mul_nbapi.mul_switch_dpid_get, _mul_nbapi.mul_switch_dpid_set)
    __swig_setmethods__["alias_id"] = _mul_nbapi.mul_switch_alias_id_set
    __swig_getmethods__["alias_id"] = _mul_nbapi.mul_switch_alias_id_get
    if _newclass:alias_id = _swig_property(_mul_nbapi.mul_switch_alias_id_get, _mul_nbapi.mul_switch_alias_id_set)
    __swig_setmethods__["port_list"] = _mul_nbapi.mul_switch_port_list_set
    __swig_getmethods__["port_list"] = _mul_nbapi.mul_switch_port_list_get
    if _newclass:port_list = _swig_property(_mul_nbapi.mul_switch_port_list_get, _mul_nbapi.mul_switch_port_list_set)
    __swig_setmethods__["n_stale"] = _mul_nbapi.mul_switch_n_stale_set
    __swig_getmethods__["n_stale"] = _mul_nbapi.mul_switch_n_stale_get
    if _newclass:n_stale = _swig_property(_mul_nbapi.mul_switch_n_stale_get, _mul_nbapi.mul_switch_n_stale_set)
    __swig_setmethods__["priv"] = _mul_nbapi.mul_switch_priv_set
    __swig_getmethods__["priv"] = _mul_nbapi.mul_switch_priv_get
    if _newclass:priv = _swig_property(_mul_nbapi.mul_switch_priv_get, _mul_nbapi.mul_switch_priv_set)
    __swig_setmethods__["n_buffers"] = _mul_nbapi.mul_switch_n_buffers_set
    __swig_getmethods__["n_buffers"] = _mul_nbapi.mul_switch_n_buffers_get
    if _newclass:n_buffers = _swig_property(_mul_nbapi.mul_switch_n_buffers_get, _mul_nbapi.mul_switch_n_buffers_set)
    __swig_setmethods__["n_tables"] = _mul_nbapi.mul_switch_n_tables_set
    __swig_getmethods__["n_tables"] = _mul_nbapi.mul_switch_n_tables_get
    if _newclass:n_tables = _swig_property(_mul_nbapi.mul_switch_n_tables_get, _mul_nbapi.mul_switch_n_tables_set)
    __swig_setmethods__["ofp_ver"] = _mul_nbapi.mul_switch_ofp_ver_set
    __swig_getmethods__["ofp_ver"] = _mul_nbapi.mul_switch_ofp_ver_get
    if _newclass:ofp_ver = _swig_property(_mul_nbapi.mul_switch_ofp_ver_get, _mul_nbapi.mul_switch_ofp_ver_set)
    def __init__(self): 
        this = _mul_nbapi.new_mul_switch()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_mul_switch
    __del__ = lambda self : None;
mul_switch_swigregister = _mul_nbapi.mul_switch_swigregister
mul_switch_swigregister(mul_switch)

class mul_port(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, mul_port, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, mul_port, name)
    __repr__ = _swig_repr
    __swig_setmethods__["owner"] = _mul_nbapi.mul_port_owner_set
    __swig_getmethods__["owner"] = _mul_nbapi.mul_port_owner_get
    if _newclass:owner = _swig_property(_mul_nbapi.mul_port_owner_get, _mul_nbapi.mul_port_owner_set)
    __swig_setmethods__["port_no"] = _mul_nbapi.mul_port_port_no_set
    __swig_getmethods__["port_no"] = _mul_nbapi.mul_port_port_no_get
    if _newclass:port_no = _swig_property(_mul_nbapi.mul_port_port_no_get, _mul_nbapi.mul_port_port_no_set)
    __swig_setmethods__["config"] = _mul_nbapi.mul_port_config_set
    __swig_getmethods__["config"] = _mul_nbapi.mul_port_config_get
    if _newclass:config = _swig_property(_mul_nbapi.mul_port_config_get, _mul_nbapi.mul_port_config_set)
    __swig_setmethods__["state"] = _mul_nbapi.mul_port_state_set
    __swig_getmethods__["state"] = _mul_nbapi.mul_port_state_get
    if _newclass:state = _swig_property(_mul_nbapi.mul_port_state_get, _mul_nbapi.mul_port_state_set)
    __swig_setmethods__["hw_addr"] = _mul_nbapi.mul_port_hw_addr_set
    __swig_getmethods__["hw_addr"] = _mul_nbapi.mul_port_hw_addr_get
    if _newclass:hw_addr = _swig_property(_mul_nbapi.mul_port_hw_addr_get, _mul_nbapi.mul_port_hw_addr_set)
    __swig_setmethods__["n_stale"] = _mul_nbapi.mul_port_n_stale_set
    __swig_getmethods__["n_stale"] = _mul_nbapi.mul_port_n_stale_get
    if _newclass:n_stale = _swig_property(_mul_nbapi.mul_port_n_stale_get, _mul_nbapi.mul_port_n_stale_set)
    __swig_setmethods__["priv"] = _mul_nbapi.mul_port_priv_set
    __swig_getmethods__["priv"] = _mul_nbapi.mul_port_priv_get
    if _newclass:priv = _swig_property(_mul_nbapi.mul_port_priv_get, _mul_nbapi.mul_port_priv_set)
    def __init__(self): 
        this = _mul_nbapi.new_mul_port()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_mul_port
    __del__ = lambda self : None;
mul_port_swigregister = _mul_nbapi.mul_port_swigregister
mul_port_swigregister(mul_port)

class mul_app_client_cb(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, mul_app_client_cb, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, mul_app_client_cb, name)
    __repr__ = _swig_repr
    __swig_setmethods__["switch_priv_alloc"] = _mul_nbapi.mul_app_client_cb_switch_priv_alloc_set
    __swig_getmethods__["switch_priv_alloc"] = _mul_nbapi.mul_app_client_cb_switch_priv_alloc_get
    if _newclass:switch_priv_alloc = _swig_property(_mul_nbapi.mul_app_client_cb_switch_priv_alloc_get, _mul_nbapi.mul_app_client_cb_switch_priv_alloc_set)
    __swig_setmethods__["switch_priv_free"] = _mul_nbapi.mul_app_client_cb_switch_priv_free_set
    __swig_getmethods__["switch_priv_free"] = _mul_nbapi.mul_app_client_cb_switch_priv_free_get
    if _newclass:switch_priv_free = _swig_property(_mul_nbapi.mul_app_client_cb_switch_priv_free_get, _mul_nbapi.mul_app_client_cb_switch_priv_free_set)
    __swig_setmethods__["switch_add_cb"] = _mul_nbapi.mul_app_client_cb_switch_add_cb_set
    __swig_getmethods__["switch_add_cb"] = _mul_nbapi.mul_app_client_cb_switch_add_cb_get
    if _newclass:switch_add_cb = _swig_property(_mul_nbapi.mul_app_client_cb_switch_add_cb_get, _mul_nbapi.mul_app_client_cb_switch_add_cb_set)
    __swig_setmethods__["switch_del_cb"] = _mul_nbapi.mul_app_client_cb_switch_del_cb_set
    __swig_getmethods__["switch_del_cb"] = _mul_nbapi.mul_app_client_cb_switch_del_cb_get
    if _newclass:switch_del_cb = _swig_property(_mul_nbapi.mul_app_client_cb_switch_del_cb_get, _mul_nbapi.mul_app_client_cb_switch_del_cb_set)
    __swig_setmethods__["switch_priv_port_alloc"] = _mul_nbapi.mul_app_client_cb_switch_priv_port_alloc_set
    __swig_getmethods__["switch_priv_port_alloc"] = _mul_nbapi.mul_app_client_cb_switch_priv_port_alloc_get
    if _newclass:switch_priv_port_alloc = _swig_property(_mul_nbapi.mul_app_client_cb_switch_priv_port_alloc_get, _mul_nbapi.mul_app_client_cb_switch_priv_port_alloc_set)
    __swig_setmethods__["switch_priv_port_free"] = _mul_nbapi.mul_app_client_cb_switch_priv_port_free_set
    __swig_getmethods__["switch_priv_port_free"] = _mul_nbapi.mul_app_client_cb_switch_priv_port_free_get
    if _newclass:switch_priv_port_free = _swig_property(_mul_nbapi.mul_app_client_cb_switch_priv_port_free_get, _mul_nbapi.mul_app_client_cb_switch_priv_port_free_set)
    __swig_setmethods__["switch_port_add_cb"] = _mul_nbapi.mul_app_client_cb_switch_port_add_cb_set
    __swig_getmethods__["switch_port_add_cb"] = _mul_nbapi.mul_app_client_cb_switch_port_add_cb_get
    if _newclass:switch_port_add_cb = _swig_property(_mul_nbapi.mul_app_client_cb_switch_port_add_cb_get, _mul_nbapi.mul_app_client_cb_switch_port_add_cb_set)
    __swig_setmethods__["switch_port_del_cb"] = _mul_nbapi.mul_app_client_cb_switch_port_del_cb_set
    __swig_getmethods__["switch_port_del_cb"] = _mul_nbapi.mul_app_client_cb_switch_port_del_cb_get
    if _newclass:switch_port_del_cb = _swig_property(_mul_nbapi.mul_app_client_cb_switch_port_del_cb_get, _mul_nbapi.mul_app_client_cb_switch_port_del_cb_set)
    __swig_setmethods__["switch_port_chg"] = _mul_nbapi.mul_app_client_cb_switch_port_chg_set
    __swig_getmethods__["switch_port_chg"] = _mul_nbapi.mul_app_client_cb_switch_port_chg_get
    if _newclass:switch_port_chg = _swig_property(_mul_nbapi.mul_app_client_cb_switch_port_chg_get, _mul_nbapi.mul_app_client_cb_switch_port_chg_set)
    __swig_setmethods__["switch_port_link_chg"] = _mul_nbapi.mul_app_client_cb_switch_port_link_chg_set
    __swig_getmethods__["switch_port_link_chg"] = _mul_nbapi.mul_app_client_cb_switch_port_link_chg_get
    if _newclass:switch_port_link_chg = _swig_property(_mul_nbapi.mul_app_client_cb_switch_port_link_chg_get, _mul_nbapi.mul_app_client_cb_switch_port_link_chg_set)
    __swig_setmethods__["switch_port_adm_chg"] = _mul_nbapi.mul_app_client_cb_switch_port_adm_chg_set
    __swig_getmethods__["switch_port_adm_chg"] = _mul_nbapi.mul_app_client_cb_switch_port_adm_chg_get
    if _newclass:switch_port_adm_chg = _swig_property(_mul_nbapi.mul_app_client_cb_switch_port_adm_chg_get, _mul_nbapi.mul_app_client_cb_switch_port_adm_chg_set)
    __swig_setmethods__["switch_packet_in"] = _mul_nbapi.mul_app_client_cb_switch_packet_in_set
    __swig_getmethods__["switch_packet_in"] = _mul_nbapi.mul_app_client_cb_switch_packet_in_get
    if _newclass:switch_packet_in = _swig_property(_mul_nbapi.mul_app_client_cb_switch_packet_in_get, _mul_nbapi.mul_app_client_cb_switch_packet_in_set)
    __swig_setmethods__["switch_error"] = _mul_nbapi.mul_app_client_cb_switch_error_set
    __swig_getmethods__["switch_error"] = _mul_nbapi.mul_app_client_cb_switch_error_get
    if _newclass:switch_error = _swig_property(_mul_nbapi.mul_app_client_cb_switch_error_get, _mul_nbapi.mul_app_client_cb_switch_error_set)
    __swig_setmethods__["switch_fl_mod_err"] = _mul_nbapi.mul_app_client_cb_switch_fl_mod_err_set
    __swig_getmethods__["switch_fl_mod_err"] = _mul_nbapi.mul_app_client_cb_switch_fl_mod_err_get
    if _newclass:switch_fl_mod_err = _swig_property(_mul_nbapi.mul_app_client_cb_switch_fl_mod_err_get, _mul_nbapi.mul_app_client_cb_switch_fl_mod_err_set)
    __swig_setmethods__["switch_group_mod_err"] = _mul_nbapi.mul_app_client_cb_switch_group_mod_err_set
    __swig_getmethods__["switch_group_mod_err"] = _mul_nbapi.mul_app_client_cb_switch_group_mod_err_get
    if _newclass:switch_group_mod_err = _swig_property(_mul_nbapi.mul_app_client_cb_switch_group_mod_err_get, _mul_nbapi.mul_app_client_cb_switch_group_mod_err_set)
    __swig_setmethods__["switch_meter_mod_err"] = _mul_nbapi.mul_app_client_cb_switch_meter_mod_err_set
    __swig_getmethods__["switch_meter_mod_err"] = _mul_nbapi.mul_app_client_cb_switch_meter_mod_err_get
    if _newclass:switch_meter_mod_err = _swig_property(_mul_nbapi.mul_app_client_cb_switch_meter_mod_err_get, _mul_nbapi.mul_app_client_cb_switch_meter_mod_err_set)
    __swig_setmethods__["core_conn_closed"] = _mul_nbapi.mul_app_client_cb_core_conn_closed_set
    __swig_getmethods__["core_conn_closed"] = _mul_nbapi.mul_app_client_cb_core_conn_closed_get
    if _newclass:core_conn_closed = _swig_property(_mul_nbapi.mul_app_client_cb_core_conn_closed_get, _mul_nbapi.mul_app_client_cb_core_conn_closed_set)
    __swig_setmethods__["core_conn_reconn"] = _mul_nbapi.mul_app_client_cb_core_conn_reconn_set
    __swig_getmethods__["core_conn_reconn"] = _mul_nbapi.mul_app_client_cb_core_conn_reconn_get
    if _newclass:core_conn_reconn = _swig_property(_mul_nbapi.mul_app_client_cb_core_conn_reconn_get, _mul_nbapi.mul_app_client_cb_core_conn_reconn_set)
    __swig_setmethods__["app_ha_state"] = _mul_nbapi.mul_app_client_cb_app_ha_state_set
    __swig_getmethods__["app_ha_state"] = _mul_nbapi.mul_app_client_cb_app_ha_state_get
    if _newclass:app_ha_state = _swig_property(_mul_nbapi.mul_app_client_cb_app_ha_state_get, _mul_nbapi.mul_app_client_cb_app_ha_state_set)
    __swig_setmethods__["process_vendor_msg_cb"] = _mul_nbapi.mul_app_client_cb_process_vendor_msg_cb_set
    __swig_getmethods__["process_vendor_msg_cb"] = _mul_nbapi.mul_app_client_cb_process_vendor_msg_cb_get
    if _newclass:process_vendor_msg_cb = _swig_property(_mul_nbapi.mul_app_client_cb_process_vendor_msg_cb_get, _mul_nbapi.mul_app_client_cb_process_vendor_msg_cb_set)
    __swig_setmethods__["topo_route_status_cb"] = _mul_nbapi.mul_app_client_cb_topo_route_status_cb_set
    __swig_getmethods__["topo_route_status_cb"] = _mul_nbapi.mul_app_client_cb_topo_route_status_cb_get
    if _newclass:topo_route_status_cb = _swig_property(_mul_nbapi.mul_app_client_cb_topo_route_status_cb_get, _mul_nbapi.mul_app_client_cb_topo_route_status_cb_set)
    def __init__(self): 
        this = _mul_nbapi.new_mul_app_client_cb()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_mul_app_client_cb
    __del__ = lambda self : None;
mul_app_client_cb_swigregister = _mul_nbapi.mul_app_client_cb_swigregister
mul_app_client_cb_swigregister(mul_app_client_cb)


def mul_app_free_buf(*args):
  return _mul_nbapi.mul_app_free_buf(*args)
mul_app_free_buf = _mul_nbapi.mul_app_free_buf

def mul_register_app(*args):
  return _mul_nbapi.mul_register_app(*args)
mul_register_app = _mul_nbapi.mul_register_app

def mul_register_app_cb(*args):
  return _mul_nbapi.mul_register_app_cb(*args)
mul_register_app_cb = _mul_nbapi.mul_register_app_cb

def mul_unregister_app(*args):
  return _mul_nbapi.mul_unregister_app(*args)
mul_unregister_app = _mul_nbapi.mul_unregister_app

def mul_app_command_handler(*args):
  return _mul_nbapi.mul_app_command_handler(*args)
mul_app_command_handler = _mul_nbapi.mul_app_command_handler

def mul_app_send_flow_add(*args):
  return _mul_nbapi.mul_app_send_flow_add(*args)
mul_app_send_flow_add = _mul_nbapi.mul_app_send_flow_add

def mul_service_send_flow_add(*args):
  return _mul_nbapi.mul_service_send_flow_add(*args)
mul_service_send_flow_add = _mul_nbapi.mul_service_send_flow_add

def mul_app_send_flow_del(*args):
  return _mul_nbapi.mul_app_send_flow_del(*args)
mul_app_send_flow_del = _mul_nbapi.mul_app_send_flow_del

def mul_service_send_flow_del(*args):
  return _mul_nbapi.mul_service_send_flow_del(*args)
mul_service_send_flow_del = _mul_nbapi.mul_service_send_flow_del

def mul_app_group_id_alloc(*args):
  return _mul_nbapi.mul_app_group_id_alloc(*args)
mul_app_group_id_alloc = _mul_nbapi.mul_app_group_id_alloc

def mul_app_group_id_dealloc(*args):
  return _mul_nbapi.mul_app_group_id_dealloc(*args)
mul_app_group_id_dealloc = _mul_nbapi.mul_app_group_id_dealloc

def mul_service_send_group_add(*args):
  return _mul_nbapi.mul_service_send_group_add(*args)
mul_service_send_group_add = _mul_nbapi.mul_service_send_group_add

def mul_service_send_group_del(*args):
  return _mul_nbapi.mul_service_send_group_del(*args)
mul_service_send_group_del = _mul_nbapi.mul_service_send_group_del

def mul_app_send_pkt_out(*args):
  return _mul_nbapi.mul_app_send_pkt_out(*args)
mul_app_send_pkt_out = _mul_nbapi.mul_app_send_pkt_out

def mul_app_create_service(*args):
  return _mul_nbapi.mul_app_create_service(*args)
mul_app_create_service = _mul_nbapi.mul_app_create_service

def mul_app_get_service(*args):
  return _mul_nbapi.mul_app_get_service(*args)
mul_app_get_service = _mul_nbapi.mul_app_get_service

def mul_app_get_service_notify(*args):
  return _mul_nbapi.mul_app_get_service_notify(*args)
mul_app_get_service_notify = _mul_nbapi.mul_app_get_service_notify

def mul_app_get_service_notify_ka(*args):
  return _mul_nbapi.mul_app_get_service_notify_ka(*args)
mul_app_get_service_notify_ka = _mul_nbapi.mul_app_get_service_notify_ka

def mul_app_destroy_service(*args):
  return _mul_nbapi.mul_app_destroy_service(*args)
mul_app_destroy_service = _mul_nbapi.mul_app_destroy_service

def mul_app_is_master():
  return _mul_nbapi.mul_app_is_master()
mul_app_is_master = _mul_nbapi.mul_app_is_master

def c_app_switch_get_with_id(*args):
  return _mul_nbapi.c_app_switch_get_with_id(*args)
c_app_switch_get_with_id = _mul_nbapi.c_app_switch_get_with_id

def c_app_traverse_all_switches(*args):
  return _mul_nbapi.c_app_traverse_all_switches(*args)
c_app_traverse_all_switches = _mul_nbapi.c_app_traverse_all_switches

def __c_app_traverse_all_switches(*args):
  return _mul_nbapi.__c_app_traverse_all_switches(*args)
__c_app_traverse_all_switches = _mul_nbapi.__c_app_traverse_all_switches

def c_app_switch_get_version_with_id(*args):
  return _mul_nbapi.c_app_switch_get_version_with_id(*args)
c_app_switch_get_version_with_id = _mul_nbapi.c_app_switch_get_version_with_id

def c_app_switch_get_dpid_with_alias(*args):
  return _mul_nbapi.c_app_switch_get_dpid_with_alias(*args)
c_app_switch_get_dpid_with_alias = _mul_nbapi.c_app_switch_get_dpid_with_alias

def c_app_switch_put(*args):
  return _mul_nbapi.c_app_switch_put(*args)
c_app_switch_put = _mul_nbapi.c_app_switch_put

def mul_app_act_alloc(*args):
  return _mul_nbapi.mul_app_act_alloc(*args)
mul_app_act_alloc = _mul_nbapi.mul_app_act_alloc

def mul_app_act_free(*args):
  return _mul_nbapi.mul_app_act_free(*args)
mul_app_act_free = _mul_nbapi.mul_app_act_free

def mul_app_act_len(*args):
  return _mul_nbapi.mul_app_act_len(*args)
mul_app_act_len = _mul_nbapi.mul_app_act_len

def mul_app_act_buf_room(*args):
  return _mul_nbapi.mul_app_act_buf_room(*args)
mul_app_act_buf_room = _mul_nbapi.mul_app_act_buf_room

def mul_app_act_set_ctors(*args):
  return _mul_nbapi.mul_app_act_set_ctors(*args)
mul_app_act_set_ctors = _mul_nbapi.mul_app_act_set_ctors

def mul_app_inst_goto(*args):
  return _mul_nbapi.mul_app_inst_goto(*args)
mul_app_inst_goto = _mul_nbapi.mul_app_inst_goto

def mul_app_inst_meter(*args):
  return _mul_nbapi.mul_app_inst_meter(*args)
mul_app_inst_meter = _mul_nbapi.mul_app_inst_meter

def mul_app_inst_wr_meta(*args):
  return _mul_nbapi.mul_app_inst_wr_meta(*args)
mul_app_inst_wr_meta = _mul_nbapi.mul_app_inst_wr_meta

def mul_app_set_inst_write(*args):
  return _mul_nbapi.mul_app_set_inst_write(*args)
mul_app_set_inst_write = _mul_nbapi.mul_app_set_inst_write

def mul_app_set_inst_apply(*args):
  return _mul_nbapi.mul_app_set_inst_apply(*args)
mul_app_set_inst_apply = _mul_nbapi.mul_app_set_inst_apply

def mul_app_action_output(*args):
  return _mul_nbapi.mul_app_action_output(*args)
mul_app_action_output = _mul_nbapi.mul_app_action_output

def mul_app_action_set_queue(*args):
  return _mul_nbapi.mul_app_action_set_queue(*args)
mul_app_action_set_queue = _mul_nbapi.mul_app_action_set_queue

def mul_app_action_set_vid(*args):
  return _mul_nbapi.mul_app_action_set_vid(*args)
mul_app_action_set_vid = _mul_nbapi.mul_app_action_set_vid

def mul_app_action_strip_vlan(*args):
  return _mul_nbapi.mul_app_action_strip_vlan(*args)
mul_app_action_strip_vlan = _mul_nbapi.mul_app_action_strip_vlan

def mul_app_action_set_dmac(*args):
  return _mul_nbapi.mul_app_action_set_dmac(*args)
mul_app_action_set_dmac = _mul_nbapi.mul_app_action_set_dmac

def mul_app_action_set_smac(*args):
  return _mul_nbapi.mul_app_action_set_smac(*args)
mul_app_action_set_smac = _mul_nbapi.mul_app_action_set_smac

def mul_app_action_set_eth_type(*args):
  return _mul_nbapi.mul_app_action_set_eth_type(*args)
mul_app_action_set_eth_type = _mul_nbapi.mul_app_action_set_eth_type

def mul_app_action_push_hdr(*args):
  return _mul_nbapi.mul_app_action_push_hdr(*args)
mul_app_action_push_hdr = _mul_nbapi.mul_app_action_push_hdr

def mul_app_action_strip_mpls(*args):
  return _mul_nbapi.mul_app_action_strip_mpls(*args)
mul_app_action_strip_mpls = _mul_nbapi.mul_app_action_strip_mpls

def mul_app_action_set_mpls_ttl(*args):
  return _mul_nbapi.mul_app_action_set_mpls_ttl(*args)
mul_app_action_set_mpls_ttl = _mul_nbapi.mul_app_action_set_mpls_ttl

def mul_app_action_set_mpls_label(*args):
  return _mul_nbapi.mul_app_action_set_mpls_label(*args)
mul_app_action_set_mpls_label = _mul_nbapi.mul_app_action_set_mpls_label

def mul_app_action_set_mpls_tc(*args):
  return _mul_nbapi.mul_app_action_set_mpls_tc(*args)
mul_app_action_set_mpls_tc = _mul_nbapi.mul_app_action_set_mpls_tc

def mul_app_action_set_mpls_bos(*args):
  return _mul_nbapi.mul_app_action_set_mpls_bos(*args)
mul_app_action_set_mpls_bos = _mul_nbapi.mul_app_action_set_mpls_bos

def mul_app_action_dec_mpls_ttl(*args):
  return _mul_nbapi.mul_app_action_dec_mpls_ttl(*args)
mul_app_action_dec_mpls_ttl = _mul_nbapi.mul_app_action_dec_mpls_ttl

def mul_app_action_set_nw_ttl(*args):
  return _mul_nbapi.mul_app_action_set_nw_ttl(*args)
mul_app_action_set_nw_ttl = _mul_nbapi.mul_app_action_set_nw_ttl

def mul_app_action_dec_nw_ttl(*args):
  return _mul_nbapi.mul_app_action_dec_nw_ttl(*args)
mul_app_action_dec_nw_ttl = _mul_nbapi.mul_app_action_dec_nw_ttl

def mul_app_action_cp_ttl(*args):
  return _mul_nbapi.mul_app_action_cp_ttl(*args)
mul_app_action_cp_ttl = _mul_nbapi.mul_app_action_cp_ttl

def mul_app_action_strip_pbb(*args):
  return _mul_nbapi.mul_app_action_strip_pbb(*args)
mul_app_action_strip_pbb = _mul_nbapi.mul_app_action_strip_pbb

def mul_app_action_set_vlan_pcp(*args):
  return _mul_nbapi.mul_app_action_set_vlan_pcp(*args)
mul_app_action_set_vlan_pcp = _mul_nbapi.mul_app_action_set_vlan_pcp

def mul_app_action_set_nw_saddr(*args):
  return _mul_nbapi.mul_app_action_set_nw_saddr(*args)
mul_app_action_set_nw_saddr = _mul_nbapi.mul_app_action_set_nw_saddr

def mul_app_action_set_nw_daddr(*args):
  return _mul_nbapi.mul_app_action_set_nw_daddr(*args)
mul_app_action_set_nw_daddr = _mul_nbapi.mul_app_action_set_nw_daddr

def mul_app_action_set_nw_saddr6(*args):
  return _mul_nbapi.mul_app_action_set_nw_saddr6(*args)
mul_app_action_set_nw_saddr6 = _mul_nbapi.mul_app_action_set_nw_saddr6

def mul_app_action_set_nw_daddr6(*args):
  return _mul_nbapi.mul_app_action_set_nw_daddr6(*args)
mul_app_action_set_nw_daddr6 = _mul_nbapi.mul_app_action_set_nw_daddr6

def mul_app_action_set_nw_tos(*args):
  return _mul_nbapi.mul_app_action_set_nw_tos(*args)
mul_app_action_set_nw_tos = _mul_nbapi.mul_app_action_set_nw_tos

def mul_app_action_set_tp_udp_sport(*args):
  return _mul_nbapi.mul_app_action_set_tp_udp_sport(*args)
mul_app_action_set_tp_udp_sport = _mul_nbapi.mul_app_action_set_tp_udp_sport

def mul_app_action_set_tp_udp_dport(*args):
  return _mul_nbapi.mul_app_action_set_tp_udp_dport(*args)
mul_app_action_set_tp_udp_dport = _mul_nbapi.mul_app_action_set_tp_udp_dport

def mul_app_action_set_tp_tcp_sport(*args):
  return _mul_nbapi.mul_app_action_set_tp_tcp_sport(*args)
mul_app_action_set_tp_tcp_sport = _mul_nbapi.mul_app_action_set_tp_tcp_sport

def mul_app_action_set_tp_tcp_dport(*args):
  return _mul_nbapi.mul_app_action_set_tp_tcp_dport(*args)
mul_app_action_set_tp_tcp_dport = _mul_nbapi.mul_app_action_set_tp_tcp_dport

def mul_app_action_set_group(*args):
  return _mul_nbapi.mul_app_action_set_group(*args)
mul_app_action_set_group = _mul_nbapi.mul_app_action_set_group

def mul_app_action_set_tunnel_id(*args):
  return _mul_nbapi.mul_app_action_set_tunnel_id(*args)
mul_app_action_set_tunnel_id = _mul_nbapi.mul_app_action_set_tunnel_id

def mul_app_set_band_drop(*args):
  return _mul_nbapi.mul_app_set_band_drop(*args)
mul_app_set_band_drop = _mul_nbapi.mul_app_set_band_drop

def mul_app_set_band_dscp(*args):
  return _mul_nbapi.mul_app_set_band_dscp(*args)
mul_app_set_band_dscp = _mul_nbapi.mul_app_set_band_dscp

def mul_service_send_meter_add(*args):
  return _mul_nbapi.mul_service_send_meter_add(*args)
mul_service_send_meter_add = _mul_nbapi.mul_service_send_meter_add

def mul_service_send_meter_del(*args):
  return _mul_nbapi.mul_service_send_meter_del(*args)
mul_service_send_meter_del = _mul_nbapi.mul_service_send_meter_del

def mul_service_send_port_mod(*args):
  return _mul_nbapi.mul_service_send_port_mod(*args)
mul_service_send_port_mod = _mul_nbapi.mul_service_send_port_mod

def mul_app_send_port_mod(*args):
  return _mul_nbapi.mul_app_send_port_mod(*args)
mul_app_send_port_mod = _mul_nbapi.mul_app_send_port_mod

def mul_service_send_async_config(*args):
  return _mul_nbapi.mul_service_send_async_config(*args)
mul_service_send_async_config = _mul_nbapi.mul_service_send_async_config

def mul_app_send_loop_status(*args):
  return _mul_nbapi.mul_app_send_loop_status(*args)
mul_app_send_loop_status = _mul_nbapi.mul_app_send_loop_status

def mul_send_vendor_msg(*args):
  return _mul_nbapi.mul_send_vendor_msg(*args)
mul_send_vendor_msg = _mul_nbapi.mul_send_vendor_msg

def mul_app_core_conn_available():
  return _mul_nbapi.mul_app_core_conn_available()
mul_app_core_conn_available = _mul_nbapi.mul_app_core_conn_available

def mul_app_send_tr_status(*args):
  return _mul_nbapi.mul_app_send_tr_status(*args)
mul_app_send_tr_status = _mul_nbapi.mul_app_send_tr_status
RT_HB_INTVL_SEC = _mul_nbapi.RT_HB_INTVL_SEC
RT_HB_INTVL_INITSEC = _mul_nbapi.RT_HB_INTVL_INITSEC
RT_HB_INTVL_USEC = _mul_nbapi.RT_HB_INTVL_USEC
RT_MAX_GET_RETRIES = _mul_nbapi.RT_MAX_GET_RETRIES
class lweight_pair_(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, lweight_pair_, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, lweight_pair_, name)
    __repr__ = _swig_repr
    __swig_setmethods__["la"] = _mul_nbapi.lweight_pair__la_set
    __swig_getmethods__["la"] = _mul_nbapi.lweight_pair__la_get
    if _newclass:la = _swig_property(_mul_nbapi.lweight_pair__la_get, _mul_nbapi.lweight_pair__la_set)
    __swig_setmethods__["lb"] = _mul_nbapi.lweight_pair__lb_set
    __swig_getmethods__["lb"] = _mul_nbapi.lweight_pair__lb_get
    if _newclass:lb = _swig_property(_mul_nbapi.lweight_pair__lb_get, _mul_nbapi.lweight_pair__lb_set)
    __swig_setmethods__["weight"] = _mul_nbapi.lweight_pair__weight_set
    __swig_getmethods__["weight"] = _mul_nbapi.lweight_pair__weight_get
    if _newclass:weight = _swig_property(_mul_nbapi.lweight_pair__weight_get, _mul_nbapi.lweight_pair__weight_set)
    __swig_setmethods__["flags"] = _mul_nbapi.lweight_pair__flags_set
    __swig_getmethods__["flags"] = _mul_nbapi.lweight_pair__flags_get
    if _newclass:flags = _swig_property(_mul_nbapi.lweight_pair__flags_get, _mul_nbapi.lweight_pair__flags_set)
    def __init__(self): 
        this = _mul_nbapi.new_lweight_pair_()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_lweight_pair_
    __del__ = lambda self : None;
lweight_pair__swigregister = _mul_nbapi.lweight_pair__swigregister
lweight_pair__swigregister(lweight_pair_)
NEIGH_DFL_WEIGHT = _mul_nbapi.NEIGH_DFL_WEIGHT
NEIGH_FL_ONLINK = _mul_nbapi.NEIGH_FL_ONLINK
NEIGH_FL_BLOCK = _mul_nbapi.NEIGH_FL_BLOCK

class rt_adj_elem_(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, rt_adj_elem_, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, rt_adj_elem_, name)
    __repr__ = _swig_repr
    __swig_setmethods__["dpid_a"] = _mul_nbapi.rt_adj_elem__dpid_a_set
    __swig_getmethods__["dpid_a"] = _mul_nbapi.rt_adj_elem__dpid_a_get
    if _newclass:dpid_a = _swig_property(_mul_nbapi.rt_adj_elem__dpid_a_get, _mul_nbapi.rt_adj_elem__dpid_a_set)
    __swig_setmethods__["dpid_b"] = _mul_nbapi.rt_adj_elem__dpid_b_set
    __swig_getmethods__["dpid_b"] = _mul_nbapi.rt_adj_elem__dpid_b_get
    if _newclass:dpid_b = _swig_property(_mul_nbapi.rt_adj_elem__dpid_b_get, _mul_nbapi.rt_adj_elem__dpid_b_set)
    __swig_setmethods__["pairs"] = _mul_nbapi.rt_adj_elem__pairs_set
    __swig_getmethods__["pairs"] = _mul_nbapi.rt_adj_elem__pairs_get
    if _newclass:pairs = _swig_property(_mul_nbapi.rt_adj_elem__pairs_get, _mul_nbapi.rt_adj_elem__pairs_set)
    __swig_setmethods__["adj_pairs"] = _mul_nbapi.rt_adj_elem__adj_pairs_set
    __swig_getmethods__["adj_pairs"] = _mul_nbapi.rt_adj_elem__adj_pairs_get
    if _newclass:adj_pairs = _swig_property(_mul_nbapi.rt_adj_elem__adj_pairs_get, _mul_nbapi.rt_adj_elem__adj_pairs_set)
    def __init__(self): 
        this = _mul_nbapi.new_rt_adj_elem_()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_rt_adj_elem_
    __del__ = lambda self : None;
rt_adj_elem__swigregister = _mul_nbapi.rt_adj_elem__swigregister
rt_adj_elem__swigregister(rt_adj_elem_)
RT_MAX_ADJ_PAIRS = _mul_nbapi.RT_MAX_ADJ_PAIRS

class rt_path_elem_(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, rt_path_elem_, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, rt_path_elem_, name)
    __repr__ = _swig_repr
    __swig_setmethods__["sw_dpid"] = _mul_nbapi.rt_path_elem__sw_dpid_set
    __swig_getmethods__["sw_dpid"] = _mul_nbapi.rt_path_elem__sw_dpid_get
    if _newclass:sw_dpid = _swig_property(_mul_nbapi.rt_path_elem__sw_dpid_get, _mul_nbapi.rt_path_elem__sw_dpid_set)
    __swig_setmethods__["sw_alias"] = _mul_nbapi.rt_path_elem__sw_alias_set
    __swig_getmethods__["sw_alias"] = _mul_nbapi.rt_path_elem__sw_alias_get
    if _newclass:sw_alias = _swig_property(_mul_nbapi.rt_path_elem__sw_alias_get, _mul_nbapi.rt_path_elem__sw_alias_set)
    __swig_setmethods__["flags"] = _mul_nbapi.rt_path_elem__flags_set
    __swig_getmethods__["flags"] = _mul_nbapi.rt_path_elem__flags_get
    if _newclass:flags = _swig_property(_mul_nbapi.rt_path_elem__flags_get, _mul_nbapi.rt_path_elem__flags_set)
    __swig_setmethods__["in_port"] = _mul_nbapi.rt_path_elem__in_port_set
    __swig_getmethods__["in_port"] = _mul_nbapi.rt_path_elem__in_port_get
    if _newclass:in_port = _swig_property(_mul_nbapi.rt_path_elem__in_port_get, _mul_nbapi.rt_path_elem__in_port_set)
    __swig_setmethods__["link"] = _mul_nbapi.rt_path_elem__link_set
    __swig_getmethods__["link"] = _mul_nbapi.rt_path_elem__link_get
    if _newclass:link = _swig_property(_mul_nbapi.rt_path_elem__link_get, _mul_nbapi.rt_path_elem__link_set)
    def __init__(self): 
        this = _mul_nbapi.new_rt_path_elem_()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_rt_path_elem_
    __del__ = lambda self : None;
rt_path_elem__swigregister = _mul_nbapi.rt_path_elem__swigregister
rt_path_elem__swigregister(rt_path_elem_)
RT_PELEM_FIRST_HOP = _mul_nbapi.RT_PELEM_FIRST_HOP
RT_PELEM_LAST_HOP = _mul_nbapi.RT_PELEM_LAST_HOP

class rt_transit_elem_(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, rt_transit_elem_, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, rt_transit_elem_, name)
    __repr__ = _swig_repr
    __swig_setmethods__["n_paths"] = _mul_nbapi.rt_transit_elem__n_paths_set
    __swig_getmethods__["n_paths"] = _mul_nbapi.rt_transit_elem__n_paths_get
    if _newclass:n_paths = _swig_property(_mul_nbapi.rt_transit_elem__n_paths_get, _mul_nbapi.rt_transit_elem__n_paths_set)
    __swig_setmethods__["sw_alias"] = _mul_nbapi.rt_transit_elem__sw_alias_set
    __swig_getmethods__["sw_alias"] = _mul_nbapi.rt_transit_elem__sw_alias_get
    if _newclass:sw_alias = _swig_property(_mul_nbapi.rt_transit_elem__sw_alias_get, _mul_nbapi.rt_transit_elem__sw_alias_set)
    def __init__(self): 
        this = _mul_nbapi.new_rt_transit_elem_()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_rt_transit_elem_
    __del__ = lambda self : None;
rt_transit_elem__swigregister = _mul_nbapi.rt_transit_elem__swigregister
rt_transit_elem__swigregister(rt_transit_elem_)
RT_MAX_EQ_PATHS = _mul_nbapi.RT_MAX_EQ_PATHS

class rt_list(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, rt_list, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, rt_list, name)
    __repr__ = _swig_repr
    __swig_setmethods__["skip"] = _mul_nbapi.rt_list_skip_set
    __swig_getmethods__["skip"] = _mul_nbapi.rt_list_skip_get
    if _newclass:skip = _swig_property(_mul_nbapi.rt_list_skip_get, _mul_nbapi.rt_list_skip_set)
    __swig_setmethods__["route"] = _mul_nbapi.rt_list_route_set
    __swig_getmethods__["route"] = _mul_nbapi.rt_list_route_get
    if _newclass:route = _swig_property(_mul_nbapi.rt_list_route_get, _mul_nbapi.rt_list_route_set)
    __swig_setmethods__["next"] = _mul_nbapi.rt_list_next_set
    __swig_getmethods__["next"] = _mul_nbapi.rt_list_next_get
    if _newclass:next = _swig_property(_mul_nbapi.rt_list_next_get, _mul_nbapi.rt_list_next_set)
    def __init__(self): 
        this = _mul_nbapi.new_rt_list()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_rt_list
    __del__ = lambda self : None;
rt_list_swigregister = _mul_nbapi.rt_list_swigregister
rt_list_swigregister(rt_list)


def mul_route_path_traverse(*args):
  return _mul_nbapi.mul_route_path_traverse(*args)
mul_route_path_traverse = _mul_nbapi.mul_route_path_traverse

def mul_destroy_route(*args):
  return _mul_nbapi.mul_destroy_route(*args)
mul_destroy_route = _mul_nbapi.mul_destroy_route

def mul_route_list_free(*args):
  return _mul_nbapi.mul_route_list_free(*args)
mul_route_list_free = _mul_nbapi.mul_route_list_free

def mul_route_get_nodes(*args):
  return _mul_nbapi.mul_route_get_nodes(*args)
mul_route_get_nodes = _mul_nbapi.mul_route_get_nodes

def mul_route_get(*args):
  return _mul_nbapi.mul_route_get(*args)
mul_route_get = _mul_nbapi.mul_route_get

def mul_route_get_mp(*args):
  return _mul_nbapi.mul_route_get_mp(*args)
mul_route_get_mp = _mul_nbapi.mul_route_get_mp

def mul_route_get_all(*args):
  return _mul_nbapi.mul_route_get_all(*args)
mul_route_get_all = _mul_nbapi.mul_route_get_all

def mul_route_init_block_meta(*args):
  return _mul_nbapi.mul_route_init_block_meta(*args)
mul_route_init_block_meta = _mul_nbapi.mul_route_init_block_meta

def mul_route_service_get():
  return _mul_nbapi.mul_route_service_get()
mul_route_service_get = _mul_nbapi.mul_route_service_get

def mul_route_service_destroy(*args):
  return _mul_nbapi.mul_route_service_destroy(*args)
mul_route_service_destroy = _mul_nbapi.mul_route_service_destroy
class nbapi_switch_brief_list_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, nbapi_switch_brief_list_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, nbapi_switch_brief_list_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["array"] = _mul_nbapi.nbapi_switch_brief_list_t_array_set
    __swig_getmethods__["array"] = _mul_nbapi.nbapi_switch_brief_list_t_array_get
    if _newclass:array = _swig_property(_mul_nbapi.nbapi_switch_brief_list_t_array_get, _mul_nbapi.nbapi_switch_brief_list_t_array_set)
    __swig_setmethods__["length"] = _mul_nbapi.nbapi_switch_brief_list_t_length_set
    __swig_getmethods__["length"] = _mul_nbapi.nbapi_switch_brief_list_t_length_get
    if _newclass:length = _swig_property(_mul_nbapi.nbapi_switch_brief_list_t_length_get, _mul_nbapi.nbapi_switch_brief_list_t_length_set)
    def __init__(self): 
        this = _mul_nbapi.new_nbapi_switch_brief_list_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_nbapi_switch_brief_list_t
    __del__ = lambda self : None;
nbapi_switch_brief_list_t_swigregister = _mul_nbapi.nbapi_switch_brief_list_t_swigregister
nbapi_switch_brief_list_t_swigregister(nbapi_switch_brief_list_t)

class nbapi_port_list_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, nbapi_port_list_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, nbapi_port_list_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["array"] = _mul_nbapi.nbapi_port_list_t_array_set
    __swig_getmethods__["array"] = _mul_nbapi.nbapi_port_list_t_array_get
    if _newclass:array = _swig_property(_mul_nbapi.nbapi_port_list_t_array_get, _mul_nbapi.nbapi_port_list_t_array_set)
    __swig_setmethods__["length"] = _mul_nbapi.nbapi_port_list_t_length_set
    __swig_getmethods__["length"] = _mul_nbapi.nbapi_port_list_t_length_get
    if _newclass:length = _swig_property(_mul_nbapi.nbapi_port_list_t_length_get, _mul_nbapi.nbapi_port_list_t_length_set)
    def __init__(self): 
        this = _mul_nbapi.new_nbapi_port_list_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_nbapi_port_list_t
    __del__ = lambda self : None;
nbapi_port_list_t_swigregister = _mul_nbapi.nbapi_port_list_t_swigregister
nbapi_port_list_t_swigregister(nbapi_port_list_t)

class nbapi_swport_list_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, nbapi_swport_list_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, nbapi_swport_list_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["array"] = _mul_nbapi.nbapi_swport_list_t_array_set
    __swig_getmethods__["array"] = _mul_nbapi.nbapi_swport_list_t_array_get
    if _newclass:array = _swig_property(_mul_nbapi.nbapi_swport_list_t_array_get, _mul_nbapi.nbapi_swport_list_t_array_set)
    __swig_setmethods__["length"] = _mul_nbapi.nbapi_swport_list_t_length_set
    __swig_getmethods__["length"] = _mul_nbapi.nbapi_swport_list_t_length_get
    if _newclass:length = _swig_property(_mul_nbapi.nbapi_swport_list_t_length_get, _mul_nbapi.nbapi_swport_list_t_length_set)
    def __init__(self): 
        this = _mul_nbapi.new_nbapi_swport_list_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_nbapi_swport_list_t
    __del__ = lambda self : None;
nbapi_swport_list_t_swigregister = _mul_nbapi.nbapi_swport_list_t_swigregister
nbapi_swport_list_t_swigregister(nbapi_swport_list_t)

class nbapi_bucket_list_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, nbapi_bucket_list_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, nbapi_bucket_list_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["array"] = _mul_nbapi.nbapi_bucket_list_t_array_set
    __swig_getmethods__["array"] = _mul_nbapi.nbapi_bucket_list_t_array_get
    if _newclass:array = _swig_property(_mul_nbapi.nbapi_bucket_list_t_array_get, _mul_nbapi.nbapi_bucket_list_t_array_set)
    __swig_setmethods__["length"] = _mul_nbapi.nbapi_bucket_list_t_length_set
    __swig_getmethods__["length"] = _mul_nbapi.nbapi_bucket_list_t_length_get
    if _newclass:length = _swig_property(_mul_nbapi.nbapi_bucket_list_t_length_get, _mul_nbapi.nbapi_bucket_list_t_length_set)
    def __init__(self): 
        this = _mul_nbapi.new_nbapi_bucket_list_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_nbapi_bucket_list_t
    __del__ = lambda self : None;
nbapi_bucket_list_t_swigregister = _mul_nbapi.nbapi_bucket_list_t_swigregister
nbapi_bucket_list_t_swigregister(nbapi_bucket_list_t)

class nbapi_action_list_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, nbapi_action_list_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, nbapi_action_list_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["array"] = _mul_nbapi.nbapi_action_list_t_array_set
    __swig_getmethods__["array"] = _mul_nbapi.nbapi_action_list_t_array_get
    if _newclass:array = _swig_property(_mul_nbapi.nbapi_action_list_t_array_get, _mul_nbapi.nbapi_action_list_t_array_set)
    __swig_setmethods__["length"] = _mul_nbapi.nbapi_action_list_t_length_set
    __swig_getmethods__["length"] = _mul_nbapi.nbapi_action_list_t_length_get
    if _newclass:length = _swig_property(_mul_nbapi.nbapi_action_list_t_length_get, _mul_nbapi.nbapi_action_list_t_length_set)
    def __init__(self): 
        this = _mul_nbapi.new_nbapi_action_list_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_nbapi_action_list_t
    __del__ = lambda self : None;
nbapi_action_list_t_swigregister = _mul_nbapi.nbapi_action_list_t_swigregister
nbapi_action_list_t_swigregister(nbapi_action_list_t)

class ofp_phy_port_array(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofp_phy_port_array, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofp_phy_port_array, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _mul_nbapi.new_ofp_phy_port_array(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_ofp_phy_port_array
    __del__ = lambda self : None;
    def __getitem__(self, *args): return _mul_nbapi.ofp_phy_port_array___getitem__(self, *args)
    def __setitem__(self, *args): return _mul_nbapi.ofp_phy_port_array___setitem__(self, *args)
    def cast(self): return _mul_nbapi.ofp_phy_port_array_cast(self)
    __swig_getmethods__["frompointer"] = lambda x: _mul_nbapi.ofp_phy_port_array_frompointer
    if _newclass:frompointer = staticmethod(_mul_nbapi.ofp_phy_port_array_frompointer)
ofp_phy_port_array_swigregister = _mul_nbapi.ofp_phy_port_array_swigregister
ofp_phy_port_array_swigregister(ofp_phy_port_array)

def ofp_phy_port_array_frompointer(*args):
  return _mul_nbapi.ofp_phy_port_array_frompointer(*args)
ofp_phy_port_array_frompointer = _mul_nbapi.ofp_phy_port_array_frompointer

class c_sw_port_array(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, c_sw_port_array, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, c_sw_port_array, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _mul_nbapi.new_c_sw_port_array(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_c_sw_port_array
    __del__ = lambda self : None;
    def __getitem__(self, *args): return _mul_nbapi.c_sw_port_array___getitem__(self, *args)
    def __setitem__(self, *args): return _mul_nbapi.c_sw_port_array___setitem__(self, *args)
    def cast(self): return _mul_nbapi.c_sw_port_array_cast(self)
    __swig_getmethods__["frompointer"] = lambda x: _mul_nbapi.c_sw_port_array_frompointer
    if _newclass:frompointer = staticmethod(_mul_nbapi.c_sw_port_array_frompointer)
c_sw_port_array_swigregister = _mul_nbapi.c_sw_port_array_swigregister
c_sw_port_array_swigregister(c_sw_port_array)

def c_sw_port_array_frompointer(*args):
  return _mul_nbapi.c_sw_port_array_frompointer(*args)
c_sw_port_array_frompointer = _mul_nbapi.c_sw_port_array_frompointer

class c_ofp_bkt_array(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, c_ofp_bkt_array, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, c_ofp_bkt_array, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _mul_nbapi.new_c_ofp_bkt_array(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_c_ofp_bkt_array
    __del__ = lambda self : None;
    def __getitem__(self, *args): return _mul_nbapi.c_ofp_bkt_array___getitem__(self, *args)
    def __setitem__(self, *args): return _mul_nbapi.c_ofp_bkt_array___setitem__(self, *args)
    def cast(self): return _mul_nbapi.c_ofp_bkt_array_cast(self)
    __swig_getmethods__["frompointer"] = lambda x: _mul_nbapi.c_ofp_bkt_array_frompointer
    if _newclass:frompointer = staticmethod(_mul_nbapi.c_ofp_bkt_array_frompointer)
c_ofp_bkt_array_swigregister = _mul_nbapi.c_ofp_bkt_array_swigregister
c_ofp_bkt_array_swigregister(c_ofp_bkt_array)

def c_ofp_bkt_array_frompointer(*args):
  return _mul_nbapi.c_ofp_bkt_array_frompointer(*args)
c_ofp_bkt_array_frompointer = _mul_nbapi.c_ofp_bkt_array_frompointer

class ofp_action_header_array(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofp_action_header_array, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofp_action_header_array, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _mul_nbapi.new_ofp_action_header_array(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_ofp_action_header_array
    __del__ = lambda self : None;
    def __getitem__(self, *args): return _mul_nbapi.ofp_action_header_array___getitem__(self, *args)
    def __setitem__(self, *args): return _mul_nbapi.ofp_action_header_array___setitem__(self, *args)
    def cast(self): return _mul_nbapi.ofp_action_header_array_cast(self)
    __swig_getmethods__["frompointer"] = lambda x: _mul_nbapi.ofp_action_header_array_frompointer
    if _newclass:frompointer = staticmethod(_mul_nbapi.ofp_action_header_array_frompointer)
ofp_action_header_array_swigregister = _mul_nbapi.ofp_action_header_array_swigregister
ofp_action_header_array_swigregister(ofp_action_header_array)

def ofp_action_header_array_frompointer(*args):
  return _mul_nbapi.ofp_action_header_array_frompointer(*args)
ofp_action_header_array_frompointer = _mul_nbapi.ofp_action_header_array_frompointer


def get_bit_in_32mask(*args):
  return _mul_nbapi.get_bit_in_32mask(*args)
get_bit_in_32mask = _mul_nbapi.get_bit_in_32mask
class mband_nbapi_input(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, mband_nbapi_input, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, mband_nbapi_input, name)
    __repr__ = _swig_repr
    __swig_setmethods__["rate"] = _mul_nbapi.mband_nbapi_input_rate_set
    __swig_getmethods__["rate"] = _mul_nbapi.mband_nbapi_input_rate_get
    if _newclass:rate = _swig_property(_mul_nbapi.mband_nbapi_input_rate_get, _mul_nbapi.mband_nbapi_input_rate_set)
    __swig_setmethods__["burst_size"] = _mul_nbapi.mband_nbapi_input_burst_size_set
    __swig_getmethods__["burst_size"] = _mul_nbapi.mband_nbapi_input_burst_size_get
    if _newclass:burst_size = _swig_property(_mul_nbapi.mband_nbapi_input_burst_size_get, _mul_nbapi.mband_nbapi_input_burst_size_set)
    __swig_setmethods__["prec_level"] = _mul_nbapi.mband_nbapi_input_prec_level_set
    __swig_getmethods__["prec_level"] = _mul_nbapi.mband_nbapi_input_prec_level_get
    if _newclass:prec_level = _swig_property(_mul_nbapi.mband_nbapi_input_prec_level_get, _mul_nbapi.mband_nbapi_input_prec_level_set)
    def __init__(self): 
        this = _mul_nbapi.new_mband_nbapi_input()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_mband_nbapi_input
    __del__ = lambda self : None;
mband_nbapi_input_swigregister = _mul_nbapi.mband_nbapi_input_swigregister
mband_nbapi_input_swigregister(mband_nbapi_input)


def get_switch_general(*args):
  return _mul_nbapi.get_switch_general(*args)
get_switch_general = _mul_nbapi.get_switch_general

def parse_alias_id(*args):
  return _mul_nbapi.parse_alias_id(*args)
parse_alias_id = _mul_nbapi.parse_alias_id

def get_switch_alias_from_switch_info(*args):
  return _mul_nbapi.get_switch_alias_from_switch_info(*args)
get_switch_alias_from_switch_info = _mul_nbapi.get_switch_alias_from_switch_info

def get_switch(*args):
  return _mul_nbapi.get_switch(*args)
get_switch = _mul_nbapi.get_switch

def get_switch_meter(*args):
  return _mul_nbapi.get_switch_meter(*args)
get_switch_meter = _mul_nbapi.get_switch_meter

def get_switch_table(*args):
  return _mul_nbapi.get_switch_table(*args)
get_switch_table = _mul_nbapi.get_switch_table

def get_switch_group(*args):
  return _mul_nbapi.get_switch_group(*args)
get_switch_group = _mul_nbapi.get_switch_group

def get_group_act_type(*args):
  return _mul_nbapi.get_group_act_type(*args)
get_group_act_type = _mul_nbapi.get_group_act_type

def get_max_group(*args):
  return _mul_nbapi.get_max_group(*args)
get_max_group = _mul_nbapi.get_max_group

def get_switch_all():
  return _mul_nbapi.get_switch_all()
get_switch_all = _mul_nbapi.get_switch_all

def get_switch_port(*args):
  return _mul_nbapi.get_switch_port(*args)
get_switch_port = _mul_nbapi.get_switch_port

def get_switch_port_all(*args):
  return _mul_nbapi.get_switch_port_all(*args)
get_switch_port_all = _mul_nbapi.get_switch_port_all

def nbapi_ntoh_actions(*args):
  return _mul_nbapi.nbapi_ntoh_actions(*args)
nbapi_ntoh_actions = _mul_nbapi.nbapi_ntoh_actions

def get_switch_group_table(*args):
  return _mul_nbapi.get_switch_group_table(*args)
get_switch_group_table = _mul_nbapi.get_switch_group_table
class nbapi_switch_flow_list_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, nbapi_switch_flow_list_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, nbapi_switch_flow_list_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["array"] = _mul_nbapi.nbapi_switch_flow_list_t_array_set
    __swig_getmethods__["array"] = _mul_nbapi.nbapi_switch_flow_list_t_array_get
    if _newclass:array = _swig_property(_mul_nbapi.nbapi_switch_flow_list_t_array_get, _mul_nbapi.nbapi_switch_flow_list_t_array_set)
    __swig_setmethods__["length"] = _mul_nbapi.nbapi_switch_flow_list_t_length_set
    __swig_getmethods__["length"] = _mul_nbapi.nbapi_switch_flow_list_t_length_get
    if _newclass:length = _swig_property(_mul_nbapi.nbapi_switch_flow_list_t_length_get, _mul_nbapi.nbapi_switch_flow_list_t_length_set)
    def __init__(self): 
        this = _mul_nbapi.new_nbapi_switch_flow_list_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_nbapi_switch_flow_list_t
    __del__ = lambda self : None;
nbapi_switch_flow_list_t_swigregister = _mul_nbapi.nbapi_switch_flow_list_t_swigregister
nbapi_switch_flow_list_t_swigregister(nbapi_switch_flow_list_t)

class nbapi_switch_group_list_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, nbapi_switch_group_list_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, nbapi_switch_group_list_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["array"] = _mul_nbapi.nbapi_switch_group_list_t_array_set
    __swig_getmethods__["array"] = _mul_nbapi.nbapi_switch_group_list_t_array_get
    if _newclass:array = _swig_property(_mul_nbapi.nbapi_switch_group_list_t_array_get, _mul_nbapi.nbapi_switch_group_list_t_array_set)
    __swig_setmethods__["length"] = _mul_nbapi.nbapi_switch_group_list_t_length_set
    __swig_getmethods__["length"] = _mul_nbapi.nbapi_switch_group_list_t_length_get
    if _newclass:length = _swig_property(_mul_nbapi.nbapi_switch_group_list_t_length_get, _mul_nbapi.nbapi_switch_group_list_t_length_set)
    def __init__(self): 
        this = _mul_nbapi.new_nbapi_switch_group_list_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_nbapi_switch_group_list_t
    __del__ = lambda self : None;
nbapi_switch_group_list_t_swigregister = _mul_nbapi.nbapi_switch_group_list_t_swigregister
nbapi_switch_group_list_t_swigregister(nbapi_switch_group_list_t)


def regist_nbapi_cb(*args):
  return _mul_nbapi.regist_nbapi_cb(*args)
regist_nbapi_cb = _mul_nbapi.regist_nbapi_cb

def add_static_flow(*args):
  return _mul_nbapi.add_static_flow(*args)
add_static_flow = _mul_nbapi.add_static_flow

def prepare_add_group(*args):
  return _mul_nbapi.prepare_add_group(*args)
prepare_add_group = _mul_nbapi.prepare_add_group

def nbapi_group_action_add(*args):
  return _mul_nbapi.nbapi_group_action_add(*args)
nbapi_group_action_add = _mul_nbapi.nbapi_group_action_add

def nbapi_group_add(*args):
  return _mul_nbapi.nbapi_group_add(*args)
nbapi_group_add = _mul_nbapi.nbapi_group_add

def nbapi_group_free(*args):
  return _mul_nbapi.nbapi_group_free(*args)
nbapi_group_free = _mul_nbapi.nbapi_group_free

def compare_flows(*args):
  return _mul_nbapi.compare_flows(*args)
compare_flows = _mul_nbapi.compare_flows

def nbapi_group_mdata_alloc(*args):
  return _mul_nbapi.nbapi_group_mdata_alloc(*args)
nbapi_group_mdata_alloc = _mul_nbapi.nbapi_group_mdata_alloc

def delete_static_flow(*args):
  return _mul_nbapi.delete_static_flow(*args)
delete_static_flow = _mul_nbapi.delete_static_flow

def nbapi_parse_mac_to_str(*args):
  return _mul_nbapi.nbapi_parse_mac_to_str(*args)
nbapi_parse_mac_to_str = _mul_nbapi.nbapi_parse_mac_to_str

def nbapi_fab_parse_nw_addr_to_str(*args):
  return _mul_nbapi.nbapi_fab_parse_nw_addr_to_str(*args)
nbapi_fab_parse_nw_addr_to_str = _mul_nbapi.nbapi_fab_parse_nw_addr_to_str

def nbapi_parse_ipv6_nw_addr_to_str(*args):
  return _mul_nbapi.nbapi_parse_ipv6_nw_addr_to_str(*args)
nbapi_parse_ipv6_nw_addr_to_str = _mul_nbapi.nbapi_parse_ipv6_nw_addr_to_str

def nbapi_parse_nw_addr_to_str(*args):
  return _mul_nbapi.nbapi_parse_nw_addr_to_str(*args)
nbapi_parse_nw_addr_to_str = _mul_nbapi.nbapi_parse_nw_addr_to_str

def nbapi_get_switch_version_with_id(*args):
  return _mul_nbapi.nbapi_get_switch_version_with_id(*args)
nbapi_get_switch_version_with_id = _mul_nbapi.nbapi_get_switch_version_with_id

def nbapi_make_flow(*args):
  return _mul_nbapi.nbapi_make_flow(*args)
nbapi_make_flow = _mul_nbapi.nbapi_make_flow

def nbapi_make_mask(*args):
  return _mul_nbapi.nbapi_make_mask(*args)
nbapi_make_mask = _mul_nbapi.nbapi_make_mask

def nbapi_mdata_alloc(*args):
  return _mul_nbapi.nbapi_mdata_alloc(*args)
nbapi_mdata_alloc = _mul_nbapi.nbapi_mdata_alloc

def nbapi_mdata_inst_write(*args):
  return _mul_nbapi.nbapi_mdata_inst_write(*args)
nbapi_mdata_inst_write = _mul_nbapi.nbapi_mdata_inst_write

def nbapi_mdata_inst_apply(*args):
  return _mul_nbapi.nbapi_mdata_inst_apply(*args)
nbapi_mdata_inst_apply = _mul_nbapi.nbapi_mdata_inst_apply

def nbapi_mdata_inst_meter(*args):
  return _mul_nbapi.nbapi_mdata_inst_meter(*args)
nbapi_mdata_inst_meter = _mul_nbapi.nbapi_mdata_inst_meter

def nbapi_mdata_inst_goto(*args):
  return _mul_nbapi.nbapi_mdata_inst_goto(*args)
nbapi_mdata_inst_goto = _mul_nbapi.nbapi_mdata_inst_goto

def nbapi_action_to_mdata(*args):
  return _mul_nbapi.nbapi_action_to_mdata(*args)
nbapi_action_to_mdata = _mul_nbapi.nbapi_action_to_mdata

def nbapi_mdata_free(*args):
  return _mul_nbapi.nbapi_mdata_free(*args)
nbapi_mdata_free = _mul_nbapi.nbapi_mdata_free

def nbapi_flow_free(*args):
  return _mul_nbapi.nbapi_flow_free(*args)
nbapi_flow_free = _mul_nbapi.nbapi_flow_free

def nbapi_fabric_make_flow(*args):
  return _mul_nbapi.nbapi_fabric_make_flow(*args)
nbapi_fabric_make_flow = _mul_nbapi.nbapi_fabric_make_flow

def nbapi_make_action_output(*args):
  return _mul_nbapi.nbapi_make_action_output(*args)
nbapi_make_action_output = _mul_nbapi.nbapi_make_action_output

def nbapi_make_action_set_vid(*args):
  return _mul_nbapi.nbapi_make_action_set_vid(*args)
nbapi_make_action_set_vid = _mul_nbapi.nbapi_make_action_set_vid

def nbapi_make_action_strip_vlan():
  return _mul_nbapi.nbapi_make_action_strip_vlan()
nbapi_make_action_strip_vlan = _mul_nbapi.nbapi_make_action_strip_vlan

def nbapi_make_action_set_dmac(*args):
  return _mul_nbapi.nbapi_make_action_set_dmac(*args)
nbapi_make_action_set_dmac = _mul_nbapi.nbapi_make_action_set_dmac

def nbapi_make_action_set_smac(*args):
  return _mul_nbapi.nbapi_make_action_set_smac(*args)
nbapi_make_action_set_smac = _mul_nbapi.nbapi_make_action_set_smac

def nbapi_make_action_set_nw_saddr(*args):
  return _mul_nbapi.nbapi_make_action_set_nw_saddr(*args)
nbapi_make_action_set_nw_saddr = _mul_nbapi.nbapi_make_action_set_nw_saddr

def nbapi_make_action_set_nw_daddr(*args):
  return _mul_nbapi.nbapi_make_action_set_nw_daddr(*args)
nbapi_make_action_set_nw_daddr = _mul_nbapi.nbapi_make_action_set_nw_daddr

def nbapi_make_action_set_vlan_pcp(*args):
  return _mul_nbapi.nbapi_make_action_set_vlan_pcp(*args)
nbapi_make_action_set_vlan_pcp = _mul_nbapi.nbapi_make_action_set_vlan_pcp

def nbapi_make_action_set_nw_tos(*args):
  return _mul_nbapi.nbapi_make_action_set_nw_tos(*args)
nbapi_make_action_set_nw_tos = _mul_nbapi.nbapi_make_action_set_nw_tos

def nbapi_make_action_set_tp_dport(*args):
  return _mul_nbapi.nbapi_make_action_set_tp_dport(*args)
nbapi_make_action_set_tp_dport = _mul_nbapi.nbapi_make_action_set_tp_dport

def nbapi_make_action_set_tp_sport(*args):
  return _mul_nbapi.nbapi_make_action_set_tp_sport(*args)
nbapi_make_action_set_tp_sport = _mul_nbapi.nbapi_make_action_set_tp_sport

def nbapi_make_action_group(*args):
  return _mul_nbapi.nbapi_make_action_group(*args)
nbapi_make_action_group = _mul_nbapi.nbapi_make_action_group

def nbapi_make_action_push(*args):
  return _mul_nbapi.nbapi_make_action_push(*args)
nbapi_make_action_push = _mul_nbapi.nbapi_make_action_push

def nbapi_make_action_strip_mpls(*args):
  return _mul_nbapi.nbapi_make_action_strip_mpls(*args)
nbapi_make_action_strip_mpls = _mul_nbapi.nbapi_make_action_strip_mpls

def nbapi_make_action_strip_pbb():
  return _mul_nbapi.nbapi_make_action_strip_pbb()
nbapi_make_action_strip_pbb = _mul_nbapi.nbapi_make_action_strip_pbb

def nbapi_make_action_set_mpls_ttl(*args):
  return _mul_nbapi.nbapi_make_action_set_mpls_ttl(*args)
nbapi_make_action_set_mpls_ttl = _mul_nbapi.nbapi_make_action_set_mpls_ttl

def nbapi_make_action_dec_mpls_ttl():
  return _mul_nbapi.nbapi_make_action_dec_mpls_ttl()
nbapi_make_action_dec_mpls_ttl = _mul_nbapi.nbapi_make_action_dec_mpls_ttl

def nbapi_make_action_set_ip_ttl(*args):
  return _mul_nbapi.nbapi_make_action_set_ip_ttl(*args)
nbapi_make_action_set_ip_ttl = _mul_nbapi.nbapi_make_action_set_ip_ttl

def nbapi_make_action_dec_ip_ttl():
  return _mul_nbapi.nbapi_make_action_dec_ip_ttl()
nbapi_make_action_dec_ip_ttl = _mul_nbapi.nbapi_make_action_dec_ip_ttl

def nbapi_make_action_cp_ttl(*args):
  return _mul_nbapi.nbapi_make_action_cp_ttl(*args)
nbapi_make_action_cp_ttl = _mul_nbapi.nbapi_make_action_cp_ttl

def nbapi_make_action_set_eth_type(*args):
  return _mul_nbapi.nbapi_make_action_set_eth_type(*args)
nbapi_make_action_set_eth_type = _mul_nbapi.nbapi_make_action_set_eth_type

def nbapi_make_action_set_mpls_label(*args):
  return _mul_nbapi.nbapi_make_action_set_mpls_label(*args)
nbapi_make_action_set_mpls_label = _mul_nbapi.nbapi_make_action_set_mpls_label

def nbapi_make_action_set_mpls_tc(*args):
  return _mul_nbapi.nbapi_make_action_set_mpls_tc(*args)
nbapi_make_action_set_mpls_tc = _mul_nbapi.nbapi_make_action_set_mpls_tc

def nbapi_make_action_set_mpls_bos(*args):
  return _mul_nbapi.nbapi_make_action_set_mpls_bos(*args)
nbapi_make_action_set_mpls_bos = _mul_nbapi.nbapi_make_action_set_mpls_bos

def nbapi_make_action_set_tp_port(*args):
  return _mul_nbapi.nbapi_make_action_set_tp_port(*args)
nbapi_make_action_set_tp_port = _mul_nbapi.nbapi_make_action_set_tp_port

def nbapi_make_action_set_tp_udp_sport(*args):
  return _mul_nbapi.nbapi_make_action_set_tp_udp_sport(*args)
nbapi_make_action_set_tp_udp_sport = _mul_nbapi.nbapi_make_action_set_tp_udp_sport

def nbapi_make_action_set_tp_udp_dport(*args):
  return _mul_nbapi.nbapi_make_action_set_tp_udp_dport(*args)
nbapi_make_action_set_tp_udp_dport = _mul_nbapi.nbapi_make_action_set_tp_udp_dport

def nbapi_make_action_set_tp_tcp_sport(*args):
  return _mul_nbapi.nbapi_make_action_set_tp_tcp_sport(*args)
nbapi_make_action_set_tp_tcp_sport = _mul_nbapi.nbapi_make_action_set_tp_tcp_sport

def nbapi_make_action_set_tp_tcp_dport(*args):
  return _mul_nbapi.nbapi_make_action_set_tp_tcp_dport(*args)
nbapi_make_action_set_tp_tcp_dport = _mul_nbapi.nbapi_make_action_set_tp_tcp_dport

def nbapi_make_action_set_queue(*args):
  return _mul_nbapi.nbapi_make_action_set_queue(*args)
nbapi_make_action_set_queue = _mul_nbapi.nbapi_make_action_set_queue

def get_flow(*args):
  return _mul_nbapi.get_flow(*args)
get_flow = _mul_nbapi.get_flow

def get_single_flow(*args):
  return _mul_nbapi.get_single_flow(*args)
get_single_flow = _mul_nbapi.get_single_flow

def get_flow_number(*args):
  return _mul_nbapi.get_flow_number(*args)
get_flow_number = _mul_nbapi.get_flow_number

def get_group(*args):
  return _mul_nbapi.get_group(*args)
get_group = _mul_nbapi.get_group

def get_group_number(*args):
  return _mul_nbapi.get_group_number(*args)
get_group_number = _mul_nbapi.get_group_number

def nbapi_dump_single_group_bkt(*args):
  return _mul_nbapi.nbapi_dump_single_group_bkt(*args)
nbapi_dump_single_group_bkt = _mul_nbapi.nbapi_dump_single_group_bkt

def nbapi_dump_single_flow_action(*args):
  return _mul_nbapi.nbapi_dump_single_flow_action(*args)
nbapi_dump_single_flow_action = _mul_nbapi.nbapi_dump_single_flow_action

def nbapi_of10_dump_actions(*args):
  return _mul_nbapi.nbapi_of10_dump_actions(*args)
nbapi_of10_dump_actions = _mul_nbapi.nbapi_of10_dump_actions

def nbapi_of131_dump_actions(*args):
  return _mul_nbapi.nbapi_of131_dump_actions(*args)
nbapi_of131_dump_actions = _mul_nbapi.nbapi_of131_dump_actions
class nbapi_switch_meter_list_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, nbapi_switch_meter_list_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, nbapi_switch_meter_list_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["array"] = _mul_nbapi.nbapi_switch_meter_list_t_array_set
    __swig_getmethods__["array"] = _mul_nbapi.nbapi_switch_meter_list_t_array_get
    if _newclass:array = _swig_property(_mul_nbapi.nbapi_switch_meter_list_t_array_get, _mul_nbapi.nbapi_switch_meter_list_t_array_set)
    __swig_setmethods__["length"] = _mul_nbapi.nbapi_switch_meter_list_t_length_set
    __swig_getmethods__["length"] = _mul_nbapi.nbapi_switch_meter_list_t_length_get
    if _newclass:length = _swig_property(_mul_nbapi.nbapi_switch_meter_list_t_length_get, _mul_nbapi.nbapi_switch_meter_list_t_length_set)
    def __init__(self): 
        this = _mul_nbapi.new_nbapi_switch_meter_list_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_nbapi_switch_meter_list_t
    __del__ = lambda self : None;
nbapi_switch_meter_list_t_swigregister = _mul_nbapi.nbapi_switch_meter_list_t_swigregister
nbapi_switch_meter_list_t_swigregister(nbapi_switch_meter_list_t)


def prepare_add_meter(*args):
  return _mul_nbapi.prepare_add_meter(*args)
prepare_add_meter = _mul_nbapi.prepare_add_meter

def nbapi_meter_band_add(*args):
  return _mul_nbapi.nbapi_meter_band_add(*args)
nbapi_meter_band_add = _mul_nbapi.nbapi_meter_band_add

def nbapi_meter_add(*args):
  return _mul_nbapi.nbapi_meter_add(*args)
nbapi_meter_add = _mul_nbapi.nbapi_meter_add

def nbapi_meter_free(*args):
  return _mul_nbapi.nbapi_meter_free(*args)
nbapi_meter_free = _mul_nbapi.nbapi_meter_free

def nbapi_delete_meter(*args):
  return _mul_nbapi.nbapi_delete_meter(*args)
nbapi_delete_meter = _mul_nbapi.nbapi_delete_meter

def get_meter(*args):
  return _mul_nbapi.get_meter(*args)
get_meter = _mul_nbapi.get_meter

def get_meter_number(*args):
  return _mul_nbapi.get_meter_number(*args)
get_meter_number = _mul_nbapi.get_meter_number

def nbapi_get_band_type(*args):
  return _mul_nbapi.nbapi_get_band_type(*args)
nbapi_get_band_type = _mul_nbapi.nbapi_get_band_type

def nbapi_get_band_rate(*args):
  return _mul_nbapi.nbapi_get_band_rate(*args)
nbapi_get_band_rate = _mul_nbapi.nbapi_get_band_rate

def nbapi_get_band_burst_size(*args):
  return _mul_nbapi.nbapi_get_band_burst_size(*args)
nbapi_get_band_burst_size = _mul_nbapi.nbapi_get_band_burst_size

def nbapi_get_band_prec_level(*args):
  return _mul_nbapi.nbapi_get_band_prec_level(*args)
nbapi_get_band_prec_level = _mul_nbapi.nbapi_get_band_prec_level
class nbapi_fabric_host_list_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, nbapi_fabric_host_list_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, nbapi_fabric_host_list_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["array"] = _mul_nbapi.nbapi_fabric_host_list_t_array_set
    __swig_getmethods__["array"] = _mul_nbapi.nbapi_fabric_host_list_t_array_get
    if _newclass:array = _swig_property(_mul_nbapi.nbapi_fabric_host_list_t_array_get, _mul_nbapi.nbapi_fabric_host_list_t_array_set)
    __swig_setmethods__["length"] = _mul_nbapi.nbapi_fabric_host_list_t_length_set
    __swig_getmethods__["length"] = _mul_nbapi.nbapi_fabric_host_list_t_length_get
    if _newclass:length = _swig_property(_mul_nbapi.nbapi_fabric_host_list_t_length_get, _mul_nbapi.nbapi_fabric_host_list_t_length_set)
    def __init__(self): 
        this = _mul_nbapi.new_nbapi_fabric_host_list_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_nbapi_fabric_host_list_t
    __del__ = lambda self : None;
nbapi_fabric_host_list_t_swigregister = _mul_nbapi.nbapi_fabric_host_list_t_swigregister
nbapi_fabric_host_list_t_swigregister(nbapi_fabric_host_list_t)

class nbapi_fabric_port_tnid_list_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, nbapi_fabric_port_tnid_list_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, nbapi_fabric_port_tnid_list_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["array"] = _mul_nbapi.nbapi_fabric_port_tnid_list_t_array_set
    __swig_getmethods__["array"] = _mul_nbapi.nbapi_fabric_port_tnid_list_t_array_get
    if _newclass:array = _swig_property(_mul_nbapi.nbapi_fabric_port_tnid_list_t_array_get, _mul_nbapi.nbapi_fabric_port_tnid_list_t_array_set)
    __swig_setmethods__["length"] = _mul_nbapi.nbapi_fabric_port_tnid_list_t_length_set
    __swig_getmethods__["length"] = _mul_nbapi.nbapi_fabric_port_tnid_list_t_length_get
    if _newclass:length = _swig_property(_mul_nbapi.nbapi_fabric_port_tnid_list_t_length_get, _mul_nbapi.nbapi_fabric_port_tnid_list_t_length_set)
    def __init__(self): 
        this = _mul_nbapi.new_nbapi_fabric_port_tnid_list_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_nbapi_fabric_port_tnid_list_t
    __del__ = lambda self : None;
nbapi_fabric_port_tnid_list_t_swigregister = _mul_nbapi.nbapi_fabric_port_tnid_list_t_swigregister
nbapi_fabric_port_tnid_list_t_swigregister(nbapi_fabric_port_tnid_list_t)

class nbapi_fabric_tenant_nw_list_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, nbapi_fabric_tenant_nw_list_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, nbapi_fabric_tenant_nw_list_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["array"] = _mul_nbapi.nbapi_fabric_tenant_nw_list_t_array_set
    __swig_getmethods__["array"] = _mul_nbapi.nbapi_fabric_tenant_nw_list_t_array_get
    if _newclass:array = _swig_property(_mul_nbapi.nbapi_fabric_tenant_nw_list_t_array_get, _mul_nbapi.nbapi_fabric_tenant_nw_list_t_array_set)
    __swig_setmethods__["length"] = _mul_nbapi.nbapi_fabric_tenant_nw_list_t_length_set
    __swig_getmethods__["length"] = _mul_nbapi.nbapi_fabric_tenant_nw_list_t_length_get
    if _newclass:length = _swig_property(_mul_nbapi.nbapi_fabric_tenant_nw_list_t_length_get, _mul_nbapi.nbapi_fabric_tenant_nw_list_t_length_set)
    def __init__(self): 
        this = _mul_nbapi.new_nbapi_fabric_tenant_nw_list_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_nbapi_fabric_tenant_nw_list_t
    __del__ = lambda self : None;
nbapi_fabric_tenant_nw_list_t_swigregister = _mul_nbapi.nbapi_fabric_tenant_nw_list_t_swigregister
nbapi_fabric_tenant_nw_list_t_swigregister(nbapi_fabric_tenant_nw_list_t)

class nbapi_fabric_route(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, nbapi_fabric_route, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, nbapi_fabric_route, name)
    __repr__ = _swig_repr
    __swig_setmethods__["src_host"] = _mul_nbapi.nbapi_fabric_route_src_host_set
    __swig_getmethods__["src_host"] = _mul_nbapi.nbapi_fabric_route_src_host_get
    if _newclass:src_host = _swig_property(_mul_nbapi.nbapi_fabric_route_src_host_get, _mul_nbapi.nbapi_fabric_route_src_host_set)
    __swig_setmethods__["dst_host"] = _mul_nbapi.nbapi_fabric_route_dst_host_set
    __swig_getmethods__["dst_host"] = _mul_nbapi.nbapi_fabric_route_dst_host_get
    if _newclass:dst_host = _swig_property(_mul_nbapi.nbapi_fabric_route_dst_host_get, _mul_nbapi.nbapi_fabric_route_dst_host_set)
    __swig_setmethods__["str_route"] = _mul_nbapi.nbapi_fabric_route_str_route_set
    __swig_getmethods__["str_route"] = _mul_nbapi.nbapi_fabric_route_str_route_get
    if _newclass:str_route = _swig_property(_mul_nbapi.nbapi_fabric_route_str_route_get, _mul_nbapi.nbapi_fabric_route_str_route_set)
    def __init__(self): 
        this = _mul_nbapi.new_nbapi_fabric_route()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_nbapi_fabric_route
    __del__ = lambda self : None;
nbapi_fabric_route_swigregister = _mul_nbapi.nbapi_fabric_route_swigregister
nbapi_fabric_route_swigregister(nbapi_fabric_route)

class nbapi_fabric_route_list_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, nbapi_fabric_route_list_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, nbapi_fabric_route_list_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["array"] = _mul_nbapi.nbapi_fabric_route_list_t_array_set
    __swig_getmethods__["array"] = _mul_nbapi.nbapi_fabric_route_list_t_array_get
    if _newclass:array = _swig_property(_mul_nbapi.nbapi_fabric_route_list_t_array_get, _mul_nbapi.nbapi_fabric_route_list_t_array_set)
    __swig_setmethods__["length"] = _mul_nbapi.nbapi_fabric_route_list_t_length_set
    __swig_getmethods__["length"] = _mul_nbapi.nbapi_fabric_route_list_t_length_get
    if _newclass:length = _swig_property(_mul_nbapi.nbapi_fabric_route_list_t_length_get, _mul_nbapi.nbapi_fabric_route_list_t_length_set)
    def __init__(self): 
        this = _mul_nbapi.new_nbapi_fabric_route_list_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_nbapi_fabric_route_list_t
    __del__ = lambda self : None;
nbapi_fabric_route_list_t_swigregister = _mul_nbapi.nbapi_fabric_route_list_t_swigregister
nbapi_fabric_route_list_t_swigregister(nbapi_fabric_route_list_t)


def add_del_fabric_port_tnid(*args):
  return _mul_nbapi.add_del_fabric_port_tnid(*args)
add_del_fabric_port_tnid = _mul_nbapi.add_del_fabric_port_tnid

def get_fabric_tenant_net_all():
  return _mul_nbapi.get_fabric_tenant_net_all()
get_fabric_tenant_net_all = _mul_nbapi.get_fabric_tenant_net_all

def get_fabric_port_tnid_all():
  return _mul_nbapi.get_fabric_port_tnid_all()
get_fabric_port_tnid_all = _mul_nbapi.get_fabric_port_tnid_all

def get_fabric_host_all(*args):
  return _mul_nbapi.get_fabric_host_all(*args)
get_fabric_host_all = _mul_nbapi.get_fabric_host_all

def nbapi_uuid_to_str(*args):
  return _mul_nbapi.nbapi_uuid_to_str(*args)
nbapi_uuid_to_str = _mul_nbapi.nbapi_uuid_to_str

def add_fabric_host(*args):
  return _mul_nbapi.add_fabric_host(*args)
add_fabric_host = _mul_nbapi.add_fabric_host

def delete_fabric_host(*args):
  return _mul_nbapi.delete_fabric_host(*args)
delete_fabric_host = _mul_nbapi.delete_fabric_host

def nbapi_get_fabric_route_all():
  return _mul_nbapi.nbapi_get_fabric_route_all()
nbapi_get_fabric_route_all = _mul_nbapi.nbapi_get_fabric_route_all

def nbapi_get_host_route(*args):
  return _mul_nbapi.nbapi_get_host_route(*args)
nbapi_get_host_route = _mul_nbapi.nbapi_get_host_route

def nbapi_compare_src_host(*args):
  return _mul_nbapi.nbapi_compare_src_host(*args)
nbapi_compare_src_host = _mul_nbapi.nbapi_compare_src_host
class nbapi_path_elem_list_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, nbapi_path_elem_list_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, nbapi_path_elem_list_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["array"] = _mul_nbapi.nbapi_path_elem_list_t_array_set
    __swig_getmethods__["array"] = _mul_nbapi.nbapi_path_elem_list_t_array_get
    if _newclass:array = _swig_property(_mul_nbapi.nbapi_path_elem_list_t_array_get, _mul_nbapi.nbapi_path_elem_list_t_array_set)
    __swig_setmethods__["length"] = _mul_nbapi.nbapi_path_elem_list_t_length_set
    __swig_getmethods__["length"] = _mul_nbapi.nbapi_path_elem_list_t_length_get
    if _newclass:length = _swig_property(_mul_nbapi.nbapi_path_elem_list_t_length_get, _mul_nbapi.nbapi_path_elem_list_t_length_set)
    def __init__(self): 
        this = _mul_nbapi.new_nbapi_path_elem_list_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_nbapi_path_elem_list_t
    __del__ = lambda self : None;
nbapi_path_elem_list_t_swigregister = _mul_nbapi.nbapi_path_elem_list_t_swigregister
nbapi_path_elem_list_t_swigregister(nbapi_path_elem_list_t)

class nbapi_port_neigh_list_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, nbapi_port_neigh_list_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, nbapi_port_neigh_list_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["array"] = _mul_nbapi.nbapi_port_neigh_list_t_array_set
    __swig_getmethods__["array"] = _mul_nbapi.nbapi_port_neigh_list_t_array_get
    if _newclass:array = _swig_property(_mul_nbapi.nbapi_port_neigh_list_t_array_get, _mul_nbapi.nbapi_port_neigh_list_t_array_set)
    __swig_setmethods__["length"] = _mul_nbapi.nbapi_port_neigh_list_t_length_set
    __swig_getmethods__["length"] = _mul_nbapi.nbapi_port_neigh_list_t_length_get
    if _newclass:length = _swig_property(_mul_nbapi.nbapi_port_neigh_list_t_length_get, _mul_nbapi.nbapi_port_neigh_list_t_length_set)
    def __init__(self): 
        this = _mul_nbapi.new_nbapi_port_neigh_list_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_nbapi_port_neigh_list_t
    __del__ = lambda self : None;
nbapi_port_neigh_list_t_swigregister = _mul_nbapi.nbapi_port_neigh_list_t_swigregister
nbapi_port_neigh_list_t_swigregister(nbapi_port_neigh_list_t)


def get_simple_path(*args):
  return _mul_nbapi.get_simple_path(*args)
get_simple_path = _mul_nbapi.get_simple_path

def get_switch_neighbor_all(*args):
  return _mul_nbapi.get_switch_neighbor_all(*args)
get_switch_neighbor_all = _mul_nbapi.get_switch_neighbor_all
class Port_Stats_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Port_Stats_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Port_Stats_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["bps"] = _mul_nbapi.Port_Stats_t_bps_set
    __swig_getmethods__["bps"] = _mul_nbapi.Port_Stats_t_bps_get
    if _newclass:bps = _swig_property(_mul_nbapi.Port_Stats_t_bps_get, _mul_nbapi.Port_Stats_t_bps_set)
    __swig_setmethods__["pps"] = _mul_nbapi.Port_Stats_t_pps_set
    __swig_getmethods__["pps"] = _mul_nbapi.Port_Stats_t_pps_get
    if _newclass:pps = _swig_property(_mul_nbapi.Port_Stats_t_pps_get, _mul_nbapi.Port_Stats_t_pps_set)
    def __init__(self): 
        this = _mul_nbapi.new_Port_Stats_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mul_nbapi.delete_Port_Stats_t
    __del__ = lambda self : None;
Port_Stats_t_swigregister = _mul_nbapi.Port_Stats_t_swigregister
Port_Stats_t_swigregister(Port_Stats_t)


def get_switch_statistics_all(*args):
  return _mul_nbapi.get_switch_statistics_all(*args)
get_switch_statistics_all = _mul_nbapi.get_switch_statistics_all

def get_switch_statistics_port(*args):
  return _mul_nbapi.get_switch_statistics_port(*args)
get_switch_statistics_port = _mul_nbapi.get_switch_statistics_port

def nbapi_parse_bps_to_str(*args):
  return _mul_nbapi.nbapi_parse_bps_to_str(*args)
nbapi_parse_bps_to_str = _mul_nbapi.nbapi_parse_bps_to_str

def nbapi_parse_pps_to_str(*args):
  return _mul_nbapi.nbapi_parse_pps_to_str(*args)
nbapi_parse_pps_to_str = _mul_nbapi.nbapi_parse_pps_to_str

def get_table_stats(*args):
  return _mul_nbapi.get_table_stats(*args)
get_table_stats = _mul_nbapi.get_table_stats

def set_port_stats(*args):
  return _mul_nbapi.set_port_stats(*args)
set_port_stats = _mul_nbapi.set_port_stats

def show_port_stats(*args):
  return _mul_nbapi.show_port_stats(*args)
show_port_stats = _mul_nbapi.show_port_stats

def show_port_stats131(*args):
  return _mul_nbapi.show_port_stats131(*args)
show_port_stats131 = _mul_nbapi.show_port_stats131

def show_port_stats140(*args):
  return _mul_nbapi.show_port_stats140(*args)
show_port_stats140 = _mul_nbapi.show_port_stats140

def get_ofp140_port_stats_prop_type(*args):
  return _mul_nbapi.get_ofp140_port_stats_prop_type(*args)
get_ofp140_port_stats_prop_type = _mul_nbapi.get_ofp140_port_stats_prop_type

def show_ofp_port_stats_prop_ethernet(*args):
  return _mul_nbapi.show_ofp_port_stats_prop_ethernet(*args)
show_ofp_port_stats_prop_ethernet = _mul_nbapi.show_ofp_port_stats_prop_ethernet

def show_ofp_port_stats_prop_optical(*args):
  return _mul_nbapi.show_ofp_port_stats_prop_optical(*args)
show_ofp_port_stats_prop_optical = _mul_nbapi.show_ofp_port_stats_prop_optical

def get_switch_pkt_rx_rlim(*args):
  return _mul_nbapi.get_switch_pkt_rx_rlim(*args)
get_switch_pkt_rx_rlim = _mul_nbapi.get_switch_pkt_rx_rlim

def get_switch_pkt_tx_rlim(*args):
  return _mul_nbapi.get_switch_pkt_tx_rlim(*args)
get_switch_pkt_tx_rlim = _mul_nbapi.get_switch_pkt_tx_rlim

def nbapi_set_switch_pkt_rx_rlim(*args):
  return _mul_nbapi.nbapi_set_switch_pkt_rx_rlim(*args)
nbapi_set_switch_pkt_rx_rlim = _mul_nbapi.nbapi_set_switch_pkt_rx_rlim

def nbapi_set_switch_pkt_tx_rlim(*args):
  return _mul_nbapi.nbapi_set_switch_pkt_tx_rlim(*args)
nbapi_set_switch_pkt_tx_rlim = _mul_nbapi.nbapi_set_switch_pkt_tx_rlim

def nbapi_disable_switch_pkt_rx_rlim(*args):
  return _mul_nbapi.nbapi_disable_switch_pkt_rx_rlim(*args)
nbapi_disable_switch_pkt_rx_rlim = _mul_nbapi.nbapi_disable_switch_pkt_rx_rlim

def nbapi_disable_switch_pkt_tx_rlim(*args):
  return _mul_nbapi.nbapi_disable_switch_pkt_tx_rlim(*args)
nbapi_disable_switch_pkt_tx_rlim = _mul_nbapi.nbapi_disable_switch_pkt_tx_rlim
UUID_VARIANT_NCS = _mul_nbapi.UUID_VARIANT_NCS
UUID_VARIANT_DCE = _mul_nbapi.UUID_VARIANT_DCE
UUID_VARIANT_MICROSOFT = _mul_nbapi.UUID_VARIANT_MICROSOFT
UUID_VARIANT_OTHER = _mul_nbapi.UUID_VARIANT_OTHER
UUID_TYPE_DCE_TIME = _mul_nbapi.UUID_TYPE_DCE_TIME
UUID_TYPE_DCE_RANDOM = _mul_nbapi.UUID_TYPE_DCE_RANDOM

def uuid_clear(*args):
  return _mul_nbapi.uuid_clear(*args)
uuid_clear = _mul_nbapi.uuid_clear

def uuid_compare(*args):
  return _mul_nbapi.uuid_compare(*args)
uuid_compare = _mul_nbapi.uuid_compare

def uuid_copy(*args):
  return _mul_nbapi.uuid_copy(*args)
uuid_copy = _mul_nbapi.uuid_copy

def uuid_is_null(*args):
  return _mul_nbapi.uuid_is_null(*args)
uuid_is_null = _mul_nbapi.uuid_is_null

def uuid_parse(*args):
  return _mul_nbapi.uuid_parse(*args)
uuid_parse = _mul_nbapi.uuid_parse

def uuid_unparse(*args):
  return _mul_nbapi.uuid_unparse(*args)
uuid_unparse = _mul_nbapi.uuid_unparse

def uuid_unparse_lower(*args):
  return _mul_nbapi.uuid_unparse_lower(*args)
uuid_unparse_lower = _mul_nbapi.uuid_unparse_lower

def uuid_unparse_upper(*args):
  return _mul_nbapi.uuid_unparse_upper(*args)
uuid_unparse_upper = _mul_nbapi.uuid_unparse_upper

def uuid_time(*args):
  return _mul_nbapi.uuid_time(*args)
uuid_time = _mul_nbapi.uuid_time

def uuid_type(*args):
  return _mul_nbapi.uuid_type(*args)
uuid_type = _mul_nbapi.uuid_type

def uuid_variant(*args):
  return _mul_nbapi.uuid_variant(*args)
uuid_variant = _mul_nbapi.uuid_variant
# This file is compatible with both classic and new-style classes.


